{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l,a component values.\n *\n * Examples:\n *\n *    hsla(10deg, 50%, 30%, 0.5)\n *    // => HSLA\n *\n *    hsla(#ffcc00)\n *    // => HSLA\n *\n * @param {RGBA|HSLA|Unit} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @param {Unit} alpha\n * @return {HSLA}\n * @api public\n */\n\n\nfunction hsla(hue, saturation, lightness, alpha) {\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(hue);\n      return hue.hsla;\n\n    case 2:\n      utils.assertColor(hue);\n      var color = hue.hsla;\n      utils.assertType(saturation, 'unit', 'alpha');\n      var alpha = saturation.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(color.h, color.s, color.l, alpha.val);\n\n    default:\n      utils.assertType(hue, 'unit', 'hue');\n      utils.assertType(saturation, 'unit', 'saturation');\n      utils.assertType(lightness, 'unit', 'lightness');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(hue.val, saturation.val, lightness.val, alpha.val);\n  }\n}\n\n;\nhsla.params = ['hue', 'saturation', 'lightness', 'alpha'];\nmodule.exports = hsla;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/hsla.js"],"names":["utils","require","nodes","hsla","hue","saturation","lightness","alpha","arguments","length","assertColor","color","assertType","clone","type","val","HSLA","h","s","l","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,IAAT,CAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,SAA/B,EAA0CC,KAA1C,EAAgD;AAC9C,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACET,MAAAA,KAAK,CAACU,WAAN,CAAkBN,GAAlB;AACA,aAAOA,GAAG,CAACD,IAAX;;AACF,SAAK,CAAL;AACEH,MAAAA,KAAK,CAACU,WAAN,CAAkBN,GAAlB;AACA,UAAIO,KAAK,GAAGP,GAAG,CAACD,IAAhB;AACAH,MAAAA,KAAK,CAACY,UAAN,CAAiBP,UAAjB,EAA6B,MAA7B,EAAqC,OAArC;AACA,UAAIE,KAAK,GAAGF,UAAU,CAACQ,KAAX,EAAZ;AACA,UAAI,OAAON,KAAK,CAACO,IAAjB,EAAuBP,KAAK,CAACQ,GAAN,IAAa,GAAb;AACvB,aAAO,IAAIb,KAAK,CAACc,IAAV,CACHL,KAAK,CAACM,CADH,EAEHN,KAAK,CAACO,CAFH,EAGHP,KAAK,CAACQ,CAHH,EAIHZ,KAAK,CAACQ,GAJH,CAAP;;AAKF;AACEf,MAAAA,KAAK,CAACY,UAAN,CAAiBR,GAAjB,EAAsB,MAAtB,EAA8B,KAA9B;AACAJ,MAAAA,KAAK,CAACY,UAAN,CAAiBP,UAAjB,EAA6B,MAA7B,EAAqC,YAArC;AACAL,MAAAA,KAAK,CAACY,UAAN,CAAiBN,SAAjB,EAA4B,MAA5B,EAAoC,WAApC;AACAN,MAAAA,KAAK,CAACY,UAAN,CAAiBL,KAAjB,EAAwB,MAAxB,EAAgC,OAAhC;AACA,UAAIA,KAAK,GAAGA,KAAK,CAACM,KAAN,EAAZ;AACA,UAAIN,KAAK,IAAI,OAAOA,KAAK,CAACO,IAA1B,EAAgCP,KAAK,CAACQ,GAAN,IAAa,GAAb;AAChC,aAAO,IAAIb,KAAK,CAACc,IAAV,CACHZ,GAAG,CAACW,GADD,EAEHV,UAAU,CAACU,GAFR,EAGHT,SAAS,CAACS,GAHP,EAIHR,KAAK,CAACQ,GAJH,CAAP;AAtBJ;AA4BD;;AAAA;AACDZ,IAAI,CAACiB,MAAL,GAAc,CAAC,KAAD,EAAQ,YAAR,EAAsB,WAAtB,EAAmC,OAAnC,CAAd;AACAC,MAAM,CAACC,OAAP,GAAiBnB,IAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l,a component values.\n *\n * Examples:\n *\n *    hsla(10deg, 50%, 30%, 0.5)\n *    // => HSLA\n *\n *    hsla(#ffcc00)\n *    // => HSLA\n *\n * @param {RGBA|HSLA|Unit} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @param {Unit} alpha\n * @return {HSLA}\n * @api public\n */\n\nfunction hsla(hue, saturation, lightness, alpha){\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(hue);\n      return hue.hsla;\n    case 2:\n      utils.assertColor(hue);\n      var color = hue.hsla;\n      utils.assertType(saturation, 'unit', 'alpha');\n      var alpha = saturation.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          color.h\n        , color.s\n        , color.l\n        , alpha.val);\n    default:\n      utils.assertType(hue, 'unit', 'hue');\n      utils.assertType(saturation, 'unit', 'saturation');\n      utils.assertType(lightness, 'unit', 'lightness');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.HSLA(\n          hue.val\n        , saturation.val\n        , lightness.val\n        , alpha.val);\n  }\n};\nhsla.params = ['hue', 'saturation', 'lightness', 'alpha'];\nmodule.exports = hsla;\n"]},"metadata":{},"sourceType":"script"}