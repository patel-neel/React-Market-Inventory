{"ast":null,"code":"var _possibleConstructorReturn = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar util = require(\"./util\");\n\nvar binarySearch = require(\"./binary-search\");\n\nvar ArraySet = require(\"./array-set\").ArraySet;\n\nvar base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\n\n\nvar readWasm = require(\"../lib/read-wasm\");\n\nvar wasm = require(\"./wasm\");\n\nvar INTERNAL = Symbol(\"smcInternal\");\n\nvar SourceMapConsumer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SourceMapConsumer(aSourceMap, aSourceMapURL) {\n    _classCallCheck(this, SourceMapConsumer);\n\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n\n  _createClass(SourceMapConsumer, [{\n    key: \"_parseMappings\",\n    value:\n    /**\n     * Parse the mappings in a string in to a data structure which we can easily\n     * query (the ordered arrays in the `this.__generatedMappings` and\n     * `this.__originalMappings` properties).\n     */\n    function _parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    }\n    /**\n     * Iterate over each mapping between an original source/line/column and a\n     * generated line/column in this source map.\n     *\n     * @param Function aCallback\n     *        The function that is called with each mapping.\n     * @param Object aContext\n     *        Optional. If specified, this object will be the value of `this` every\n     *        time that `aCallback` is called.\n     * @param aOrder\n     *        Either `SourceMapConsumer.GENERATED_ORDER` or\n     *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n     *        iterate over the mappings sorted by the generated file's line/column\n     *        order or the original's source/line/column order, respectively. Defaults to\n     *        `SourceMapConsumer.GENERATED_ORDER`.\n     */\n\n  }, {\n    key: \"eachMapping\",\n    value: function eachMapping(aCallback, aContext, aOrder) {\n      throw new Error(\"Subclasses must implement eachMapping\");\n    }\n    /**\n     * Returns all generated line and column information for the original source,\n     * line, and column provided. If no column is provided, returns all mappings\n     * corresponding to a either the line we are searching for or the next\n     * closest line that has any mappings. Otherwise, returns all mappings\n     * corresponding to the given line and either the column we are searching for\n     * or the next closest column that has any offsets.\n     *\n     * The only argument is an object with the following properties:\n     *\n     *   - source: The filename of the original source.\n     *   - line: The line number in the original source.  The line number is 1-based.\n     *   - column: Optional. the column number in the original source.\n     *    The column number is 0-based.\n     *\n     * and an array of objects is returned, each with the following properties:\n     *\n     *   - line: The line number in the generated source, or null.  The\n     *    line number is 1-based.\n     *   - column: The column number in the generated source, or null.\n     *    The column number is 0-based.\n     */\n\n  }, {\n    key: \"allGeneratedPositionsFor\",\n    value: function allGeneratedPositionsFor(aArgs) {\n      throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      throw new Error(\"Subclasses must implement destroy\");\n    }\n  }], [{\n    key: \"initialize\",\n    value: function initialize(opts) {\n      readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n    }\n  }, {\n    key: \"fromSourceMap\",\n    value: function fromSourceMap(aSourceMap, aSourceMapURL) {\n      return _factoryBSM(aSourceMap, aSourceMapURL);\n    }\n    /**\n     * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n     * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n     * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n     * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n     * value.\n     *\n     * You must not use the consumer after `f` completes!\n     *\n     * By using `with`, you do not have to remember to manually call `destroy` on\n     * the consumer, since it will be called automatically once `f` completes.\n     *\n     * ```js\n     * const xSquared = await SourceMapConsumer.with(\n     *   myRawSourceMap,\n     *   null,\n     *   async function (consumer) {\n     *     // Use `consumer` inside here and don't worry about remembering\n     *     // to call `destroy`.\n     *\n     *     const x = await whatever(consumer);\n     *     return x * x;\n     *   }\n     * );\n     *\n     * // You may not use that `consumer` anymore out here; it has\n     * // been destroyed. But you can use `xSquared`.\n     * console.log(xSquared);\n     * ```\n     */\n\n  }, {\n    key: \"with\",\n    value: function _with(rawSourceMap, sourceMapUrl, f) {\n      // Note: The `acorn` version that `webpack` currently depends on doesn't\n      // support `async` functions, and the nodes that we support don't all have\n      // `.finally`. Therefore, this is written a bit more convolutedly than it\n      // should really be.\n      var consumer = null;\n      var promise = new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n      return promise.then(function (c) {\n        consumer = c;\n        return f(c);\n      }).then(function (x) {\n        if (consumer) {\n          consumer.destroy();\n        }\n\n        return x;\n      }, function (e) {\n        if (consumer) {\n          consumer.destroy();\n        }\n\n        throw e;\n      });\n    }\n  }]);\n\n  return SourceMapConsumer;\n}();\n/**\n * The version of the source mapping spec that we are consuming.\n */\n\n\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\nexports.SourceMapConsumer = SourceMapConsumer;\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\n\nvar BasicSourceMapConsumer = /*#__PURE__*/function (_SourceMapConsumer) {\n  \"use strict\";\n\n  _inherits(BasicSourceMapConsumer, _SourceMapConsumer);\n\n  var _super = _createSuper(BasicSourceMapConsumer);\n\n  function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n    var _this;\n\n    _classCallCheck(this, BasicSourceMapConsumer);\n\n    return _possibleConstructorReturn(_this, (_this = _super.call(this, INTERNAL)).then(function (that) {\n      var sourceMap = aSourceMap;\n\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      var version = util.getArg(sourceMap, \"version\");\n      var sources = util.getArg(sourceMap, \"sources\"); // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n\n      var names = util.getArg(sourceMap, \"names\", []);\n      var sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      var sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      var mappings = util.getArg(sourceMap, \"mappings\");\n      var file = util.getArg(sourceMap, \"file\", null); // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n\n      sources = sources.map(String) // Some source maps produce relative source paths like \"./foo.js\" instead of\n      // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n      // See bugzil.la/1090768.\n      .map(util.normalize) // Always ensure that absolute sources are internally stored relative to\n      // the source root, if the source root is absolute. Not doing this would\n      // be particularly problematic when the source root is a prefix of the\n      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n      .map(function (source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      }); // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n      that._absoluteSources = that._sources.toArray().map(function (s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n      return wasm().then(function (w) {\n        that._wasm = w;\n        return that;\n      });\n    }));\n  }\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n\n\n  _createClass(BasicSourceMapConsumer, [{\n    key: \"_findSourceIndex\",\n    value: function _findSourceIndex(aSource) {\n      var relativeSource = aSource;\n\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n\n      if (this._sources.has(relativeSource)) {\n        return this._sources.indexOf(relativeSource);\n      } // Maybe aSource is an absolute URL as returned by |sources|.  In\n      // this case we can't simply undo the transform.\n\n\n      for (var i = 0; i < this._absoluteSources.length; ++i) {\n        if (this._absoluteSources[i] == aSource) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n     *\n     * @param SourceMapGenerator aSourceMap\n     *        The source map that will be consumed.\n     * @param String aSourceMapURL\n     *        The URL at which the source map can be found (optional)\n     * @returns BasicSourceMapConsumer\n     */\n\n  }, {\n    key: \"sources\",\n    get: function get() {\n      return this._absoluteSources.slice();\n    }\n  }, {\n    key: \"_getMappingsPtr\",\n    value: function _getMappingsPtr() {\n      if (this._mappingsPtr === 0) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this._mappingsPtr;\n    }\n    /**\n     * Parse the mappings in a string in to a data structure which we can easily\n     * query (the ordered arrays in the `this.__generatedMappings` and\n     * `this.__originalMappings` properties).\n     */\n\n  }, {\n    key: \"_parseMappings\",\n    value: function _parseMappings(aStr, aSourceRoot) {\n      var size = aStr.length;\n\n      var mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n\n      var mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n\n      for (var i = 0; i < size; i++) {\n        mappingsBuf[i] = aStr.charCodeAt(i);\n      }\n\n      var mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n\n      if (!mappingsPtr) {\n        var error = this._wasm.exports.get_last_error();\n\n        var msg = \"Error parsing mappings (code \".concat(error, \"): \"); // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n\n        switch (error) {\n          case 1:\n            msg += \"the mappings contained a negative line, column, source index, or name index\";\n            break;\n\n          case 2:\n            msg += \"the mappings contained a number larger than 2**32\";\n            break;\n\n          case 3:\n            msg += \"reached EOF while in the middle of parsing a VLQ\";\n            break;\n\n          case 4:\n            msg += \"invalid base 64 character while parsing a VLQ\";\n            break;\n\n          default:\n            msg += \"unknown error code\";\n            break;\n        }\n\n        throw new Error(msg);\n      }\n\n      this._mappingsPtr = mappingsPtr;\n    }\n  }, {\n    key: \"eachMapping\",\n    value: function eachMapping(aCallback, aContext, aOrder) {\n      var _this2 = this;\n\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n      var sourceRoot = this.sourceRoot;\n\n      this._wasm.withMappingCallback(function (mapping) {\n        if (mapping.source !== null) {\n          mapping.source = _this2._sources.at(mapping.source);\n          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, _this2._sourceMapURL);\n\n          if (mapping.name !== null) {\n            mapping.name = _this2._names.at(mapping.name);\n          }\n        }\n\n        aCallback.call(context, mapping);\n      }, function () {\n        switch (order) {\n          case SourceMapConsumer.GENERATED_ORDER:\n            _this2._wasm.exports.by_generated_location(_this2._getMappingsPtr());\n\n            break;\n\n          case SourceMapConsumer.ORIGINAL_ORDER:\n            _this2._wasm.exports.by_original_location(_this2._getMappingsPtr());\n\n            break;\n\n          default:\n            throw new Error(\"Unknown order of iteration.\");\n        }\n      });\n    }\n  }, {\n    key: \"allGeneratedPositionsFor\",\n    value: function allGeneratedPositionsFor(aArgs) {\n      var _this3 = this;\n\n      var source = util.getArg(aArgs, \"source\");\n      var originalLine = util.getArg(aArgs, \"line\");\n      var originalColumn = aArgs.column || 0;\n      source = this._findSourceIndex(source);\n\n      if (source < 0) {\n        return [];\n      }\n\n      if (originalLine < 1) {\n        throw new Error(\"Line numbers must be >= 1\");\n      }\n\n      if (originalColumn < 0) {\n        throw new Error(\"Column numbers must be >= 0\");\n      }\n\n      var mappings = [];\n\n      this._wasm.withMappingCallback(function (m) {\n        var lastColumn = m.lastGeneratedColumn;\n\n        if (_this3._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n\n        mappings.push({\n          line: m.generatedLine,\n          column: m.generatedColumn,\n          lastColumn\n        });\n      }, function () {\n        _this3._wasm.exports.all_generated_locations_for(_this3._getMappingsPtr(), source, originalLine - 1, \"column\" in aArgs, originalColumn);\n      });\n\n      return mappings;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this._mappingsPtr !== 0) {\n        this._wasm.exports.free_mappings(this._mappingsPtr);\n\n        this._mappingsPtr = 0;\n      }\n    }\n    /**\n     * Compute the last column for each generated mapping. The last column is\n     * inclusive.\n     */\n\n  }, {\n    key: \"computeColumnSpans\",\n    value: function computeColumnSpans() {\n      if (this._computedColumnSpans) {\n        return;\n      }\n\n      this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n\n      this._computedColumnSpans = true;\n    }\n    /**\n     * Returns the original source, line, and column information for the generated\n     * source's line and column positions provided. The only argument is an object\n     * with the following properties:\n     *\n     *   - line: The line number in the generated source.  The line number\n     *     is 1-based.\n     *   - column: The column number in the generated source.  The column\n     *     number is 0-based.\n     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n     *     closest element that is smaller than or greater than the one we are\n     *     searching for, respectively, if the exact element cannot be found.\n     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n     *\n     * and an object is returned with the following properties:\n     *\n     *   - source: The original source file, or null.\n     *   - line: The line number in the original source, or null.  The\n     *     line number is 1-based.\n     *   - column: The column number in the original source, or null.  The\n     *     column number is 0-based.\n     *   - name: The original identifier, or null.\n     */\n\n  }, {\n    key: \"originalPositionFor\",\n    value: function originalPositionFor(aArgs) {\n      var _this4 = this;\n\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      };\n\n      if (needle.generatedLine < 1) {\n        throw new Error(\"Line numbers must be >= 1\");\n      }\n\n      if (needle.generatedColumn < 0) {\n        throw new Error(\"Column numbers must be >= 0\");\n      }\n\n      var bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n\n      if (bias == null) {\n        bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n      }\n\n      var mapping;\n\n      this._wasm.withMappingCallback(function (m) {\n        return mapping = m;\n      }, function () {\n        _this4._wasm.exports.original_location_for(_this4._getMappingsPtr(), needle.generatedLine - 1, needle.generatedColumn, bias);\n      });\n\n      if (mapping) {\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, \"source\", null);\n\n          if (source !== null) {\n            source = this._sources.at(source);\n            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n          }\n\n          var name = util.getArg(mapping, \"name\", null);\n\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n\n          return {\n            source,\n            line: util.getArg(mapping, \"originalLine\", null),\n            column: util.getArg(mapping, \"originalColumn\", null),\n            name\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n    /**\n     * Return true if we have the source content for every source in the source\n     * map, false otherwise.\n     */\n\n  }, {\n    key: \"hasContentsOfAllSources\",\n    value: function hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n\n      return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n        return sc == null;\n      });\n    }\n    /**\n     * Returns the original source content. The only argument is the url of the\n     * original source file. Returns null if no original source content is\n     * available.\n     */\n\n  }, {\n    key: \"sourceContentFor\",\n    value: function sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      var index = this._findSourceIndex(aSource);\n\n      if (index >= 0) {\n        return this.sourcesContent[index];\n      }\n\n      var relativeSource = aSource;\n\n      if (this.sourceRoot != null) {\n        relativeSource = util.relative(this.sourceRoot, relativeSource);\n      }\n\n      var url;\n\n      if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n\n        if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n        }\n\n        if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n        }\n      } // This function is used recursively from\n      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n      // don't want to throw if we can't find the source - we just want to\n      // return null, so we provide a flag to exit gracefully.\n\n\n      if (nullOnMissing) {\n        return null;\n      }\n\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n    /**\n     * Returns the generated line and column information for the original source,\n     * line, and column positions provided. The only argument is an object with\n     * the following properties:\n     *\n     *   - source: The filename of the original source.\n     *   - line: The line number in the original source.  The line number\n     *     is 1-based.\n     *   - column: The column number in the original source.  The column\n     *     number is 0-based.\n     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n     *     closest element that is smaller than or greater than the one we are\n     *     searching for, respectively, if the exact element cannot be found.\n     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n     *\n     * and an object is returned with the following properties:\n     *\n     *   - line: The line number in the generated source, or null.  The\n     *     line number is 1-based.\n     *   - column: The column number in the generated source, or null.\n     *     The column number is 0-based.\n     */\n\n  }, {\n    key: \"generatedPositionFor\",\n    value: function generatedPositionFor(aArgs) {\n      var _this5 = this;\n\n      var source = util.getArg(aArgs, \"source\");\n      source = this._findSourceIndex(source);\n\n      if (source < 0) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n\n      var needle = {\n        source,\n        originalLine: util.getArg(aArgs, \"line\"),\n        originalColumn: util.getArg(aArgs, \"column\")\n      };\n\n      if (needle.originalLine < 1) {\n        throw new Error(\"Line numbers must be >= 1\");\n      }\n\n      if (needle.originalColumn < 0) {\n        throw new Error(\"Column numbers must be >= 0\");\n      }\n\n      var bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n\n      if (bias == null) {\n        bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n      }\n\n      var mapping;\n\n      this._wasm.withMappingCallback(function (m) {\n        return mapping = m;\n      }, function () {\n        _this5._wasm.exports.generated_location_for(_this5._getMappingsPtr(), needle.source, needle.originalLine - 1, needle.originalColumn, bias);\n      });\n\n      if (mapping) {\n        if (mapping.source === needle.source) {\n          var lastColumn = mapping.lastGeneratedColumn;\n\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n\n          return {\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn\n          };\n        }\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n  }], [{\n    key: \"fromSourceMap\",\n    value: function fromSourceMap(aSourceMap, aSourceMapURL) {\n      return new BasicSourceMapConsumer(aSourceMap.toString());\n    }\n  }]);\n\n  return BasicSourceMapConsumer;\n}(SourceMapConsumer);\n\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\n\nvar IndexedSourceMapConsumer = /*#__PURE__*/function (_SourceMapConsumer2) {\n  \"use strict\";\n\n  _inherits(IndexedSourceMapConsumer, _SourceMapConsumer2);\n\n  var _super2 = _createSuper(IndexedSourceMapConsumer);\n\n  function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n    var _this6;\n\n    _classCallCheck(this, IndexedSourceMapConsumer);\n\n    return _possibleConstructorReturn(_this6, (_this6 = _super2.call(this, INTERNAL)).then(function (that) {\n      var sourceMap = aSourceMap;\n\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      var version = util.getArg(sourceMap, \"version\");\n      var sections = util.getArg(sourceMap, \"sections\");\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n      var lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(function (s) {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n\n        var offset = util.getArg(s, \"offset\");\n        var offsetLine = util.getArg(offset, \"line\");\n        var offsetColumn = util.getArg(offset, \"column\");\n\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n\n        lastOffset = offset;\n        var cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(function (consumer) {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(function (s) {\n        that._sections = s;\n        return that;\n      });\n    }));\n  } // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n\n  _createClass(IndexedSourceMapConsumer, [{\n    key: \"_generatedMappings\",\n    get: function get() {\n      if (!this.__generatedMappings) {\n        this._sortGeneratedMappings();\n      }\n\n      return this.__generatedMappings;\n    }\n  }, {\n    key: \"_originalMappings\",\n    get: function get() {\n      if (!this.__originalMappings) {\n        this._sortOriginalMappings();\n      }\n\n      return this.__originalMappings;\n    }\n  }, {\n    key: \"_generatedMappingsUnsorted\",\n    get: function get() {\n      if (!this.__generatedMappingsUnsorted) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappingsUnsorted;\n    }\n  }, {\n    key: \"_originalMappingsUnsorted\",\n    get: function get() {\n      if (!this.__originalMappingsUnsorted) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappingsUnsorted;\n    }\n  }, {\n    key: \"_sortGeneratedMappings\",\n    value: function _sortGeneratedMappings() {\n      var mappings = this._generatedMappingsUnsorted;\n      mappings.sort(util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = mappings;\n    }\n  }, {\n    key: \"_sortOriginalMappings\",\n    value: function _sortOriginalMappings() {\n      var mappings = this._originalMappingsUnsorted;\n      mappings.sort(util.compareByOriginalPositions);\n      this.__originalMappings = mappings;\n    }\n    /**\n     * The list of original sources.\n     */\n\n  }, {\n    key: \"sources\",\n    get: function get() {\n      var sources = [];\n\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      }\n\n      return sources;\n    }\n    /**\n     * Returns the original source, line, and column information for the generated\n     * source's line and column positions provided. The only argument is an object\n     * with the following properties:\n     *\n     *   - line: The line number in the generated source.  The line number\n     *     is 1-based.\n     *   - column: The column number in the generated source.  The column\n     *     number is 0-based.\n     *\n     * and an object is returned with the following properties:\n     *\n     *   - source: The original source file, or null.\n     *   - line: The line number in the original source, or null.  The\n     *     line number is 1-based.\n     *   - column: The column number in the original source, or null.  The\n     *     column number is 0-based.\n     *   - name: The original identifier, or null.\n     */\n\n  }, {\n    key: \"originalPositionFor\",\n    value: function originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, \"line\"),\n        generatedColumn: util.getArg(aArgs, \"column\")\n      }; // Find the section containing the generated position we're trying to map\n      // to an original position.\n\n      var sectionIndex = binarySearch.search(needle, this._sections, function (aNeedle, section) {\n        var cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n\n        if (cmp) {\n          return cmp;\n        }\n\n        return aNeedle.generatedColumn - section.generatedOffset.generatedColumn;\n      });\n      var section = this._sections[sectionIndex];\n\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        bias: aArgs.bias\n      });\n    }\n    /**\n     * Return true if we have the source content for every source in the source\n     * map, false otherwise.\n     */\n\n  }, {\n    key: \"hasContentsOfAllSources\",\n    value: function hasContentsOfAllSources() {\n      return this._sections.every(function (s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    }\n    /**\n     * Returns the original source content. The only argument is the url of the\n     * original source file. Returns null if no original source content is\n     * available.\n     */\n\n  }, {\n    key: \"sourceContentFor\",\n    value: function sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var content = section.consumer.sourceContentFor(aSource, true);\n\n        if (content) {\n          return content;\n        }\n      }\n\n      if (nullOnMissing) {\n        return null;\n      }\n\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n    /**\n     * Returns the generated line and column information for the original source,\n     * line, and column positions provided. The only argument is an object with\n     * the following properties:\n     *\n     *   - source: The filename of the original source.\n     *   - line: The line number in the original source.  The line number\n     *     is 1-based.\n     *   - column: The column number in the original source.  The column\n     *     number is 0-based.\n     *\n     * and an object is returned with the following properties:\n     *\n     *   - line: The line number in the generated source, or null.  The\n     *     line number is 1-based.\n     *   - column: The column number in the generated source, or null.\n     *     The column number is 0-based.\n     */\n\n  }, {\n    key: \"generatedPositionFor\",\n    value: function generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i]; // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n\n        if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n          continue;\n        }\n\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n          };\n          return ret;\n        }\n      }\n\n      return {\n        line: null,\n        column: null\n      };\n    }\n    /**\n     * Parse the mappings in a string in to a data structure which we can easily\n     * query (the ordered arrays in the `this.__generatedMappings` and\n     * `this.__originalMappings` properties).\n     */\n\n  }, {\n    key: \"_parseMappings\",\n    value: function _parseMappings(aStr, aSourceRoot) {\n      var _this7 = this;\n\n      var generatedMappings = this.__generatedMappingsUnsorted = [];\n      var originalMappings = this.__originalMappingsUnsorted = [];\n\n      var _loop = function _loop(i) {\n        var section = _this7._sections[i];\n        var sectionMappings = [];\n        section.consumer.eachMapping(function (m) {\n          return sectionMappings.push(m);\n        });\n\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[j]; // TODO: test if null is correct here.  The original code used\n          // `source`, which would actually have gotten used as null because\n          // var's get hoisted.\n          // See: https://github.com/mozilla/source-map/issues/333\n\n          var source = util.computeSourceURL(section.consumer.sourceRoot, null, _this7._sourceMapURL);\n\n          _this7._sources.add(source);\n\n          source = _this7._sources.indexOf(source);\n          var name = null;\n\n          if (mapping.name) {\n            _this7._names.add(mapping.name);\n\n            name = _this7._names.indexOf(mapping.name);\n          } // The mappings coming from the consumer for the section have\n          // generated positions relative to the start of the section, so we\n          // need to offset them to be relative to the start of the concatenated\n          // generated file.\n\n\n          var adjustedMapping = {\n            source,\n            generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name\n          };\n          generatedMappings.push(adjustedMapping);\n\n          if (typeof adjustedMapping.originalLine === \"number\") {\n            originalMappings.push(adjustedMapping);\n          }\n        }\n      };\n\n      for (var i = 0; i < this._sections.length; i++) {\n        _loop(i);\n      }\n    }\n  }, {\n    key: \"eachMapping\",\n    value: function eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n      var mappings;\n\n      switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          mappings = this._generatedMappings;\n          break;\n\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          mappings = this._originalMappings;\n          break;\n\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = null;\n\n        if (mapping.source !== null) {\n          source = this._sources.at(mapping.source);\n          source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n        }\n\n        return {\n          source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    }\n    /**\n     * Find the mapping that best matches the hypothetical \"needle\" mapping that\n     * we are searching for in the given \"haystack\" of mappings.\n     */\n\n  }, {\n    key: \"_findMapping\",\n    value: function _findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n      }\n\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    }\n  }, {\n    key: \"allGeneratedPositionsFor\",\n    value: function allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, \"line\"); // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to 0, we thus find the last mapping for\n      // the given line, provided such a mapping exists.\n\n      var needle = {\n        source: util.getArg(aArgs, \"source\"),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, \"column\", 0)\n      };\n      needle.source = this._findSourceIndex(needle.source);\n\n      if (needle.source < 0) {\n        return [];\n      }\n\n      if (needle.originalLine < 1) {\n        throw new Error(\"Line numbers must be >= 1\");\n      }\n\n      if (needle.originalColumn < 0) {\n        throw new Error(\"Column numbers must be >= 0\");\n      }\n\n      var mappings = [];\n\n      var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (aArgs.column === undefined) {\n          var originalLine = mapping.originalLine; // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we found. Since\n          // mappings are sorted, this is guaranteed to find all mappings for\n          // the line we found.\n\n          while (mapping && mapping.originalLine === originalLine) {\n            var lastColumn = mapping.lastGeneratedColumn;\n\n            if (this._computedColumnSpans && lastColumn === null) {\n              lastColumn = Infinity;\n            }\n\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn\n            });\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn; // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we were searching for.\n          // Since mappings are sorted, this is guaranteed to find all mappings for\n          // the line we are searching for.\n\n          while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n            var _lastColumn = mapping.lastGeneratedColumn;\n\n            if (this._computedColumnSpans && _lastColumn === null) {\n              _lastColumn = Infinity;\n            }\n\n            mappings.push({\n              line: util.getArg(mapping, \"generatedLine\", null),\n              column: util.getArg(mapping, \"generatedColumn\", null),\n              lastColumn: _lastColumn\n            });\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n\n      return mappings;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      for (var i = 0; i < this._sections.length; i++) {\n        this._sections[i].consumer.destroy();\n      }\n    }\n  }]);\n\n  return IndexedSourceMapConsumer;\n}(SourceMapConsumer);\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\n\nfunction _factory(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var consumer = sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\n\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/node_modules/source-map/lib/source-map-consumer.js"],"names":["util","require","binarySearch","ArraySet","base64VLQ","readWasm","wasm","INTERNAL","Symbol","SourceMapConsumer","aSourceMap","aSourceMapURL","Promise","resolve","_factory","aStr","aSourceRoot","Error","aCallback","aContext","aOrder","aArgs","opts","initialize","_factoryBSM","rawSourceMap","sourceMapUrl","f","consumer","promise","then","c","x","destroy","e","prototype","_version","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","exports","BasicSourceMapConsumer","that","sourceMap","parseSourceMapInput","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","normalize","map","String","source","isAbsolute","relative","_names","fromArray","_sources","_absoluteSources","toArray","s","computeSourceURL","_mappings","_sourceMapURL","_computedColumnSpans","_mappingsPtr","_wasm","w","aSource","relativeSource","has","indexOf","i","length","slice","_parseMappings","size","mappingsBufPtr","allocate_mappings","mappingsBuf","Uint8Array","memory","buffer","charCodeAt","mappingsPtr","parse_mappings","error","get_last_error","msg","context","order","withMappingCallback","mapping","at","name","call","by_generated_location","_getMappingsPtr","by_original_location","originalLine","originalColumn","column","_findSourceIndex","m","lastColumn","lastGeneratedColumn","Infinity","push","line","generatedLine","generatedColumn","all_generated_locations_for","free_mappings","compute_column_spans","needle","bias","original_location_for","some","sc","nullOnMissing","index","url","urlParse","fileUriAbsPath","replace","scheme","path","generated_location_for","toString","IndexedSourceMapConsumer","sections","__generatedMappings","__originalMappings","__generatedMappingsUnsorted","__originalMappingsUnsorted","lastOffset","all","offset","offsetLine","offsetColumn","cons","generatedOffset","_sections","_sortGeneratedMappings","_sortOriginalMappings","_generatedMappingsUnsorted","sort","compareByGeneratedPositionsDeflated","_originalMappingsUnsorted","compareByOriginalPositions","j","sectionIndex","search","aNeedle","section","cmp","originalPositionFor","every","hasContentsOfAllSources","content","sourceContentFor","generatedPosition","generatedPositionFor","ret","generatedMappings","originalMappings","sectionMappings","eachMapping","add","adjustedMapping","_generatedMappings","_originalMappings","forEach","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","_findMapping","undefined","fromSourceMap"],"mappings":";;;;;;;;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,QAAxC;;AACA,IAAMC,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB,C,CAA2C;;;AAC3C,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAMM,QAAQ,GAAGC,MAAM,CAAC,aAAD,CAAvB;;IAEMC,iB;;;AACJ,6BAAYC,UAAZ,EAAwBC,aAAxB,EAAuC;AAAA;;AACrC;AACA;AACA;AACA,QAAID,UAAU,IAAIH,QAAlB,EAA4B;AAC1B,aAAOK,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,WAAOC,QAAQ,CAACJ,UAAD,EAAaC,aAAb,CAAf;AACD;;;;;AAkED;AACF;AACA;AACA;AACA;AACE,4BAAeI,IAAf,EAAqBC,WAArB,EAAkC;AAChC,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,qBAAYC,SAAZ,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AACvC,YAAM,IAAIH,KAAJ,CAAU,uCAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kCAAyBI,KAAzB,EAAgC;AAC9B,YAAM,IAAIJ,KAAJ,CAAU,oDAAV,CAAN;AACD;;;WAED,mBAAU;AACR,YAAM,IAAIA,KAAJ,CAAU,mCAAV,CAAN;AACD;;;WAzHD,oBAAkBK,IAAlB,EAAwB;AACtBjB,MAAAA,QAAQ,CAACkB,UAAT,CAAoBD,IAAI,CAAC,mBAAD,CAAxB;AACD;;;WAED,uBAAqBZ,UAArB,EAAiCC,aAAjC,EAAgD;AAC9C,aAAOa,WAAW,CAACd,UAAD,EAAaC,aAAb,CAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,eAAYc,YAAZ,EAA0BC,YAA1B,EAAwCC,CAAxC,EAA2C;AACzC;AACA;AACA;AACA;AAEA,UAAIC,QAAQ,GAAG,IAAf;AACA,UAAMC,OAAO,GAAG,IAAIpB,iBAAJ,CAAsBgB,YAAtB,EAAoCC,YAApC,CAAhB;AACA,aAAOG,OAAO,CACXC,IADI,CACC,UAAAC,CAAC,EAAI;AACTH,QAAAA,QAAQ,GAAGG,CAAX;AACA,eAAOJ,CAAC,CAACI,CAAD,CAAR;AACD,OAJI,EAKJD,IALI,CAKC,UAAAE,CAAC,EAAI;AACT,YAAIJ,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACK,OAAT;AACD;;AACD,eAAOD,CAAP;AACD,OAVI,EAUF,UAAAE,CAAC,EAAI;AACN,YAAIN,QAAJ,EAAc;AACZA,UAAAA,QAAQ,CAACK,OAAT;AACD;;AACD,cAAMC,CAAN;AACD,OAfI,CAAP;AAgBD;;;;;AA8DH;AACA;AACA;;;AACAzB,iBAAiB,CAAC0B,SAAlB,CAA4BC,QAA5B,GAAuC,CAAvC;AACA3B,iBAAiB,CAAC4B,eAAlB,GAAoC,CAApC;AACA5B,iBAAiB,CAAC6B,cAAlB,GAAmC,CAAnC;AAEA7B,iBAAiB,CAAC8B,oBAAlB,GAAyC,CAAzC;AACA9B,iBAAiB,CAAC+B,iBAAlB,GAAsC,CAAtC;AAEAC,OAAO,CAAChC,iBAAR,GAA4BA,iBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMiC,sB;;;;;;;AACJ,kCAAYhC,UAAZ,EAAwBC,aAAxB,EAAuC;AAAA;;AAAA;;AACrC,6CAAO,2BAAMJ,QAAN,GAAgBuB,IAAhB,CAAqB,UAAAa,IAAI,EAAI;AAClC,UAAIC,SAAS,GAAGlC,UAAhB;;AACA,UAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCkC,QAAAA,SAAS,GAAG5C,IAAI,CAAC6C,mBAAL,CAAyBnC,UAAzB,CAAZ;AACD;;AAED,UAAMoC,OAAO,GAAG9C,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,SAAvB,CAAhB;AACA,UAAII,OAAO,GAAGhD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,SAAvB,CAAd,CAPkC,CAQlC;AACA;;AACA,UAAMK,KAAK,GAAGjD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,OAAvB,EAAgC,EAAhC,CAAd;AACA,UAAIM,UAAU,GAAGlD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,YAAvB,EAAqC,IAArC,CAAjB;AACA,UAAMO,cAAc,GAAGnD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,gBAAvB,EAAyC,IAAzC,CAAvB;AACA,UAAMQ,QAAQ,GAAGpD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,UAAvB,CAAjB;AACA,UAAMS,IAAI,GAAGrD,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,MAAvB,EAA+B,IAA/B,CAAb,CAdkC,CAgBlC;AACA;;AACA,UAAIE,OAAO,IAAIH,IAAI,CAACP,QAApB,EAA8B;AAC5B,cAAM,IAAInB,KAAJ,CAAU,0BAA0B6B,OAApC,CAAN;AACD;;AAED,UAAII,UAAJ,EAAgB;AACdA,QAAAA,UAAU,GAAGlD,IAAI,CAACsD,SAAL,CAAeJ,UAAf,CAAb;AACD;;AAEDF,MAAAA,OAAO,GAAGA,OAAO,CACdO,GADO,CACHC,MADG,EAER;AACA;AACA;AAJQ,OAKPD,GALO,CAKHvD,IAAI,CAACsD,SALF,EAMR;AACA;AACA;AACA;AATQ,OAUPC,GAVO,CAUH,UAASE,MAAT,EAAiB;AACpB,eAAOP,UAAU,IAAIlD,IAAI,CAAC0D,UAAL,CAAgBR,UAAhB,CAAd,IAA6ClD,IAAI,CAAC0D,UAAL,CAAgBD,MAAhB,CAA7C,GACHzD,IAAI,CAAC2D,QAAL,CAAcT,UAAd,EAA0BO,MAA1B,CADG,GAEHA,MAFJ;AAGD,OAdO,CAAV,CA1BkC,CA0ClC;AACA;AACA;AACA;;AACAd,MAAAA,IAAI,CAACiB,MAAL,GAAczD,QAAQ,CAAC0D,SAAT,CAAmBZ,KAAK,CAACM,GAAN,CAAUC,MAAV,CAAnB,EAAsC,IAAtC,CAAd;AACAb,MAAAA,IAAI,CAACmB,QAAL,GAAgB3D,QAAQ,CAAC0D,SAAT,CAAmBb,OAAnB,EAA4B,IAA5B,CAAhB;AAEAL,MAAAA,IAAI,CAACoB,gBAAL,GAAwBpB,IAAI,CAACmB,QAAL,CAAcE,OAAd,GAAwBT,GAAxB,CAA4B,UAASU,CAAT,EAAY;AAC9D,eAAOjE,IAAI,CAACkE,gBAAL,CAAsBhB,UAAtB,EAAkCe,CAAlC,EAAqCtD,aAArC,CAAP;AACD,OAFuB,CAAxB;AAIAgC,MAAAA,IAAI,CAACO,UAAL,GAAkBA,UAAlB;AACAP,MAAAA,IAAI,CAACQ,cAAL,GAAsBA,cAAtB;AACAR,MAAAA,IAAI,CAACwB,SAAL,GAAiBf,QAAjB;AACAT,MAAAA,IAAI,CAACyB,aAAL,GAAqBzD,aAArB;AACAgC,MAAAA,IAAI,CAACU,IAAL,GAAYA,IAAZ;AAEAV,MAAAA,IAAI,CAAC0B,oBAAL,GAA4B,KAA5B;AACA1B,MAAAA,IAAI,CAAC2B,YAAL,GAAoB,CAApB;AACA3B,MAAAA,IAAI,CAAC4B,KAAL,GAAa,IAAb;AAEA,aAAOjE,IAAI,GAAGwB,IAAP,CAAY,UAAA0C,CAAC,EAAI;AACtB7B,QAAAA,IAAI,CAAC4B,KAAL,GAAaC,CAAb;AACA,eAAO7B,IAAP;AACD,OAHM,CAAP;AAID,KAnEM,CAAP;AAoED;AAED;AACF;AACA;AACA;;;;;WACE,0BAAiB8B,OAAjB,EAA0B;AACxB,UAAIC,cAAc,GAAGD,OAArB;;AACA,UAAI,KAAKvB,UAAL,IAAmB,IAAvB,EAA6B;AAC3BwB,QAAAA,cAAc,GAAG1E,IAAI,CAAC2D,QAAL,CAAc,KAAKT,UAAnB,EAA+BwB,cAA/B,CAAjB;AACD;;AAED,UAAI,KAAKZ,QAAL,CAAca,GAAd,CAAkBD,cAAlB,CAAJ,EAAuC;AACrC,eAAO,KAAKZ,QAAL,CAAcc,OAAd,CAAsBF,cAAtB,CAAP;AACD,OARuB,CAUxB;AACA;;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,gBAAL,CAAsBe,MAA1C,EAAkD,EAAED,CAApD,EAAuD;AACrD,YAAI,KAAKd,gBAAL,CAAsBc,CAAtB,KAA4BJ,OAAhC,EAAyC;AACvC,iBAAOI,CAAP;AACD;AACF;;AAED,aAAO,CAAC,CAAR;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SAKE,eAAc;AACZ,aAAO,KAAKd,gBAAL,CAAsBgB,KAAtB,EAAP;AACD;;;WAED,2BAAkB;AAChB,UAAI,KAAKT,YAAL,KAAsB,CAA1B,EAA6B;AAC3B,aAAKU,cAAL,CAAoB,KAAKb,SAAzB,EAAoC,KAAKjB,UAAzC;AACD;;AAED,aAAO,KAAKoB,YAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,wBAAevD,IAAf,EAAqBC,WAArB,EAAkC;AAChC,UAAMiE,IAAI,GAAGlE,IAAI,CAAC+D,MAAlB;;AAEA,UAAMI,cAAc,GAAG,KAAKX,KAAL,CAAW9B,OAAX,CAAmB0C,iBAAnB,CAAqCF,IAArC,CAAvB;;AACA,UAAMG,WAAW,GAAG,IAAIC,UAAJ,CAAe,KAAKd,KAAL,CAAW9B,OAAX,CAAmB6C,MAAnB,CAA0BC,MAAzC,EAAiDL,cAAjD,EAAiED,IAAjE,CAApB;;AACA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,IAApB,EAA0BJ,CAAC,EAA3B,EAA+B;AAC7BO,QAAAA,WAAW,CAACP,CAAD,CAAX,GAAiB9D,IAAI,CAACyE,UAAL,CAAgBX,CAAhB,CAAjB;AACD;;AAED,UAAMY,WAAW,GAAG,KAAKlB,KAAL,CAAW9B,OAAX,CAAmBiD,cAAnB,CAAkCR,cAAlC,CAApB;;AAEA,UAAI,CAACO,WAAL,EAAkB;AAChB,YAAME,KAAK,GAAG,KAAKpB,KAAL,CAAW9B,OAAX,CAAmBmD,cAAnB,EAAd;;AACA,YAAIC,GAAG,0CAAmCF,KAAnC,QAAP,CAFgB,CAIhB;;AACA,gBAAQA,KAAR;AACE,eAAK,CAAL;AACEE,YAAAA,GAAG,IAAI,6EAAP;AACA;;AACF,eAAK,CAAL;AACEA,YAAAA,GAAG,IAAI,mDAAP;AACA;;AACF,eAAK,CAAL;AACEA,YAAAA,GAAG,IAAI,kDAAP;AACA;;AACF,eAAK,CAAL;AACEA,YAAAA,GAAG,IAAI,+CAAP;AACA;;AACF;AACEA,YAAAA,GAAG,IAAI,oBAAP;AACA;AAfJ;;AAkBA,cAAM,IAAI5E,KAAJ,CAAU4E,GAAV,CAAN;AACD;;AAED,WAAKvB,YAAL,GAAoBmB,WAApB;AACD;;;WAED,qBAAYvE,SAAZ,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AAAA;;AACvC,UAAM0E,OAAO,GAAG3E,QAAQ,IAAI,IAA5B;AACA,UAAM4E,KAAK,GAAG3E,MAAM,IAAIX,iBAAiB,CAAC4B,eAA1C;AACA,UAAMa,UAAU,GAAG,KAAKA,UAAxB;;AAEA,WAAKqB,KAAL,CAAWyB,mBAAX,CACE,UAAAC,OAAO,EAAI;AACT,YAAIA,OAAO,CAACxC,MAAR,KAAmB,IAAvB,EAA6B;AAC3BwC,UAAAA,OAAO,CAACxC,MAAR,GAAiB,MAAI,CAACK,QAAL,CAAcoC,EAAd,CAAiBD,OAAO,CAACxC,MAAzB,CAAjB;AACAwC,UAAAA,OAAO,CAACxC,MAAR,GAAiBzD,IAAI,CAACkE,gBAAL,CAAsBhB,UAAtB,EAAkC+C,OAAO,CAACxC,MAA1C,EAAkD,MAAI,CAACW,aAAvD,CAAjB;;AAEA,cAAI6B,OAAO,CAACE,IAAR,KAAiB,IAArB,EAA2B;AACzBF,YAAAA,OAAO,CAACE,IAAR,GAAe,MAAI,CAACvC,MAAL,CAAYsC,EAAZ,CAAeD,OAAO,CAACE,IAAvB,CAAf;AACD;AACF;;AAEDjF,QAAAA,SAAS,CAACkF,IAAV,CAAeN,OAAf,EAAwBG,OAAxB;AACD,OAZH,EAaE,YAAM;AACJ,gBAAQF,KAAR;AACA,eAAKtF,iBAAiB,CAAC4B,eAAvB;AACE,YAAA,MAAI,CAACkC,KAAL,CAAW9B,OAAX,CAAmB4D,qBAAnB,CAAyC,MAAI,CAACC,eAAL,EAAzC;;AACA;;AACF,eAAK7F,iBAAiB,CAAC6B,cAAvB;AACE,YAAA,MAAI,CAACiC,KAAL,CAAW9B,OAAX,CAAmB8D,oBAAnB,CAAwC,MAAI,CAACD,eAAL,EAAxC;;AACA;;AACF;AACE,kBAAM,IAAIrF,KAAJ,CAAU,6BAAV,CAAN;AARF;AAUD,OAxBH;AA0BD;;;WAED,kCAAyBI,KAAzB,EAAgC;AAAA;;AAC9B,UAAIoC,MAAM,GAAGzD,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB,CAAb;AACA,UAAMmF,YAAY,GAAGxG,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,CAArB;AACA,UAAMoF,cAAc,GAAGpF,KAAK,CAACqF,MAAN,IAAgB,CAAvC;AAEAjD,MAAAA,MAAM,GAAG,KAAKkD,gBAAL,CAAsBlD,MAAtB,CAAT;;AACA,UAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,eAAO,EAAP;AACD;;AAED,UAAI+C,YAAY,GAAG,CAAnB,EAAsB;AACpB,cAAM,IAAIvF,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAIwF,cAAc,GAAG,CAArB,EAAwB;AACtB,cAAM,IAAIxF,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAMmC,QAAQ,GAAG,EAAjB;;AAEA,WAAKmB,KAAL,CAAWyB,mBAAX,CACE,UAAAY,CAAC,EAAI;AACH,YAAIC,UAAU,GAAGD,CAAC,CAACE,mBAAnB;;AACA,YAAI,MAAI,CAACzC,oBAAL,IAA6BwC,UAAU,KAAK,IAAhD,EAAsD;AACpDA,UAAAA,UAAU,GAAGE,QAAb;AACD;;AACD3D,QAAAA,QAAQ,CAAC4D,IAAT,CAAc;AACZC,UAAAA,IAAI,EAAEL,CAAC,CAACM,aADI;AAEZR,UAAAA,MAAM,EAAEE,CAAC,CAACO,eAFE;AAGZN,UAAAA;AAHY,SAAd;AAKD,OAXH,EAWK,YAAM;AACP,QAAA,MAAI,CAACtC,KAAL,CAAW9B,OAAX,CAAmB2E,2BAAnB,CACE,MAAI,CAACd,eAAL,EADF,EAEE7C,MAFF,EAGE+C,YAAY,GAAG,CAHjB,EAIE,YAAYnF,KAJd,EAKEoF,cALF;AAOD,OAnBH;;AAsBA,aAAOrD,QAAP;AACD;;;WAED,mBAAU;AACR,UAAI,KAAKkB,YAAL,KAAsB,CAA1B,EAA6B;AAC3B,aAAKC,KAAL,CAAW9B,OAAX,CAAmB4E,aAAnB,CAAiC,KAAK/C,YAAtC;;AACA,aAAKA,YAAL,GAAoB,CAApB;AACD;AACF;AAED;AACF;AACA;AACA;;;;WACE,8BAAqB;AACnB,UAAI,KAAKD,oBAAT,EAA+B;AAC7B;AACD;;AAED,WAAKE,KAAL,CAAW9B,OAAX,CAAmB6E,oBAAnB,CAAwC,KAAKhB,eAAL,EAAxC;;AACA,WAAKjC,oBAAL,GAA4B,IAA5B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,6BAAoBhD,KAApB,EAA2B;AAAA;;AACzB,UAAMkG,MAAM,GAAG;AACbL,QAAAA,aAAa,EAAElH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,CADF;AAEb8F,QAAAA,eAAe,EAAEnH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB;AAFJ,OAAf;;AAKA,UAAIkG,MAAM,CAACL,aAAP,GAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAIjG,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAIsG,MAAM,CAACJ,eAAP,GAAyB,CAA7B,EAAgC;AAC9B,cAAM,IAAIlG,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAIuG,IAAI,GAAGxH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,EAA2BZ,iBAAiB,CAAC8B,oBAA7C,CAAX;;AACA,UAAIiF,IAAI,IAAI,IAAZ,EAAkB;AAChBA,QAAAA,IAAI,GAAG/G,iBAAiB,CAAC8B,oBAAzB;AACD;;AAED,UAAI0D,OAAJ;;AACA,WAAK1B,KAAL,CAAWyB,mBAAX,CAA+B,UAAAY,CAAC;AAAA,eAAIX,OAAO,GAAGW,CAAd;AAAA,OAAhC,EAAiD,YAAM;AACrD,QAAA,MAAI,CAACrC,KAAL,CAAW9B,OAAX,CAAmBgF,qBAAnB,CACE,MAAI,CAACnB,eAAL,EADF,EAEEiB,MAAM,CAACL,aAAP,GAAuB,CAFzB,EAGEK,MAAM,CAACJ,eAHT,EAIEK,IAJF;AAMD,OAPD;;AASA,UAAIvB,OAAJ,EAAa;AACX,YAAIA,OAAO,CAACiB,aAAR,KAA0BK,MAAM,CAACL,aAArC,EAAoD;AAClD,cAAIzD,MAAM,GAAGzD,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,QAArB,EAA+B,IAA/B,CAAb;;AACA,cAAIxC,MAAM,KAAK,IAAf,EAAqB;AACnBA,YAAAA,MAAM,GAAG,KAAKK,QAAL,CAAcoC,EAAd,CAAiBzC,MAAjB,CAAT;AACAA,YAAAA,MAAM,GAAGzD,IAAI,CAACkE,gBAAL,CAAsB,KAAKhB,UAA3B,EAAuCO,MAAvC,EAA+C,KAAKW,aAApD,CAAT;AACD;;AAED,cAAI+B,IAAI,GAAGnG,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,MAArB,EAA6B,IAA7B,CAAX;;AACA,cAAIE,IAAI,KAAK,IAAb,EAAmB;AACjBA,YAAAA,IAAI,GAAG,KAAKvC,MAAL,CAAYsC,EAAZ,CAAeC,IAAf,CAAP;AACD;;AAED,iBAAO;AACL1C,YAAAA,MADK;AAELwD,YAAAA,IAAI,EAAEjH,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,cAArB,EAAqC,IAArC,CAFD;AAGLS,YAAAA,MAAM,EAAE1G,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,gBAArB,EAAuC,IAAvC,CAHH;AAILE,YAAAA;AAJK,WAAP;AAMD;AACF;;AAED,aAAO;AACL1C,QAAAA,MAAM,EAAE,IADH;AAELwD,QAAAA,IAAI,EAAE,IAFD;AAGLP,QAAAA,MAAM,EAAE,IAHH;AAILP,QAAAA,IAAI,EAAE;AAJD,OAAP;AAMD;AAED;AACF;AACA;AACA;;;;WACE,mCAA0B;AACxB,UAAI,CAAC,KAAKhD,cAAV,EAA0B;AACxB,eAAO,KAAP;AACD;;AACD,aAAO,KAAKA,cAAL,CAAoB2B,MAApB,IAA8B,KAAKhB,QAAL,CAAcmB,IAAd,EAA9B,IACL,CAAC,KAAK9B,cAAL,CAAoBuE,IAApB,CAAyB,UAASC,EAAT,EAAa;AAAE,eAAOA,EAAE,IAAI,IAAb;AAAoB,OAA5D,CADH;AAED;AAED;AACF;AACA;AACA;AACA;;;;WACE,0BAAiBlD,OAAjB,EAA0BmD,aAA1B,EAAyC;AACvC,UAAI,CAAC,KAAKzE,cAAV,EAA0B;AACxB,eAAO,IAAP;AACD;;AAED,UAAM0E,KAAK,GAAG,KAAKlB,gBAAL,CAAsBlC,OAAtB,CAAd;;AACA,UAAIoD,KAAK,IAAI,CAAb,EAAgB;AACd,eAAO,KAAK1E,cAAL,CAAoB0E,KAApB,CAAP;AACD;;AAED,UAAInD,cAAc,GAAGD,OAArB;;AACA,UAAI,KAAKvB,UAAL,IAAmB,IAAvB,EAA6B;AAC3BwB,QAAAA,cAAc,GAAG1E,IAAI,CAAC2D,QAAL,CAAc,KAAKT,UAAnB,EAA+BwB,cAA/B,CAAjB;AACD;;AAED,UAAIoD,GAAJ;;AACA,UAAI,KAAK5E,UAAL,IAAmB,IAAnB,KACI4E,GAAG,GAAG9H,IAAI,CAAC+H,QAAL,CAAc,KAAK7E,UAAnB,CADV,CAAJ,EAC+C;AAC7C;AACA;AACA;AACA;AACA,YAAM8E,cAAc,GAAGtD,cAAc,CAACuD,OAAf,CAAuB,YAAvB,EAAqC,EAArC,CAAvB;;AACA,YAAIH,GAAG,CAACI,MAAJ,IAAc,MAAd,IACG,KAAKpE,QAAL,CAAca,GAAd,CAAkBqD,cAAlB,CADP,EAC0C;AACxC,iBAAO,KAAK7E,cAAL,CAAoB,KAAKW,QAAL,CAAcc,OAAd,CAAsBoD,cAAtB,CAApB,CAAP;AACD;;AAED,YAAI,CAAC,CAACF,GAAG,CAACK,IAAL,IAAaL,GAAG,CAACK,IAAJ,IAAY,GAA1B,KACG,KAAKrE,QAAL,CAAca,GAAd,CAAkB,MAAMD,cAAxB,CADP,EACgD;AAC9C,iBAAO,KAAKvB,cAAL,CAAoB,KAAKW,QAAL,CAAcc,OAAd,CAAsB,MAAMF,cAA5B,CAApB,CAAP;AACD;AACF,OAhCsC,CAkCvC;AACA;AACA;AACA;;;AACA,UAAIkD,aAAJ,EAAmB;AACjB,eAAO,IAAP;AACD;;AAED,YAAM,IAAI3G,KAAJ,CAAU,MAAMyD,cAAN,GAAuB,4BAAjC,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqBrD,KAArB,EAA4B;AAAA;;AAC1B,UAAIoC,MAAM,GAAGzD,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB,CAAb;AACAoC,MAAAA,MAAM,GAAG,KAAKkD,gBAAL,CAAsBlD,MAAtB,CAAT;;AACA,UAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,eAAO;AACLwD,UAAAA,IAAI,EAAE,IADD;AAELP,UAAAA,MAAM,EAAE,IAFH;AAGLG,UAAAA,UAAU,EAAE;AAHP,SAAP;AAKD;;AAED,UAAMU,MAAM,GAAG;AACb9D,QAAAA,MADa;AAEb+C,QAAAA,YAAY,EAAExG,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,CAFD;AAGboF,QAAAA,cAAc,EAAEzG,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB;AAHH,OAAf;;AAMA,UAAIkG,MAAM,CAACf,YAAP,GAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIvF,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAIsG,MAAM,CAACd,cAAP,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIxF,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAIuG,IAAI,GAAGxH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,EAA2BZ,iBAAiB,CAAC8B,oBAA7C,CAAX;;AACA,UAAIiF,IAAI,IAAI,IAAZ,EAAkB;AAChBA,QAAAA,IAAI,GAAG/G,iBAAiB,CAAC8B,oBAAzB;AACD;;AAED,UAAI0D,OAAJ;;AACA,WAAK1B,KAAL,CAAWyB,mBAAX,CAA+B,UAAAY,CAAC;AAAA,eAAIX,OAAO,GAAGW,CAAd;AAAA,OAAhC,EAAiD,YAAM;AACrD,QAAA,MAAI,CAACrC,KAAL,CAAW9B,OAAX,CAAmB2F,sBAAnB,CACE,MAAI,CAAC9B,eAAL,EADF,EAEEiB,MAAM,CAAC9D,MAFT,EAGE8D,MAAM,CAACf,YAAP,GAAsB,CAHxB,EAIEe,MAAM,CAACd,cAJT,EAKEe,IALF;AAOD,OARD;;AAUA,UAAIvB,OAAJ,EAAa;AACX,YAAIA,OAAO,CAACxC,MAAR,KAAmB8D,MAAM,CAAC9D,MAA9B,EAAsC;AACpC,cAAIoD,UAAU,GAAGZ,OAAO,CAACa,mBAAzB;;AACA,cAAI,KAAKzC,oBAAL,IAA6BwC,UAAU,KAAK,IAAhD,EAAsD;AACpDA,YAAAA,UAAU,GAAGE,QAAb;AACD;;AACD,iBAAO;AACLE,YAAAA,IAAI,EAAEjH,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADD;AAELS,YAAAA,MAAM,EAAE1G,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFH;AAGLY,YAAAA;AAHK,WAAP;AAKD;AACF;;AAED,aAAO;AACLI,QAAAA,IAAI,EAAE,IADD;AAELP,QAAAA,MAAM,EAAE,IAFH;AAGLG,QAAAA,UAAU,EAAE;AAHP,OAAP;AAKD;;;WAnYD,uBAAqBnG,UAArB,EAAiCC,aAAjC,EAAgD;AAC9C,aAAO,IAAI+B,sBAAJ,CAA2BhC,UAAU,CAAC2H,QAAX,EAA3B,CAAP;AACD;;;;EA5GkC5H,iB;;AAgfrCiC,sBAAsB,CAACP,SAAvB,CAAiCP,QAAjC,GAA4CnB,iBAA5C;AACAgC,OAAO,CAACC,sBAAR,GAAiCA,sBAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACM4F,wB;;;;;;;AACJ,oCAAY5H,UAAZ,EAAwBC,aAAxB,EAAuC;AAAA;;AAAA;;AACrC,8CAAO,6BAAMJ,QAAN,GAAgBuB,IAAhB,CAAqB,UAAAa,IAAI,EAAI;AAClC,UAAIC,SAAS,GAAGlC,UAAhB;;AACA,UAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCkC,QAAAA,SAAS,GAAG5C,IAAI,CAAC6C,mBAAL,CAAyBnC,UAAzB,CAAZ;AACD;;AAED,UAAMoC,OAAO,GAAG9C,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,SAAvB,CAAhB;AACA,UAAM2F,QAAQ,GAAGvI,IAAI,CAAC+C,MAAL,CAAYH,SAAZ,EAAuB,UAAvB,CAAjB;;AAEA,UAAIE,OAAO,IAAIH,IAAI,CAACP,QAApB,EAA8B;AAC5B,cAAM,IAAInB,KAAJ,CAAU,0BAA0B6B,OAApC,CAAN;AACD;;AAEDH,MAAAA,IAAI,CAACmB,QAAL,GAAgB,IAAI3D,QAAJ,EAAhB;AACAwC,MAAAA,IAAI,CAACiB,MAAL,GAAc,IAAIzD,QAAJ,EAAd;AACAwC,MAAAA,IAAI,CAAC6F,mBAAL,GAA2B,IAA3B;AACA7F,MAAAA,IAAI,CAAC8F,kBAAL,GAA0B,IAA1B;AACA9F,MAAAA,IAAI,CAAC+F,2BAAL,GAAmC,IAAnC;AACA/F,MAAAA,IAAI,CAACgG,0BAAL,GAAkC,IAAlC;AAEA,UAAIC,UAAU,GAAG;AACf3B,QAAAA,IAAI,EAAE,CAAC,CADQ;AAEfP,QAAAA,MAAM,EAAE;AAFO,OAAjB;AAIA,aAAO9F,OAAO,CAACiI,GAAR,CAAYN,QAAQ,CAAChF,GAAT,CAAa,UAAAU,CAAC,EAAI;AACnC,YAAIA,CAAC,CAAC6D,GAAN,EAAW;AACT;AACA;AACA,gBAAM,IAAI7G,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,YAAM6H,MAAM,GAAG9I,IAAI,CAAC+C,MAAL,CAAYkB,CAAZ,EAAe,QAAf,CAAf;AACA,YAAM8E,UAAU,GAAG/I,IAAI,CAAC+C,MAAL,CAAY+F,MAAZ,EAAoB,MAApB,CAAnB;AACA,YAAME,YAAY,GAAGhJ,IAAI,CAAC+C,MAAL,CAAY+F,MAAZ,EAAoB,QAApB,CAArB;;AAEA,YAAIC,UAAU,GAAGH,UAAU,CAAC3B,IAAxB,IACC8B,UAAU,KAAKH,UAAU,CAAC3B,IAA1B,IAAkC+B,YAAY,GAAGJ,UAAU,CAAClC,MADjE,EAC0E;AACxE,gBAAM,IAAIzF,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD2H,QAAAA,UAAU,GAAGE,MAAb;AAEA,YAAMG,IAAI,GAAG,IAAIxI,iBAAJ,CAAsBT,IAAI,CAAC+C,MAAL,CAAYkB,CAAZ,EAAe,KAAf,CAAtB,EAA6CtD,aAA7C,CAAb;AACA,eAAOsI,IAAI,CAACnH,IAAL,CAAU,UAAAF,QAAQ,EAAI;AAC3B,iBAAO;AACLsH,YAAAA,eAAe,EAAE;AACf;AACA;AACAhC,cAAAA,aAAa,EAAE6B,UAAU,GAAG,CAHb;AAIf5B,cAAAA,eAAe,EAAE6B,YAAY,GAAG;AAJjB,aADZ;AAOLpH,YAAAA;AAPK,WAAP;AASD,SAVM,CAAP;AAWD,OA5BkB,CAAZ,EA4BHE,IA5BG,CA4BE,UAAAmC,CAAC,EAAI;AACZtB,QAAAA,IAAI,CAACwG,SAAL,GAAiBlF,CAAjB;AACA,eAAOtB,IAAP;AACD,OA/BM,CAAP;AAgCD,KAxDM,CAAP;AAyDD,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;SACA,eAAyB;AACvB,UAAI,CAAC,KAAK6F,mBAAV,EAA+B;AAC7B,aAAKY,sBAAL;AACD;;AAED,aAAO,KAAKZ,mBAAZ;AACD;;;SAED,eAAwB;AACtB,UAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC5B,aAAKY,qBAAL;AACD;;AAED,aAAO,KAAKZ,kBAAZ;AACD;;;SAED,eAAiC;AAC/B,UAAI,CAAC,KAAKC,2BAAV,EAAuC;AACrC,aAAK1D,cAAL,CAAoB,KAAKb,SAAzB,EAAoC,KAAKjB,UAAzC;AACD;;AAED,aAAO,KAAKwF,2BAAZ;AACD;;;SAED,eAAgC;AAC9B,UAAI,CAAC,KAAKC,0BAAV,EAAsC;AACpC,aAAK3D,cAAL,CAAoB,KAAKb,SAAzB,EAAoC,KAAKjB,UAAzC;AACD;;AAED,aAAO,KAAKyF,0BAAZ;AACD;;;WAED,kCAAyB;AACvB,UAAMvF,QAAQ,GAAG,KAAKkG,0BAAtB;AACAlG,MAAAA,QAAQ,CAACmG,IAAT,CAAcvJ,IAAI,CAACwJ,mCAAnB;AACA,WAAKhB,mBAAL,GAA2BpF,QAA3B;AACD;;;WAED,iCAAwB;AACtB,UAAMA,QAAQ,GAAG,KAAKqG,yBAAtB;AACArG,MAAAA,QAAQ,CAACmG,IAAT,CAAcvJ,IAAI,CAAC0J,0BAAnB;AACA,WAAKjB,kBAAL,GAA0BrF,QAA1B;AACD;AAED;AACF;AACA;;;;SACE,eAAc;AACZ,UAAMJ,OAAO,GAAG,EAAhB;;AACA,WAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsE,SAAL,CAAerE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,aAAK,IAAI8E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,SAAL,CAAetE,CAAf,EAAkBjD,QAAlB,CAA2BoB,OAA3B,CAAmC8B,MAAvD,EAA+D6E,CAAC,EAAhE,EAAoE;AAClE3G,UAAAA,OAAO,CAACgE,IAAR,CAAa,KAAKmC,SAAL,CAAetE,CAAf,EAAkBjD,QAAlB,CAA2BoB,OAA3B,CAAmC2G,CAAnC,CAAb;AACD;AACF;;AACD,aAAO3G,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,6BAAoB3B,KAApB,EAA2B;AACzB,UAAMkG,MAAM,GAAG;AACbL,QAAAA,aAAa,EAAElH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,CADF;AAEb8F,QAAAA,eAAe,EAAEnH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB;AAFJ,OAAf,CADyB,CAMzB;AACA;;AACA,UAAMuI,YAAY,GAAG1J,YAAY,CAAC2J,MAAb,CAAoBtC,MAApB,EAA4B,KAAK4B,SAAjC,EACnB,UAASW,OAAT,EAAkBC,OAAlB,EAA2B;AACzB,YAAMC,GAAG,GAAGF,OAAO,CAAC5C,aAAR,GAAwB6C,OAAO,CAACb,eAAR,CAAwBhC,aAA5D;;AACA,YAAI8C,GAAJ,EAAS;AACP,iBAAOA,GAAP;AACD;;AAED,eAAQF,OAAO,CAAC3C,eAAR,GACA4C,OAAO,CAACb,eAAR,CAAwB/B,eADhC;AAED,OATkB,CAArB;AAUA,UAAM4C,OAAO,GAAG,KAAKZ,SAAL,CAAeS,YAAf,CAAhB;;AAEA,UAAI,CAACG,OAAL,EAAc;AACZ,eAAO;AACLtG,UAAAA,MAAM,EAAE,IADH;AAELwD,UAAAA,IAAI,EAAE,IAFD;AAGLP,UAAAA,MAAM,EAAE,IAHH;AAILP,UAAAA,IAAI,EAAE;AAJD,SAAP;AAMD;;AAED,aAAO4D,OAAO,CAACnI,QAAR,CAAiBqI,mBAAjB,CAAqC;AAC1ChD,QAAAA,IAAI,EAAEM,MAAM,CAACL,aAAP,IACH6C,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,GAAwC,CADrC,CADoC;AAG1CR,QAAAA,MAAM,EAAEa,MAAM,CAACJ,eAAP,IACL4C,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,KAA0CK,MAAM,CAACL,aAAjD,GACE6C,OAAO,CAACb,eAAR,CAAwB/B,eAAxB,GAA0C,CAD5C,GAEE,CAHG,CAHkC;AAO1CK,QAAAA,IAAI,EAAEnG,KAAK,CAACmG;AAP8B,OAArC,CAAP;AASD;AAED;AACF;AACA;AACA;;;;WACE,mCAA0B;AACxB,aAAO,KAAK2B,SAAL,CAAee,KAAf,CAAqB,UAASjG,CAAT,EAAY;AACtC,eAAOA,CAAC,CAACrC,QAAF,CAAWuI,uBAAX,EAAP;AACD,OAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;;;WACE,0BAAiB1F,OAAjB,EAA0BmD,aAA1B,EAAyC;AACvC,WAAK,IAAI/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsE,SAAL,CAAerE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,YAAMkF,OAAO,GAAG,KAAKZ,SAAL,CAAetE,CAAf,CAAhB;AAEA,YAAMuF,OAAO,GAAGL,OAAO,CAACnI,QAAR,CAAiByI,gBAAjB,CAAkC5F,OAAlC,EAA2C,IAA3C,CAAhB;;AACA,YAAI2F,OAAJ,EAAa;AACX,iBAAOA,OAAP;AACD;AACF;;AACD,UAAIxC,aAAJ,EAAmB;AACjB,eAAO,IAAP;AACD;;AACD,YAAM,IAAI3G,KAAJ,CAAU,MAAMwD,OAAN,GAAgB,4BAA1B,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqBpD,KAArB,EAA4B;AAC1B,WAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsE,SAAL,CAAerE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,YAAMkF,OAAO,GAAG,KAAKZ,SAAL,CAAetE,CAAf,CAAhB,CAD8C,CAG9C;AACA;;AACA,YAAIkF,OAAO,CAACnI,QAAR,CAAiB+E,gBAAjB,CAAkC3G,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB,CAAlC,MAAoE,CAAC,CAAzE,EAA4E;AAC1E;AACD;;AACD,YAAMiJ,iBAAiB,GAAGP,OAAO,CAACnI,QAAR,CAAiB2I,oBAAjB,CAAsClJ,KAAtC,CAA1B;;AACA,YAAIiJ,iBAAJ,EAAuB;AACrB,cAAME,GAAG,GAAG;AACVvD,YAAAA,IAAI,EAAEqD,iBAAiB,CAACrD,IAAlB,IACH8C,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,GAAwC,CADrC,CADI;AAGVR,YAAAA,MAAM,EAAE4D,iBAAiB,CAAC5D,MAAlB,IACLqD,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,KAA0CoD,iBAAiB,CAACrD,IAA5D,GACE8C,OAAO,CAACb,eAAR,CAAwB/B,eAAxB,GAA0C,CAD5C,GAEE,CAHG;AAHE,WAAZ;AAQA,iBAAOqD,GAAP;AACD;AACF;;AAED,aAAO;AACLvD,QAAAA,IAAI,EAAE,IADD;AAELP,QAAAA,MAAM,EAAE;AAFH,OAAP;AAID;AAED;AACF;AACA;AACA;AACA;;;;WACE,wBAAe3F,IAAf,EAAqBC,WAArB,EAAkC;AAAA;;AAChC,UAAMyJ,iBAAiB,GAAG,KAAK/B,2BAAL,GAAmC,EAA7D;AACA,UAAMgC,gBAAgB,GAAG,KAAK/B,0BAAL,GAAkC,EAA3D;;AAFgC,iCAGvB9D,CAHuB;AAI9B,YAAMkF,OAAO,GAAG,MAAI,CAACZ,SAAL,CAAetE,CAAf,CAAhB;AAEA,YAAM8F,eAAe,GAAG,EAAxB;AACAZ,QAAAA,OAAO,CAACnI,QAAR,CAAiBgJ,WAAjB,CAA6B,UAAAhE,CAAC;AAAA,iBAAI+D,eAAe,CAAC3D,IAAhB,CAAqBJ,CAArB,CAAJ;AAAA,SAA9B;;AAEA,aAAK,IAAI+C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgB,eAAe,CAAC7F,MAApC,EAA4C6E,CAAC,EAA7C,EAAiD;AAC/C,cAAM1D,OAAO,GAAG0E,eAAe,CAAChB,CAAD,CAA/B,CAD+C,CAG/C;AACA;AACA;AACA;;AACA,cAAIlG,MAAM,GAAGzD,IAAI,CAACkE,gBAAL,CAAsB6F,OAAO,CAACnI,QAAR,CAAiBsB,UAAvC,EAAmD,IAAnD,EAAyD,MAAI,CAACkB,aAA9D,CAAb;;AACA,UAAA,MAAI,CAACN,QAAL,CAAc+G,GAAd,CAAkBpH,MAAlB;;AACAA,UAAAA,MAAM,GAAG,MAAI,CAACK,QAAL,CAAcc,OAAd,CAAsBnB,MAAtB,CAAT;AAEA,cAAI0C,IAAI,GAAG,IAAX;;AACA,cAAIF,OAAO,CAACE,IAAZ,EAAkB;AAChB,YAAA,MAAI,CAACvC,MAAL,CAAYiH,GAAZ,CAAgB5E,OAAO,CAACE,IAAxB;;AACAA,YAAAA,IAAI,GAAG,MAAI,CAACvC,MAAL,CAAYgB,OAAZ,CAAoBqB,OAAO,CAACE,IAA5B,CAAP;AACD,WAf8C,CAiB/C;AACA;AACA;AACA;;;AACA,cAAM2E,eAAe,GAAG;AACtBrH,YAAAA,MADsB;AAEtByD,YAAAA,aAAa,EAAEjB,OAAO,CAACiB,aAAR,IACZ6C,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,GAAwC,CAD5B,CAFO;AAItBC,YAAAA,eAAe,EAAElB,OAAO,CAACkB,eAAR,IACd4C,OAAO,CAACb,eAAR,CAAwBhC,aAAxB,KAA0CjB,OAAO,CAACiB,aAAlD,GACC6C,OAAO,CAACb,eAAR,CAAwB/B,eAAxB,GAA0C,CAD3C,GAEC,CAHa,CAJK;AAQtBX,YAAAA,YAAY,EAAEP,OAAO,CAACO,YARA;AAStBC,YAAAA,cAAc,EAAER,OAAO,CAACQ,cATF;AAUtBN,YAAAA;AAVsB,WAAxB;AAaAsE,UAAAA,iBAAiB,CAACzD,IAAlB,CAAuB8D,eAAvB;;AACA,cAAI,OAAOA,eAAe,CAACtE,YAAvB,KAAwC,QAA5C,EAAsD;AACpDkE,YAAAA,gBAAgB,CAAC1D,IAAjB,CAAsB8D,eAAtB;AACD;AACF;AA/C6B;;AAGhC,WAAK,IAAIjG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsE,SAAL,CAAerE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAAA,cAAvCA,CAAuC;AA6C/C;AACF;;;WAED,qBAAY3D,SAAZ,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AACvC,UAAM0E,OAAO,GAAG3E,QAAQ,IAAI,IAA5B;AACA,UAAM4E,KAAK,GAAG3E,MAAM,IAAIX,iBAAiB,CAAC4B,eAA1C;AAEA,UAAIe,QAAJ;;AACA,cAAQ2C,KAAR;AACA,aAAKtF,iBAAiB,CAAC4B,eAAvB;AACEe,UAAAA,QAAQ,GAAG,KAAK2H,kBAAhB;AACA;;AACF,aAAKtK,iBAAiB,CAAC6B,cAAvB;AACEc,UAAAA,QAAQ,GAAG,KAAK4H,iBAAhB;AACA;;AACF;AACE,gBAAM,IAAI/J,KAAJ,CAAU,6BAAV,CAAN;AARF;;AAWA,UAAMiC,UAAU,GAAG,KAAKA,UAAxB;AACAE,MAAAA,QAAQ,CAACG,GAAT,CAAa,UAAS0C,OAAT,EAAkB;AAC7B,YAAIxC,MAAM,GAAG,IAAb;;AACA,YAAIwC,OAAO,CAACxC,MAAR,KAAmB,IAAvB,EAA6B;AAC3BA,UAAAA,MAAM,GAAG,KAAKK,QAAL,CAAcoC,EAAd,CAAiBD,OAAO,CAACxC,MAAzB,CAAT;AACAA,UAAAA,MAAM,GAAGzD,IAAI,CAACkE,gBAAL,CAAsBhB,UAAtB,EAAkCO,MAAlC,EAA0C,KAAKW,aAA/C,CAAT;AACD;;AACD,eAAO;AACLX,UAAAA,MADK;AAELyD,UAAAA,aAAa,EAAEjB,OAAO,CAACiB,aAFlB;AAGLC,UAAAA,eAAe,EAAElB,OAAO,CAACkB,eAHpB;AAILX,UAAAA,YAAY,EAAEP,OAAO,CAACO,YAJjB;AAKLC,UAAAA,cAAc,EAAER,OAAO,CAACQ,cALnB;AAMLN,UAAAA,IAAI,EAAEF,OAAO,CAACE,IAAR,KAAiB,IAAjB,GAAwB,IAAxB,GAA+B,KAAKvC,MAAL,CAAYsC,EAAZ,CAAeD,OAAO,CAACE,IAAvB;AANhC,SAAP;AAQD,OAdD,EAcG,IAdH,EAcS8E,OAdT,CAciB/J,SAdjB,EAc4B4E,OAd5B;AAeD;AAED;AACF;AACA;AACA;;;;WACE,sBAAagE,OAAb,EAAsBoB,SAAtB,EAAiCC,SAAjC,EACYC,WADZ,EACyBC,WADzB,EACsCC,KADtC,EAC6C;AAC3C;AACA;AACA;AACA;AAEA,UAAIxB,OAAO,CAACqB,SAAD,CAAP,IAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAII,SAAJ,CAAc,kDACEzB,OAAO,CAACqB,SAAD,CADvB,CAAN;AAED;;AACD,UAAIrB,OAAO,CAACsB,WAAD,CAAP,GAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAIG,SAAJ,CAAc,oDACEzB,OAAO,CAACsB,WAAD,CADvB,CAAN;AAED;;AAED,aAAOlL,YAAY,CAAC2J,MAAb,CAAoBC,OAApB,EAA6BoB,SAA7B,EAAwCG,WAAxC,EAAqDC,KAArD,CAAP;AACD;;;WAED,kCAAyBjK,KAAzB,EAAgC;AAC9B,UAAM4F,IAAI,GAAGjH,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,MAAnB,CAAb,CAD8B,CAG9B;AACA;AACA;AACA;;AACA,UAAMkG,MAAM,GAAG;AACb9D,QAAAA,MAAM,EAAEzD,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB,CADK;AAEbmF,QAAAA,YAAY,EAAES,IAFD;AAGbR,QAAAA,cAAc,EAAEzG,IAAI,CAAC+C,MAAL,CAAY1B,KAAZ,EAAmB,QAAnB,EAA6B,CAA7B;AAHH,OAAf;AAMAkG,MAAAA,MAAM,CAAC9D,MAAP,GAAgB,KAAKkD,gBAAL,CAAsBY,MAAM,CAAC9D,MAA7B,CAAhB;;AACA,UAAI8D,MAAM,CAAC9D,MAAP,GAAgB,CAApB,EAAuB;AACrB,eAAO,EAAP;AACD;;AAED,UAAI8D,MAAM,CAACf,YAAP,GAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAIvF,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,UAAIsG,MAAM,CAACd,cAAP,GAAwB,CAA5B,EAA+B;AAC7B,cAAM,IAAIxF,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAED,UAAMmC,QAAQ,GAAG,EAAjB;;AAEA,UAAIyE,KAAK,GAAG,KAAK2D,YAAL,CAAkBjE,MAAlB,EACkB,KAAKyD,iBADvB,EAEkB,cAFlB,EAGkB,gBAHlB,EAIkBhL,IAAI,CAAC0J,0BAJvB,EAKkBxJ,YAAY,CAACsC,iBAL/B,CAAZ;;AAMA,UAAIqF,KAAK,IAAI,CAAb,EAAgB;AACd,YAAI5B,OAAO,GAAG,KAAK+E,iBAAL,CAAuBnD,KAAvB,CAAd;;AAEA,YAAIxG,KAAK,CAACqF,MAAN,KAAiB+E,SAArB,EAAgC;AAC9B,cAAMjF,YAAY,GAAGP,OAAO,CAACO,YAA7B,CAD8B,CAG9B;AACA;AACA;AACA;;AACA,iBAAOP,OAAO,IAAIA,OAAO,CAACO,YAAR,KAAyBA,YAA3C,EAAyD;AACvD,gBAAIK,UAAU,GAAGZ,OAAO,CAACa,mBAAzB;;AACA,gBAAI,KAAKzC,oBAAL,IAA6BwC,UAAU,KAAK,IAAhD,EAAsD;AACpDA,cAAAA,UAAU,GAAGE,QAAb;AACD;;AACD3D,YAAAA,QAAQ,CAAC4D,IAAT,CAAc;AACZC,cAAAA,IAAI,EAAEjH,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;AAEZS,cAAAA,MAAM,EAAE1G,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;AAGZY,cAAAA;AAHY,aAAd;AAMAZ,YAAAA,OAAO,GAAG,KAAK+E,iBAAL,CAAuB,EAAEnD,KAAzB,CAAV;AACD;AACF,SApBD,MAoBO;AACL,cAAMpB,cAAc,GAAGR,OAAO,CAACQ,cAA/B,CADK,CAGL;AACA;AACA;AACA;;AACA,iBAAOR,OAAO,IACPA,OAAO,CAACO,YAAR,KAAyBS,IADzB,IAEAhB,OAAO,CAACQ,cAAR,IAA0BA,cAFjC,EAEiD;AAC/C,gBAAII,WAAU,GAAGZ,OAAO,CAACa,mBAAzB;;AACA,gBAAI,KAAKzC,oBAAL,IAA6BwC,WAAU,KAAK,IAAhD,EAAsD;AACpDA,cAAAA,WAAU,GAAGE,QAAb;AACD;;AACD3D,YAAAA,QAAQ,CAAC4D,IAAT,CAAc;AACZC,cAAAA,IAAI,EAAEjH,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,eAArB,EAAsC,IAAtC,CADM;AAEZS,cAAAA,MAAM,EAAE1G,IAAI,CAAC+C,MAAL,CAAYkD,OAAZ,EAAqB,iBAArB,EAAwC,IAAxC,CAFI;AAGZY,cAAAA,UAAU,EAAVA;AAHY,aAAd;AAMAZ,YAAAA,OAAO,GAAG,KAAK+E,iBAAL,CAAuB,EAAEnD,KAAzB,CAAV;AACD;AACF;AACF;;AAED,aAAOzE,QAAP;AACD;;;WAED,mBAAU;AACR,WAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsE,SAAL,CAAerE,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,aAAKsE,SAAL,CAAetE,CAAf,EAAkBjD,QAAlB,CAA2BK,OAA3B;AACD;AACF;;;;EAreoCxB,iB;;AAuevCgC,OAAO,CAAC6F,wBAAR,GAAmCA,wBAAnC;AAEA;AACA;AACA;AACA;;AACA,SAASxH,QAAT,CAAkBJ,UAAlB,EAA8BC,aAA9B,EAA6C;AAC3C,MAAIiC,SAAS,GAAGlC,UAAhB;;AACA,MAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClCkC,IAAAA,SAAS,GAAG5C,IAAI,CAAC6C,mBAAL,CAAyBnC,UAAzB,CAAZ;AACD;;AAED,MAAMkB,QAAQ,GAAGgB,SAAS,CAAC2F,QAAV,IAAsB,IAAtB,GACX,IAAID,wBAAJ,CAA6B1F,SAA7B,EAAwCjC,aAAxC,CADW,GAEX,IAAI+B,sBAAJ,CAA2BE,SAA3B,EAAsCjC,aAAtC,CAFN;AAGA,SAAOC,OAAO,CAACC,OAAR,CAAgBe,QAAhB,CAAP;AACD;;AAED,SAASJ,WAAT,CAAqBd,UAArB,EAAiCC,aAAjC,EAAgD;AAC9C,SAAO+B,sBAAsB,CAACgJ,aAAvB,CAAqChL,UAArC,EAAiDC,aAAjD,CAAP;AACD","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\nconst binarySearch = require(\"./binary-search\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\nconst readWasm = require(\"../lib/read-wasm\");\nconst wasm = require(\"./wasm\");\n\nconst INTERNAL = Symbol(\"smcInternal\");\n\nclass SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n\n  static initialize(opts) {\n    readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n  }\n\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return _factoryBSM(aSourceMap, aSourceMapURL);\n  }\n\n  /**\n   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n   * value.\n   *\n   * You must not use the consumer after `f` completes!\n   *\n   * By using `with`, you do not have to remember to manually call `destroy` on\n   * the consumer, since it will be called automatically once `f` completes.\n   *\n   * ```js\n   * const xSquared = await SourceMapConsumer.with(\n   *   myRawSourceMap,\n   *   null,\n   *   async function (consumer) {\n   *     // Use `consumer` inside here and don't worry about remembering\n   *     // to call `destroy`.\n   *\n   *     const x = await whatever(consumer);\n   *     return x * x;\n   *   }\n   * );\n   *\n   * // You may not use that `consumer` anymore out here; it has\n   * // been destroyed. But you can use `xSquared`.\n   * console.log(xSquared);\n   * ```\n   */\n  static with(rawSourceMap, sourceMapUrl, f) {\n    // Note: The `acorn` version that `webpack` currently depends on doesn't\n    // support `async` functions, and the nodes that we support don't all have\n    // `.finally`. Therefore, this is written a bit more convolutedly than it\n    // should really be.\n\n    let consumer = null;\n    const promise = new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n    return promise\n      .then(c => {\n        consumer = c;\n        return f(c);\n      })\n      .then(x => {\n        if (consumer) {\n          consumer.destroy();\n        }\n        return x;\n      }, e => {\n        if (consumer) {\n          consumer.destroy();\n        }\n        throw e;\n      });\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  }\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  eachMapping(aCallback, aContext, aOrder) {\n    throw new Error(\"Subclasses must implement eachMapping\");\n  }\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number is 1-based.\n   *   - column: Optional. the column number in the original source.\n   *    The column number is 0-based.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *    line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *    The column number is 0-based.\n   */\n  allGeneratedPositionsFor(aArgs) {\n    throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n  }\n\n  destroy() {\n    throw new Error(\"Subclasses must implement destroy\");\n  }\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nclass BasicSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      let sources = util.getArg(sourceMap, \"sources\");\n      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n      const names = util.getArg(sourceMap, \"names\", []);\n      let sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      const sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      const mappings = util.getArg(sourceMap, \"mappings\");\n      const file = util.getArg(sourceMap, \"file\", null);\n\n      // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n\n      sources = sources\n        .map(String)\n        // Some source maps produce relative source paths like \"./foo.js\" instead of\n        // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n        // See bugzil.la/1090768.\n        .map(util.normalize)\n        // Always ensure that absolute sources are internally stored relative to\n        // the source root, if the source root is absolute. Not doing this would\n        // be particularly problematic when the source root is a prefix of the\n        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n        .map(function(source) {\n          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n            ? util.relative(sourceRoot, source)\n            : source;\n        });\n\n      // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n\n      that._absoluteSources = that._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n\n      return wasm().then(w => {\n        that._wasm = w;\n        return that;\n      });\n    });\n  }\n\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n  _findSourceIndex(aSource) {\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    if (this._sources.has(relativeSource)) {\n      return this._sources.indexOf(relativeSource);\n    }\n\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    for (let i = 0; i < this._absoluteSources.length; ++i) {\n      if (this._absoluteSources[i] == aSource) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @param String aSourceMapURL\n   *        The URL at which the source map can be found (optional)\n   * @returns BasicSourceMapConsumer\n   */\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return new BasicSourceMapConsumer(aSourceMap.toString());\n  }\n\n  get sources() {\n    return this._absoluteSources.slice();\n  }\n\n  _getMappingsPtr() {\n    if (this._mappingsPtr === 0) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this._mappingsPtr;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const size = aStr.length;\n\n    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n    for (let i = 0; i < size; i++) {\n      mappingsBuf[i] = aStr.charCodeAt(i);\n    }\n\n    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n\n    if (!mappingsPtr) {\n      const error = this._wasm.exports.get_last_error();\n      let msg = `Error parsing mappings (code ${error}): `;\n\n      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n      switch (error) {\n        case 1:\n          msg += \"the mappings contained a negative line, column, source index, or name index\";\n          break;\n        case 2:\n          msg += \"the mappings contained a number larger than 2**32\";\n          break;\n        case 3:\n          msg += \"reached EOF while in the middle of parsing a VLQ\";\n          break;\n        case 4:\n          msg += \"invalid base 64 character while parsing a VLQ\";\n          break;\n        default:\n          msg += \"unknown error code\";\n          break;\n      }\n\n      throw new Error(msg);\n    }\n\n    this._mappingsPtr = mappingsPtr;\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    const sourceRoot = this.sourceRoot;\n\n    this._wasm.withMappingCallback(\n      mapping => {\n        if (mapping.source !== null) {\n          mapping.source = this._sources.at(mapping.source);\n          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);\n\n          if (mapping.name !== null) {\n            mapping.name = this._names.at(mapping.name);\n          }\n        }\n\n        aCallback.call(context, mapping);\n      },\n      () => {\n        switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          this._wasm.exports.by_generated_location(this._getMappingsPtr());\n          break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          this._wasm.exports.by_original_location(this._getMappingsPtr());\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n        }\n      }\n    );\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    const originalLine = util.getArg(aArgs, \"line\");\n    const originalColumn = aArgs.column || 0;\n\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return [];\n    }\n\n    if (originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    this._wasm.withMappingCallback(\n      m => {\n        let lastColumn = m.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        mappings.push({\n          line: m.generatedLine,\n          column: m.generatedColumn,\n          lastColumn,\n        });\n      }, () => {\n        this._wasm.exports.all_generated_locations_for(\n          this._getMappingsPtr(),\n          source,\n          originalLine - 1,\n          \"column\" in aArgs,\n          originalColumn\n        );\n      }\n    );\n\n    return mappings;\n  }\n\n  destroy() {\n    if (this._mappingsPtr !== 0) {\n      this._wasm.exports.free_mappings(this._mappingsPtr);\n      this._mappingsPtr = 0;\n    }\n  }\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  computeColumnSpans() {\n    if (this._computedColumnSpans) {\n      return;\n    }\n\n    this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n    this._computedColumnSpans = true;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.generatedLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.generatedColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.original_location_for(\n        this._getMappingsPtr(),\n        needle.generatedLine - 1,\n        needle.generatedColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.generatedLine === needle.generatedLine) {\n        let source = util.getArg(mapping, \"source\", null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n\n        let name = util.getArg(mapping, \"name\", null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n\n        return {\n          source,\n          line: util.getArg(mapping, \"originalLine\", null),\n          column: util.getArg(mapping, \"originalColumn\", null),\n          name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function(sc) { return sc == null; });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    const index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    let url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      const fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    const needle = {\n      source,\n      originalLine: util.getArg(aArgs, \"line\"),\n      originalColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.generated_location_for(\n        this._getMappingsPtr(),\n        needle.source,\n        needle.originalLine - 1,\n        needle.originalColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.source === needle.source) {\n        let lastColumn = mapping.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        return {\n          line: util.getArg(mapping, \"generatedLine\", null),\n          column: util.getArg(mapping, \"generatedColumn\", null),\n          lastColumn,\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n}\n\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nclass IndexedSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      const sections = util.getArg(sourceMap, \"sections\");\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n\n      let lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(s => {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        const offset = util.getArg(s, \"offset\");\n        const offsetLine = util.getArg(offset, \"line\");\n        const offsetColumn = util.getArg(offset, \"column\");\n\n        if (offsetLine < lastOffset.line ||\n            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n\n        const cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(consumer => {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(s => {\n        that._sections = s;\n        return that;\n      });\n    });\n  }\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n  get _generatedMappings() {\n    if (!this.__generatedMappings) {\n      this._sortGeneratedMappings();\n    }\n\n    return this.__generatedMappings;\n  }\n\n  get _originalMappings() {\n    if (!this.__originalMappings) {\n      this._sortOriginalMappings();\n    }\n\n    return this.__originalMappings;\n  }\n\n  get _generatedMappingsUnsorted() {\n    if (!this.__generatedMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappingsUnsorted;\n  }\n\n  get _originalMappingsUnsorted() {\n    if (!this.__originalMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappingsUnsorted;\n  }\n\n  _sortGeneratedMappings() {\n    const mappings = this._generatedMappingsUnsorted;\n    mappings.sort(util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = mappings;\n  }\n\n  _sortOriginalMappings() {\n    const mappings = this._originalMappingsUnsorted;\n    mappings.sort(util.compareByOriginalPositions);\n    this.__originalMappings = mappings;\n  }\n\n  /**\n   * The list of original sources.\n   */\n  get sources() {\n    const sources = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    const sectionIndex = binarySearch.search(needle, this._sections,\n      function(aNeedle, section) {\n        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (aNeedle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    const section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    return this._sections.every(function(s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n        continue;\n      }\n      const generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        const ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const generatedMappings = this.__generatedMappingsUnsorted = [];\n    const originalMappings = this.__originalMappingsUnsorted = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const sectionMappings = [];\n      section.consumer.eachMapping(m => sectionMappings.push(m));\n\n      for (let j = 0; j < sectionMappings.length; j++) {\n        const mapping = sectionMappings[j];\n\n        // TODO: test if null is correct here.  The original code used\n        // `source`, which would actually have gotten used as null because\n        // var's get hoisted.\n        // See: https://github.com/mozilla/source-map/issues/333\n        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        let name = null;\n        if (mapping.name) {\n          this._names.add(mapping.name);\n          name = this._names.indexOf(mapping.name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        const adjustedMapping = {\n          source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name\n        };\n\n        generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === \"number\") {\n          originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    let mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    const sourceRoot = this.sourceRoot;\n    mappings.map(function(mapping) {\n      let source = null;\n      if (mapping.source !== null) {\n        source = this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      }\n      return {\n        source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  }\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  _findMapping(aNeedle, aMappings, aLineName,\n              aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError(\"Line must be greater than or equal to 1, got \"\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError(\"Column must be greater than or equal to 0, got \"\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    const line = util.getArg(aArgs, \"line\");\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    const needle = {\n      source: util.getArg(aArgs, \"source\"),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    let index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      let mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        const originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        const originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  }\n\n  destroy() {\n    for (let i = 0; i < this._sections.length; i++) {\n      this._sections[i].consumer.destroy();\n    }\n  }\n}\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\nfunction _factory(aSourceMap, aSourceMapURL) {\n  let sourceMap = aSourceMap;\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  const consumer = sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\n\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n"]},"metadata":{},"sourceType":"script"}