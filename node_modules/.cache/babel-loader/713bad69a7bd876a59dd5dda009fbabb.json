{"ast":null,"code":"/*!\n * Stylus - Unit\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Node = require('./node'),\n    nodes = require('./');\n/**\n * Unit conversion table.\n */\n\n\nvar FACTOR_TABLE = {\n  'mm': {\n    val: 1,\n    label: 'mm'\n  },\n  'cm': {\n    val: 10,\n    label: 'mm'\n  },\n  'in': {\n    val: 25.4,\n    label: 'mm'\n  },\n  'pt': {\n    val: 25.4 / 72,\n    label: 'mm'\n  },\n  'ms': {\n    val: 1,\n    label: 'ms'\n  },\n  's': {\n    val: 1000,\n    label: 'ms'\n  },\n  'Hz': {\n    val: 1,\n    label: 'Hz'\n  },\n  'kHz': {\n    val: 1000,\n    label: 'Hz'\n  }\n};\n/**\n * Initialize a new `Unit` with the given `val` and unit `type`\n * such as \"px\", \"pt\", \"in\", etc.\n *\n * @param {String} val\n * @param {String} type\n * @api public\n */\n\nvar Unit = module.exports = function Unit(val, type) {\n  Node.call(this);\n  this.val = val;\n  this.type = type;\n};\n/**\n * Inherit from `Node.prototype`.\n */\n\n\nUnit.prototype.__proto__ = Node.prototype;\n/**\n * Return Boolean based on the unit value.\n *\n * @return {Boolean}\n * @api public\n */\n\nUnit.prototype.toBoolean = function () {\n  return nodes.Boolean(this.type ? true : this.val);\n};\n/**\n * Return unit string.\n *\n * @return {String}\n * @api public\n */\n\n\nUnit.prototype.toString = function () {\n  return this.val + (this.type || '');\n};\n/**\n * Return a clone of this node.\n *\n * @return {Node}\n * @api public\n */\n\n\nUnit.prototype.clone = function () {\n  var clone = new Unit(this.val, this.type);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\n\nUnit.prototype.toJSON = function () {\n  return {\n    __type: 'Unit',\n    val: this.val,\n    type: this.type,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};\n/**\n * Operate on `right` with the given `op`.\n *\n * @param {String} op\n * @param {Node} right\n * @return {Node}\n * @api public\n */\n\n\nUnit.prototype.operate = function (op, right) {\n  var type = this.type || right.first.type; // swap color\n\n  if ('rgba' == right.nodeName || 'hsla' == right.nodeName) {\n    return right.operate(op, this);\n  } // operate\n\n\n  if (this.shouldCoerce(op)) {\n    right = right.first; // percentages\n\n    if ('%' != this.type && ('-' == op || '+' == op) && '%' == right.type) {\n      right = new Unit(this.val * (right.val / 100), '%');\n    } else {\n      right = this.coerce(right);\n    }\n\n    switch (op) {\n      case '-':\n        return new Unit(this.val - right.val, type);\n\n      case '+':\n        // keyframes interpolation\n        type = type || right.type == '%' && right.type;\n        return new Unit(this.val + right.val, type);\n\n      case '/':\n        return new Unit(this.val / right.val, type);\n\n      case '*':\n        return new Unit(this.val * right.val, type);\n\n      case '%':\n        return new Unit(this.val % right.val, type);\n\n      case '**':\n        return new Unit(Math.pow(this.val, right.val), type);\n\n      case '..':\n      case '...':\n        var start = this.val,\n            end = right.val,\n            expr = new nodes.Expression(),\n            inclusive = '..' == op;\n\n        if (start < end) {\n          do {\n            expr.push(new nodes.Unit(start));\n          } while (inclusive ? ++start <= end : ++start < end);\n        } else {\n          do {\n            expr.push(new nodes.Unit(start));\n          } while (inclusive ? --start >= end : --start > end);\n        }\n\n        return expr;\n    }\n  }\n\n  return Node.prototype.operate.call(this, op, right);\n};\n/**\n * Coerce `other` unit to the same type as `this` unit.\n *\n * Supports:\n *\n *    mm -> cm | in\n *    cm -> mm | in\n *    in -> mm | cm\n *\n *    ms -> s\n *    s  -> ms\n *\n *    Hz  -> kHz\n *    kHz -> Hz\n *\n * @param {Unit} other\n * @return {Unit}\n * @api public\n */\n\n\nUnit.prototype.coerce = function (other) {\n  if ('unit' == other.nodeName) {\n    var a = this,\n        b = other,\n        factorA = FACTOR_TABLE[a.type],\n        factorB = FACTOR_TABLE[b.type];\n\n    if (factorA && factorB && factorA.label == factorB.label) {\n      var bVal = b.val * (factorB.val / factorA.val);\n      return new nodes.Unit(bVal, a.type);\n    } else {\n      return new nodes.Unit(b.val, a.type);\n    }\n  } else if ('string' == other.nodeName) {\n    // keyframes interpolation\n    if ('%' == other.val) return new nodes.Unit(0, '%');\n    var val = parseFloat(other.val);\n    if (isNaN(val)) Node.prototype.coerce.call(this, other);\n    return new nodes.Unit(val);\n  } else {\n    return Node.prototype.coerce.call(this, other);\n  }\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/nodes/unit.js"],"names":["Node","require","nodes","FACTOR_TABLE","val","label","Unit","module","exports","type","call","prototype","__proto__","toBoolean","Boolean","toString","clone","lineno","column","filename","toJSON","__type","operate","op","right","first","nodeName","shouldCoerce","coerce","Math","pow","start","end","expr","Expression","inclusive","push","other","a","b","factorA","factorB","bVal","parseFloat","isNaN"],"mappings":"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","sourcesContent":["\n/*!\n * Stylus - Unit\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node')\n  , nodes = require('./');\n\n/**\n * Unit conversion table.\n */\n\nvar FACTOR_TABLE = {\n  'mm': {val: 1, label: 'mm'},\n  'cm': {val: 10, label: 'mm'},\n  'in': {val: 25.4, label: 'mm'},\n  'pt': {val: 25.4/72, label: 'mm'},\n  'ms': {val: 1, label: 'ms'},\n  's': {val: 1000, label: 'ms'},\n  'Hz': {val: 1, label: 'Hz'},\n  'kHz': {val: 1000, label: 'Hz'}\n};\n\n/**\n * Initialize a new `Unit` with the given `val` and unit `type`\n * such as \"px\", \"pt\", \"in\", etc.\n *\n * @param {String} val\n * @param {String} type\n * @api public\n */\n\nvar Unit = module.exports = function Unit(val, type){\n  Node.call(this);\n  this.val = val;\n  this.type = type;\n};\n\n/**\n * Inherit from `Node.prototype`.\n */\n\nUnit.prototype.__proto__ = Node.prototype;\n\n/**\n * Return Boolean based on the unit value.\n *\n * @return {Boolean}\n * @api public\n */\n\nUnit.prototype.toBoolean = function(){\n  return nodes.Boolean(this.type\n      ? true\n      : this.val);\n};\n\n/**\n * Return unit string.\n *\n * @return {String}\n * @api public\n */\n\nUnit.prototype.toString = function(){\n  return this.val + (this.type || '');\n};\n\n/**\n * Return a clone of this node.\n *\n * @return {Node}\n * @api public\n */\n\nUnit.prototype.clone = function(){\n  var clone = new Unit(this.val, this.type);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\nUnit.prototype.toJSON = function(){\n  return {\n    __type: 'Unit',\n    val: this.val,\n    type: this.type,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};\n\n/**\n * Operate on `right` with the given `op`.\n *\n * @param {String} op\n * @param {Node} right\n * @return {Node}\n * @api public\n */\n\nUnit.prototype.operate = function(op, right){\n  var type = this.type || right.first.type;\n\n  // swap color\n  if ('rgba' == right.nodeName || 'hsla' == right.nodeName) {\n    return right.operate(op, this);\n  }\n\n  // operate\n  if (this.shouldCoerce(op)) {\n    right = right.first;\n    // percentages\n    if ('%' != this.type && ('-' == op || '+' == op) && '%' == right.type) {\n      right = new Unit(this.val * (right.val / 100), '%');\n    } else {\n      right = this.coerce(right);\n    }\n\n    switch (op) {\n      case '-':\n        return new Unit(this.val - right.val, type);\n      case '+':\n        // keyframes interpolation\n        type = type || (right.type == '%' && right.type);\n        return new Unit(this.val + right.val, type);\n      case '/':\n        return new Unit(this.val / right.val, type);\n      case '*':\n        return new Unit(this.val * right.val, type);\n      case '%':\n        return new Unit(this.val % right.val, type);\n      case '**':\n        return new Unit(Math.pow(this.val, right.val), type);\n      case '..':\n      case '...':\n        var start = this.val\n          , end = right.val\n          , expr = new nodes.Expression\n          , inclusive = '..' == op;\n        if (start < end) {\n          do {\n            expr.push(new nodes.Unit(start));\n          } while (inclusive ? ++start <= end : ++start < end);\n        } else {\n          do {\n            expr.push(new nodes.Unit(start));\n          } while (inclusive ? --start >= end : --start > end);\n        }\n        return expr;\n    }\n  }\n\n  return Node.prototype.operate.call(this, op, right);\n};\n\n/**\n * Coerce `other` unit to the same type as `this` unit.\n *\n * Supports:\n *\n *    mm -> cm | in\n *    cm -> mm | in\n *    in -> mm | cm\n *\n *    ms -> s\n *    s  -> ms\n *\n *    Hz  -> kHz\n *    kHz -> Hz\n *\n * @param {Unit} other\n * @return {Unit}\n * @api public\n */\n\nUnit.prototype.coerce = function(other){\n  if ('unit' == other.nodeName) {\n    var a = this\n      , b = other\n      , factorA = FACTOR_TABLE[a.type]\n      , factorB = FACTOR_TABLE[b.type];\n\n    if (factorA && factorB && (factorA.label == factorB.label)) {\n      var bVal = b.val * (factorB.val / factorA.val);\n      return new nodes.Unit(bVal, a.type);\n    } else {\n      return new nodes.Unit(b.val, a.type);\n    }\n  } else if ('string' == other.nodeName) {\n    // keyframes interpolation\n    if ('%' == other.val) return new nodes.Unit(0, '%');\n    var val = parseFloat(other.val);\n    if (isNaN(val)) Node.prototype.coerce.call(this, other);\n    return new nodes.Unit(val);\n  } else {\n    return Node.prototype.coerce.call(this, other);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}