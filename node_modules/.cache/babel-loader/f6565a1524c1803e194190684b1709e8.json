{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes'),\n    Image = require('./image');\n/**\n * Return the width and height of the given `img` path.\n *\n * Examples:\n *\n *    image-size('foo.png')\n *    // => 200px 100px\n *\n *    image-size('foo.png')[0]\n *    // => 200px\n *\n *    image-size('foo.png')[1]\n *    // => 100px\n *\n * Can be used to test if the image exists,\n * using an optional argument set to `true`\n * (without this argument this function throws error\n * if there is no such image).\n *\n * Example:\n *\n *    image-size('nosuchimage.png', true)[0]\n *    // => 0\n *\n * @param {String} img\n * @param {Boolean} ignoreErr\n * @return {Expression}\n * @api public\n */\n\n\nfunction imageSize(img, ignoreErr) {\n  utils.assertType(img, 'string', 'img');\n\n  try {\n    var img = new Image(this, img.string);\n  } catch (err) {\n    if (ignoreErr) {\n      return [new nodes.Unit(0), new nodes.Unit(0)];\n    } else {\n      throw err;\n    }\n  } // Read size\n\n\n  img.open();\n  var size = img.size();\n  img.close(); // Return (w h)\n\n  var expr = [];\n  expr.push(new nodes.Unit(size[0], 'px'));\n  expr.push(new nodes.Unit(size[1], 'px'));\n  return expr;\n}\n\n;\nimageSize.params = ['img', 'ignoreErr'];\nmodule.exports = imageSize;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/image-size.js"],"names":["utils","require","nodes","Image","imageSize","img","ignoreErr","assertType","string","err","Unit","open","size","close","expr","push","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAFnB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,SAAT,CAAmBC,GAAnB,EAAwBC,SAAxB,EAAmC;AACjCN,EAAAA,KAAK,CAACO,UAAN,CAAiBF,GAAjB,EAAsB,QAAtB,EAAgC,KAAhC;;AACA,MAAI;AACF,QAAIA,GAAG,GAAG,IAAIF,KAAJ,CAAU,IAAV,EAAgBE,GAAG,CAACG,MAApB,CAAV;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,QAAIH,SAAJ,EAAe;AACb,aAAO,CAAC,IAAIJ,KAAK,CAACQ,IAAV,CAAe,CAAf,CAAD,EAAoB,IAAIR,KAAK,CAACQ,IAAV,CAAe,CAAf,CAApB,CAAP;AACD,KAFD,MAEO;AACL,YAAMD,GAAN;AACD;AACF,GAVgC,CAYjC;;;AACAJ,EAAAA,GAAG,CAACM,IAAJ;AACA,MAAIC,IAAI,GAAGP,GAAG,CAACO,IAAJ,EAAX;AACAP,EAAAA,GAAG,CAACQ,KAAJ,GAfiC,CAiBjC;;AACA,MAAIC,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,CAACC,IAAL,CAAU,IAAIb,KAAK,CAACQ,IAAV,CAAeE,IAAI,CAAC,CAAD,CAAnB,EAAwB,IAAxB,CAAV;AACAE,EAAAA,IAAI,CAACC,IAAL,CAAU,IAAIb,KAAK,CAACQ,IAAV,CAAeE,IAAI,CAAC,CAAD,CAAnB,EAAwB,IAAxB,CAAV;AAEA,SAAOE,IAAP;AACD;;AAAA;AACDV,SAAS,CAACY,MAAV,GAAmB,CAAC,KAAD,EAAQ,WAAR,CAAnB;AACAC,MAAM,CAACC,OAAP,GAAiBd,SAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n  , Image = require('./image');\n\n/**\n * Return the width and height of the given `img` path.\n *\n * Examples:\n *\n *    image-size('foo.png')\n *    // => 200px 100px\n *\n *    image-size('foo.png')[0]\n *    // => 200px\n *\n *    image-size('foo.png')[1]\n *    // => 100px\n *\n * Can be used to test if the image exists,\n * using an optional argument set to `true`\n * (without this argument this function throws error\n * if there is no such image).\n *\n * Example:\n *\n *    image-size('nosuchimage.png', true)[0]\n *    // => 0\n *\n * @param {String} img\n * @param {Boolean} ignoreErr\n * @return {Expression}\n * @api public\n */\n\nfunction imageSize(img, ignoreErr) {\n  utils.assertType(img, 'string', 'img');\n  try {\n    var img = new Image(this, img.string);\n  } catch (err) {\n    if (ignoreErr) {\n      return [new nodes.Unit(0), new nodes.Unit(0)];\n    } else {\n      throw err;\n    }\n  }\n\n  // Read size\n  img.open();\n  var size = img.size();\n  img.close();\n\n  // Return (w h)\n  var expr = [];\n  expr.push(new nodes.Unit(size[0], 'px'));\n  expr.push(new nodes.Unit(size[1], 'px'));\n\n  return expr;\n};\nimageSize.params = ['img', 'ignoreErr'];\nmodule.exports = imageSize;\n"]},"metadata":{},"sourceType":"script"}