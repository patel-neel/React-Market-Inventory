{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Set a variable `name` on current scope.\n *\n * @param {String} name\n * @param {Expression} expr\n * @param {Boolean} [global]\n * @api public\n */\n\n\nfunction define(name, expr, global) {\n  utils.assertType(name, 'string', 'name');\n  expr = utils.unwrap(expr);\n  var scope = this.currentScope;\n\n  if (global && global.toBoolean().isTrue) {\n    scope = this.global.scope;\n  }\n\n  var node = new nodes.Ident(name.val, expr);\n  scope.add(node);\n  return nodes.null;\n}\n\n;\ndefine.params = ['name', 'expr', 'global'];\nmodule.exports = define;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/define.js"],"names":["utils","require","nodes","define","name","expr","global","assertType","unwrap","scope","currentScope","toBoolean","isTrue","node","Ident","val","add","null","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,MAA5B,EAAmC;AACjCN,EAAAA,KAAK,CAACO,UAAN,CAAiBH,IAAjB,EAAuB,QAAvB,EAAiC,MAAjC;AACAC,EAAAA,IAAI,GAAGL,KAAK,CAACQ,MAAN,CAAaH,IAAb,CAAP;AACA,MAAII,KAAK,GAAG,KAAKC,YAAjB;;AACA,MAAIJ,MAAM,IAAIA,MAAM,CAACK,SAAP,GAAmBC,MAAjC,EAAyC;AACvCH,IAAAA,KAAK,GAAG,KAAKH,MAAL,CAAYG,KAApB;AACD;;AACD,MAAII,IAAI,GAAG,IAAIX,KAAK,CAACY,KAAV,CAAgBV,IAAI,CAACW,GAArB,EAA0BV,IAA1B,CAAX;AACAI,EAAAA,KAAK,CAACO,GAAN,CAAUH,IAAV;AACA,SAAOX,KAAK,CAACe,IAAb;AACD;;AAAA;AACDd,MAAM,CAACe,MAAP,GAAgB,CAAC,MAAD,EAAS,MAAT,EAAiB,QAAjB,CAAhB;AACAC,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Set a variable `name` on current scope.\n *\n * @param {String} name\n * @param {Expression} expr\n * @param {Boolean} [global]\n * @api public\n */\n\nfunction define(name, expr, global){\n  utils.assertType(name, 'string', 'name');\n  expr = utils.unwrap(expr);\n  var scope = this.currentScope;\n  if (global && global.toBoolean().isTrue) {\n    scope = this.global.scope;\n  }\n  var node = new nodes.Ident(name.val, expr);\n  scope.add(node);\n  return nodes.null;\n};\ndefine.params = ['name', 'expr', 'global'];\nmodule.exports = define;\n"]},"metadata":{},"sourceType":"script"}