{"ast":null,"code":"/*!\n * Stylus - BinOp\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Node = require('./node');\n/**\n * Initialize a new `BinOp` with `op`, `left` and `right`.\n *\n * @param {String} op\n * @param {Node} left\n * @param {Node} right\n * @api public\n */\n\n\nvar BinOp = module.exports = function BinOp(op, left, right) {\n  Node.call(this);\n  this.op = op;\n  this.left = left;\n  this.right = right;\n};\n/**\n * Inherit from `Node.prototype`.\n */\n\n\nBinOp.prototype.__proto__ = Node.prototype;\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\nBinOp.prototype.clone = function (parent) {\n  var clone = new BinOp(this.op);\n  clone.left = this.left.clone(parent, clone);\n  clone.right = this.right && this.right.clone(parent, clone);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  if (this.val) clone.val = this.val.clone(parent, clone);\n  return clone;\n};\n/**\n * Return <left> <op> <right>\n *\n * @return {String}\n * @api public\n */\n\n\nBinOp.prototype.toString = function () {\n  return this.left.toString() + ' ' + this.op + ' ' + this.right.toString();\n};\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\n\nBinOp.prototype.toJSON = function () {\n  var json = {\n    __type: 'BinOp',\n    left: this.left,\n    right: this.right,\n    op: this.op,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n  if (this.val) json.val = this.val;\n  return json;\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/nodes/binop.js"],"names":["Node","require","BinOp","module","exports","op","left","right","call","prototype","__proto__","clone","parent","lineno","column","filename","val","toString","toJSON","json","__type"],"mappings":"AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,KAAK,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,KAAT,CAAeG,EAAf,EAAmBC,IAAnB,EAAyBC,KAAzB,EAA+B;AAC1DP,EAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV;AACA,OAAKH,EAAL,GAAUA,EAAV;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACD,CALD;AAOA;AACA;AACA;;;AAEAL,KAAK,CAACO,SAAN,CAAgBC,SAAhB,GAA4BV,IAAI,CAACS,SAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAP,KAAK,CAACO,SAAN,CAAgBE,KAAhB,GAAwB,UAASC,MAAT,EAAgB;AACtC,MAAID,KAAK,GAAG,IAAIT,KAAJ,CAAU,KAAKG,EAAf,CAAZ;AACAM,EAAAA,KAAK,CAACL,IAAN,GAAa,KAAKA,IAAL,CAAUK,KAAV,CAAgBC,MAAhB,EAAwBD,KAAxB,CAAb;AACAA,EAAAA,KAAK,CAACJ,KAAN,GAAc,KAAKA,KAAL,IAAc,KAAKA,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,EAAyBD,KAAzB,CAA5B;AACAA,EAAAA,KAAK,CAACE,MAAN,GAAe,KAAKA,MAApB;AACAF,EAAAA,KAAK,CAACG,MAAN,GAAe,KAAKA,MAApB;AACAH,EAAAA,KAAK,CAACI,QAAN,GAAiB,KAAKA,QAAtB;AACA,MAAI,KAAKC,GAAT,EAAcL,KAAK,CAACK,GAAN,GAAY,KAAKA,GAAL,CAASL,KAAT,CAAeC,MAAf,EAAuBD,KAAvB,CAAZ;AACd,SAAOA,KAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;;;AACAT,KAAK,CAACO,SAAN,CAAgBQ,QAAhB,GAA2B,YAAW;AACpC,SAAO,KAAKX,IAAL,CAAUW,QAAV,KAAuB,GAAvB,GAA6B,KAAKZ,EAAlC,GAAuC,GAAvC,GAA6C,KAAKE,KAAL,CAAWU,QAAX,EAApD;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEAf,KAAK,CAACO,SAAN,CAAgBS,MAAhB,GAAyB,YAAU;AACjC,MAAIC,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,OADC;AAETd,IAAAA,IAAI,EAAE,KAAKA,IAFF;AAGTC,IAAAA,KAAK,EAAE,KAAKA,KAHH;AAITF,IAAAA,EAAE,EAAE,KAAKA,EAJA;AAKTQ,IAAAA,MAAM,EAAE,KAAKA,MALJ;AAMTC,IAAAA,MAAM,EAAE,KAAKA,MANJ;AAOTC,IAAAA,QAAQ,EAAE,KAAKA;AAPN,GAAX;AASA,MAAI,KAAKC,GAAT,EAAcG,IAAI,CAACH,GAAL,GAAW,KAAKA,GAAhB;AACd,SAAOG,IAAP;AACD,CAZD","sourcesContent":["\n/*!\n * Stylus - BinOp\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `BinOp` with `op`, `left` and `right`.\n *\n * @param {String} op\n * @param {Node} left\n * @param {Node} right\n * @api public\n */\n\nvar BinOp = module.exports = function BinOp(op, left, right){\n  Node.call(this);\n  this.op = op;\n  this.left = left;\n  this.right = right;\n};\n\n/**\n * Inherit from `Node.prototype`.\n */\n\nBinOp.prototype.__proto__ = Node.prototype;\n\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\nBinOp.prototype.clone = function(parent){\n  var clone = new BinOp(this.op);\n  clone.left = this.left.clone(parent, clone);\n  clone.right = this.right && this.right.clone(parent, clone);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  if (this.val) clone.val = this.val.clone(parent, clone);\n  return clone;\n};\n\n/**\n * Return <left> <op> <right>\n *\n * @return {String}\n * @api public\n */\nBinOp.prototype.toString = function() {\n  return this.left.toString() + ' ' + this.op + ' ' + this.right.toString();\n};\n\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\nBinOp.prototype.toJSON = function(){\n  var json = {\n    __type: 'BinOp',\n    left: this.left,\n    right: this.right,\n    op: this.op,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n  if (this.val) json.val = this.val;\n  return json;\n};\n"]},"metadata":{},"sourceType":"script"}