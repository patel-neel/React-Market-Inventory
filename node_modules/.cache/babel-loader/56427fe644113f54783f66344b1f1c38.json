{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n\nvar VALID_FLAGS = 'igm';\n/**\n * retrieves the matches when matching a `val`(string)\n * against a `pattern`(regular expression).\n *\n * Examples:\n *   $regex = '^(height|width)?([<>=]{1,})(.*)'\n *\n *   match($regex,'height>=sm')\n * \t // => ('height>=sm' 'height' '>=' 'sm')\n * \t // => also truthy\n *\n *   match($regex, 'lorem ipsum')\n *   // => null\n *\n * @param {String} pattern\n * @param {String|Ident} val\n * @param {String|Ident} [flags='']\n * @return {String|Null}\n * @api public\n */\n\nfunction match(pattern, val, flags) {\n  utils.assertType(pattern, 'string', 'pattern');\n  utils.assertString(val, 'val');\n  var re = new RegExp(pattern.val, validateFlags(flags) ? flags.string : '');\n  return val.string.match(re);\n}\n\nmatch.params = ['pattern', 'val', 'flags'];\nmodule.exports = match;\n\nfunction validateFlags(flags) {\n  flags = flags && flags.string;\n\n  if (flags) {\n    return flags.split('').every(function (flag) {\n      return ~VALID_FLAGS.indexOf(flag);\n    });\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/match.js"],"names":["utils","require","nodes","VALID_FLAGS","match","pattern","val","flags","assertType","assertString","re","RegExp","validateFlags","string","params","module","exports","split","every","flag","indexOf"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;;AAGA,IAAIE,WAAW,GAAG,KAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAeC,OAAf,EAAwBC,GAAxB,EAA6BC,KAA7B,EAAmC;AACjCP,EAAAA,KAAK,CAACQ,UAAN,CAAiBH,OAAjB,EAA0B,QAA1B,EAAoC,SAApC;AACAL,EAAAA,KAAK,CAACS,YAAN,CAAmBH,GAAnB,EAAwB,KAAxB;AACA,MAAII,EAAE,GAAG,IAAIC,MAAJ,CAAWN,OAAO,CAACC,GAAnB,EAAwBM,aAAa,CAACL,KAAD,CAAb,GAAuBA,KAAK,CAACM,MAA7B,GAAsC,EAA9D,CAAT;AACA,SAAOP,GAAG,CAACO,MAAJ,CAAWT,KAAX,CAAiBM,EAAjB,CAAP;AACD;;AACDN,KAAK,CAACU,MAAN,GAAe,CAAC,SAAD,EAAY,KAAZ,EAAmB,OAAnB,CAAf;AACAC,MAAM,CAACC,OAAP,GAAiBZ,KAAjB;;AAEA,SAASQ,aAAT,CAAuBL,KAAvB,EAA8B;AAC5BA,EAAAA,KAAK,GAAGA,KAAK,IAAIA,KAAK,CAACM,MAAvB;;AAEA,MAAIN,KAAJ,EAAW;AACT,WAAOA,KAAK,CAACU,KAAN,CAAY,EAAZ,EAAgBC,KAAhB,CAAsB,UAASC,IAAT,EAAe;AAC1C,aAAO,CAAChB,WAAW,CAACiB,OAAZ,CAAoBD,IAApB,CAAR;AACD,KAFM,CAAP;AAGD;;AACD,SAAO,KAAP;AACD","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\nvar VALID_FLAGS = 'igm';\n\n/**\n * retrieves the matches when matching a `val`(string)\n * against a `pattern`(regular expression).\n *\n * Examples:\n *   $regex = '^(height|width)?([<>=]{1,})(.*)'\n *\n *   match($regex,'height>=sm')\n * \t // => ('height>=sm' 'height' '>=' 'sm')\n * \t // => also truthy\n *\n *   match($regex, 'lorem ipsum')\n *   // => null\n *\n * @param {String} pattern\n * @param {String|Ident} val\n * @param {String|Ident} [flags='']\n * @return {String|Null}\n * @api public\n */\n\nfunction match(pattern, val, flags){\n  utils.assertType(pattern, 'string', 'pattern');\n  utils.assertString(val, 'val');\n  var re = new RegExp(pattern.val, validateFlags(flags) ? flags.string : '');\n  return val.string.match(re);\n}\nmatch.params = ['pattern', 'val', 'flags'];\nmodule.exports = match;\n\nfunction validateFlags(flags) {\n  flags = flags && flags.string;\n\n  if (flags) {\n    return flags.split('').every(function(flag) {\n      return ~VALID_FLAGS.indexOf(flag);\n    });\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}