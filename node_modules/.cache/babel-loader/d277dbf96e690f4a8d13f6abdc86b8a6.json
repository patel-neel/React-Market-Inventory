{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes'),\n    convert = require('./convert-angle'),\n    asin = require('./asin');\n/**\n * Return the arccosine of the given `value`.\n *\n * @param {Double} trigValue\n * @param {Unit} output \n * @return {Unit}\n * @api public\n */\n\n\nmodule.exports = function acos(trigValue, output) {\n  var output = typeof output !== 'undefined' ? output : 'deg';\n  var convertedValue = convert(Math.PI / 2, output) - asin(trigValue, output).val;\n  var m = Math.pow(10, 9);\n  convertedValue = Math.round(convertedValue * m) / m;\n  return new nodes.Unit(convertedValue, output);\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/acos.js"],"names":["utils","require","nodes","convert","asin","module","exports","acos","trigValue","output","convertedValue","Math","PI","val","m","pow","round","Unit"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEGE,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAFpB;AAAA,IAGGG,IAAI,GAAMH,OAAO,CAAC,QAAD,CAHpB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,SAAd,EAAyBC,MAAzB,EAAiC;AACjD,MAAIA,MAAM,GAAG,OAAOA,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,KAAtD;AACA,MAAIC,cAAc,GAAGP,OAAO,CAACQ,IAAI,CAACC,EAAL,GAAU,CAAX,EAAcH,MAAd,CAAP,GAA+BL,IAAI,CAACI,SAAD,EAAYC,MAAZ,CAAJ,CAAwBI,GAA5E;AACA,MAAIC,CAAC,GAAGH,IAAI,CAACI,GAAL,CAAS,EAAT,EAAa,CAAb,CAAR;AACAL,EAAAA,cAAc,GAAGC,IAAI,CAACK,KAAL,CAAWN,cAAc,GAAGI,CAA5B,IAAiCA,CAAlD;AACC,SAAO,IAAIZ,KAAK,CAACe,IAAV,CAAeP,cAAf,EAA+BD,MAA/B,CAAP;AACD,CAND","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n\t, convert = require('./convert-angle')\n\t, asin    = require('./asin');\n\n/**\n * Return the arccosine of the given `value`.\n *\n * @param {Double} trigValue\n * @param {Unit} output \n * @return {Unit}\n * @api public\n */\nmodule.exports = function acos(trigValue, output) {\n\tvar output = typeof output !== 'undefined' ? output : 'deg';\n\tvar convertedValue = convert(Math.PI / 2, output) - asin(trigValue, output).val;\n\tvar m = Math.pow(10, 9);\n\tconvertedValue = Math.round(convertedValue * m) / m;\n  return new nodes.Unit(convertedValue, output);\n};\n"]},"metadata":{},"sourceType":"script"}