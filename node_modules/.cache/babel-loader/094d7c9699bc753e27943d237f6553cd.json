{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Return a `Literal` `num` converted to the provided `base`, padded to `width`\n * with zeroes (default width is 2)\n *\n * @param {Number} num\n * @param {Number} base\n * @param {Number} width\n * @return {Literal}\n * @api public\n */\n\n\n(module.exports = function (num, base, width) {\n  utils.assertPresent(num, 'number');\n  utils.assertPresent(base, 'base');\n  num = utils.unwrap(num).nodes[0].val;\n  base = utils.unwrap(base).nodes[0].val;\n  width = width && utils.unwrap(width).nodes[0].val || 2;\n  var result = Number(num).toString(base);\n\n  while (result.length < width) {\n    result = '0' + result;\n  }\n\n  return new nodes.Literal(result);\n}).raw = true;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/base-convert.js"],"names":["utils","require","nodes","module","exports","num","base","width","assertPresent","unwrap","val","result","Number","toString","length","Literal","raw"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,CAACE,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2B;AAC3CP,EAAAA,KAAK,CAACQ,aAAN,CAAoBH,GAApB,EAAyB,QAAzB;AACAL,EAAAA,KAAK,CAACQ,aAAN,CAAoBF,IAApB,EAA0B,MAA1B;AACAD,EAAAA,GAAG,GAAGL,KAAK,CAACS,MAAN,CAAaJ,GAAb,EAAkBH,KAAlB,CAAwB,CAAxB,EAA2BQ,GAAjC;AACAJ,EAAAA,IAAI,GAAGN,KAAK,CAACS,MAAN,CAAaH,IAAb,EAAmBJ,KAAnB,CAAyB,CAAzB,EAA4BQ,GAAnC;AACAH,EAAAA,KAAK,GAAIA,KAAK,IAAIP,KAAK,CAACS,MAAN,CAAaF,KAAb,EAAoBL,KAApB,CAA0B,CAA1B,EAA6BQ,GAAvC,IAA+C,CAAvD;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACP,GAAD,CAAN,CAAYQ,QAAZ,CAAqBP,IAArB,CAAb;;AACA,SAAOK,MAAM,CAACG,MAAP,GAAgBP,KAAvB,EAA8B;AAC5BI,IAAAA,MAAM,GAAG,MAAMA,MAAf;AACD;;AACD,SAAO,IAAIT,KAAK,CAACa,OAAV,CAAkBJ,MAAlB,CAAP;AACD,CAXD,EAWGK,GAXH,GAWS,IAXT","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Return a `Literal` `num` converted to the provided `base`, padded to `width`\n * with zeroes (default width is 2)\n *\n * @param {Number} num\n * @param {Number} base\n * @param {Number} width\n * @return {Literal}\n * @api public\n */\n\n(module.exports = function(num, base, width) {\n  utils.assertPresent(num, 'number');\n  utils.assertPresent(base, 'base');\n  num = utils.unwrap(num).nodes[0].val;\n  base = utils.unwrap(base).nodes[0].val;\n  width = (width && utils.unwrap(width).nodes[0].val) || 2;\n  var result = Number(num).toString(base);\n  while (result.length < width) {\n    result = '0' + result;\n  }\n  return new nodes.Literal(result);\n}).raw = true;\n"]},"metadata":{},"sourceType":"script"}