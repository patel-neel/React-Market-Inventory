{"ast":null,"code":"/*!\n * Stylus - Parser\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Lexer = require('./lexer'),\n    nodes = require('./nodes'),\n    Token = require('./token'),\n    units = require('./units'),\n    errors = require('./errors'),\n    cache = require('./cache'); // debuggers\n\n\nvar debug = {\n  lexer: require('debug')('stylus:lexer'),\n  selector: require('debug')('stylus:parser:selector')\n};\n/**\n * Selector composite tokens.\n */\n\nvar selectorTokens = ['ident', 'string', 'selector', 'function', 'comment', 'boolean', 'space', 'color', 'unit', 'for', 'in', '[', ']', '(', ')', '+', '-', '*', '*=', '<', '>', '=', ':', '&', '&&', '~', '{', '}', '.', '..', '/'];\n/**\n * CSS pseudo-classes and pseudo-elements.\n * See http://dev.w3.org/csswg/selectors4/\n */\n\nvar pseudoSelectors = [// Logical Combinations\n'matches', 'not' // Linguistic Pseudo-classes\n, 'dir', 'lang' // Location Pseudo-classes\n, 'any-link', 'link', 'visited', 'local-link', 'target', 'scope' // User Action Pseudo-classes\n, 'hover', 'active', 'focus', 'drop' // Time-dimensional Pseudo-classes\n, 'current', 'past', 'future' // The Input Pseudo-classes\n, 'enabled', 'disabled', 'read-only', 'read-write', 'placeholder-shown', 'checked', 'indeterminate', 'valid', 'invalid', 'in-range', 'out-of-range', 'required', 'optional', 'user-error' // Tree-Structural pseudo-classes\n, 'root', 'empty', 'blank', 'nth-child', 'nth-last-child', 'first-child', 'last-child', 'only-child', 'nth-of-type', 'nth-last-of-type', 'first-of-type', 'last-of-type', 'only-of-type', 'nth-match', 'nth-last-match' // Grid-Structural Selectors\n, 'nth-column', 'nth-last-column' // Pseudo-elements\n, 'first-line', 'first-letter', 'before', 'after' // Non-standard\n, 'selection'];\n/**\n * Initialize a new `Parser` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api private\n */\n\nvar Parser = module.exports = function Parser(str, options) {\n  var self = this;\n  options = options || {};\n  Parser.cache = Parser.cache || Parser.getCache(options);\n  this.hash = Parser.cache.key(str, options);\n  this.lexer = {};\n\n  if (!Parser.cache.has(this.hash)) {\n    this.lexer = new Lexer(str, options);\n  }\n\n  this.prefix = options.prefix || '';\n  this.root = options.root || new nodes.Root();\n  this.state = ['root'];\n  this.stash = [];\n  this.parens = 0;\n  this.css = 0;\n\n  this.state.pop = function () {\n    self.prevState = [].pop.call(this);\n  };\n};\n/**\n * Get cache instance.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\n\nParser.getCache = function (options) {\n  return false === options.cache ? cache(false) : cache(options.cache || 'memory', options);\n};\n/**\n * Parser prototype.\n */\n\n\nParser.prototype = {\n  /**\n   * Constructor.\n   */\n  constructor: Parser,\n\n  /**\n   * Return current state.\n   *\n   * @return {String}\n   * @api private\n   */\n  currentState: function currentState() {\n    return this.state[this.state.length - 1];\n  },\n\n  /**\n   * Return previous state.\n   *\n   * @return {String}\n   * @api private\n   */\n  previousState: function previousState() {\n    return this.state[this.state.length - 2];\n  },\n\n  /**\n   * Parse the input, then return the root node.\n   *\n   * @return {Node}\n   * @api private\n   */\n  parse: function parse() {\n    var block = this.parent = this.root;\n\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash); // normalize cached imports\n\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n\n      Parser.cache.set(this.hash, block);\n    }\n\n    return block;\n  },\n\n  /**\n   * Throw an `Error` with the given `msg`.\n   *\n   * @param {String} msg\n   * @api private\n   */\n  error: function error(msg) {\n    var type = this.peek().type,\n        val = undefined == this.peek().val ? '' : ' ' + this.peek().toString();\n    if (val.trim() == type.trim()) val = '';\n    throw new errors.ParseError(msg.replace('{peek}', '\"' + type + val + '\"'));\n  },\n\n  /**\n   * Accept the given token `type`, and return it,\n   * otherwise return `undefined`.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n  accept: function accept(type) {\n    if (type == this.peek().type) {\n      return this.next();\n    }\n  },\n\n  /**\n   * Expect token `type` and return it, throw otherwise.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n  expect: function expect(type) {\n    if (type != this.peek().type) {\n      this.error('expected \"' + type + '\", got {peek}');\n    }\n\n    return this.next();\n  },\n\n  /**\n   * Get the next token.\n   *\n   * @return {Token}\n   * @api private\n   */\n  next: function next() {\n    var tok = this.stash.length ? this.stash.pop() : this.lexer.next(),\n        line = tok.lineno,\n        column = tok.column || 1;\n\n    if (tok.val && tok.val.nodeName) {\n      tok.val.lineno = line;\n      tok.val.column = column;\n    }\n\n    nodes.lineno = line;\n    nodes.column = column;\n    debug.lexer('%s %s', tok.type, tok.val || '');\n    return tok;\n  },\n\n  /**\n   * Peek with lookahead(1).\n   *\n   * @return {Token}\n   * @api private\n   */\n  peek: function peek() {\n    return this.lexer.peek();\n  },\n\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Token}\n   * @api private\n   */\n  lookahead: function lookahead(n) {\n    return this.lexer.lookahead(n);\n  },\n\n  /**\n   * Check if the token at `n` is a valid selector token.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n  isSelectorToken: function isSelectorToken(n) {\n    var la = this.lookahead(n).type;\n\n    switch (la) {\n      case 'for':\n        return this.bracketed;\n\n      case '[':\n        this.bracketed = true;\n        return true;\n\n      case ']':\n        this.bracketed = false;\n        return true;\n\n      default:\n        return ~selectorTokens.indexOf(la);\n    }\n  },\n\n  /**\n   * Check if the token at `n` is a pseudo selector.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n  isPseudoSelector: function isPseudoSelector(n) {\n    var val = this.lookahead(n).val;\n    return val && ~pseudoSelectors.indexOf(val.name);\n  },\n\n  /**\n   * Check if the current line contains `type`.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @api private\n   */\n  lineContains: function lineContains(type) {\n    var i = 1,\n        la;\n\n    while (la = this.lookahead(i++)) {\n      if (~['indent', 'outdent', 'newline', 'eos'].indexOf(la.type)) return;\n      if (type == la.type) return true;\n    }\n  },\n\n  /**\n   * Valid selector tokens.\n   */\n  selectorToken: function selectorToken() {\n    if (this.isSelectorToken(1)) {\n      if ('{' == this.peek().type) {\n        // unclosed, must be a block\n        if (!this.lineContains('}')) return; // check if ':' is within the braces.\n        // though not required by Stylus, chances\n        // are if someone is using {} they will\n        // use CSS-style props, helping us with\n        // the ambiguity in this case\n\n        var i = 0,\n            la;\n\n        while (la = this.lookahead(++i)) {\n          if ('}' == la.type) {\n            // Check empty block.\n            if (i == 2 || i == 3 && this.lookahead(i - 1).type == 'space') return;\n            break;\n          }\n\n          if (':' == la.type) return;\n        }\n      }\n\n      return this.next();\n    }\n  },\n\n  /**\n   * Skip the given `tokens`.\n   *\n   * @param {Array} tokens\n   * @api private\n   */\n  skip: function skip(tokens) {\n    while (~tokens.indexOf(this.peek().type)) {\n      this.next();\n    }\n  },\n\n  /**\n   * Consume whitespace.\n   */\n  skipWhitespace: function skipWhitespace() {\n    this.skip(['space', 'indent', 'outdent', 'newline']);\n  },\n\n  /**\n   * Consume newlines.\n   */\n  skipNewlines: function skipNewlines() {\n    while ('newline' == this.peek().type) {\n      this.next();\n    }\n  },\n\n  /**\n   * Consume spaces.\n   */\n  skipSpaces: function skipSpaces() {\n    while ('space' == this.peek().type) {\n      this.next();\n    }\n  },\n\n  /**\n   * Consume spaces and comments.\n   */\n  skipSpacesAndComments: function skipSpacesAndComments() {\n    while ('space' == this.peek().type || 'comment' == this.peek().type) {\n      this.next();\n    }\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a function definition, ie trailing\n   * `{` or indentation.\n   */\n  looksLikeFunctionDefinition: function looksLikeFunctionDefinition(i) {\n    return 'indent' == this.lookahead(i).type || '{' == this.lookahead(i).type;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a selector.\n   *\n   * @param {Boolean} [fromProperty]\n   * @return {Boolean}\n   * @api private\n   */\n  looksLikeSelector: function looksLikeSelector(fromProperty) {\n    var i = 1,\n        node,\n        brace; // Real property\n\n    if (fromProperty && ':' == this.lookahead(i + 1).type && (this.lookahead(i + 1).space || 'indent' == this.lookahead(i + 2).type)) return false; // Assume selector when an ident is\n    // followed by a selector\n\n    while ('ident' == this.lookahead(i).type && ('newline' == this.lookahead(i + 1).type || ',' == this.lookahead(i + 1).type)) {\n      i += 2;\n    }\n\n    while (this.isSelectorToken(i) || ',' == this.lookahead(i).type) {\n      if ('selector' == this.lookahead(i).type) return true;\n      if ('&' == this.lookahead(i + 1).type) return true; // Hash values inside properties\n\n      if (i > 1 && 'ident' === this.lookahead(i - 1).type && '.' === this.lookahead(i).type && 'ident' === this.lookahead(i + 1).type) {\n        while (node = this.lookahead(i + 2)) {\n          if (['indent', 'outdent', '{', ';', 'eos', 'selector', 'media', 'if', 'atrule', ')', '}', 'unit', '[', 'for', 'function'].indexOf(node.type) !== -1) {\n            if (node.type === '[') {\n              while ((node = this.lookahead(i + 3)) && node.type !== ']') {\n                if (~['.', 'unit'].indexOf(node.type)) {\n                  return false;\n                }\n\n                i += 1;\n              }\n            } else {\n              if (this.isPseudoSelector(i + 2)) {\n                return true;\n              }\n\n              if (node.type === ')' && this.lookahead(i + 3) && this.lookahead(i + 3).type === '}') {\n                break;\n              }\n\n              return ['outdent', ';', 'eos', 'media', 'if', 'atrule', ')', '}', 'unit', 'for', 'function'].indexOf(node.type) === -1;\n            }\n          }\n\n          i += 1;\n        }\n\n        return true;\n      }\n\n      if ('.' == this.lookahead(i).type && 'ident' == this.lookahead(i + 1).type) {\n        return true;\n      }\n\n      if ('*' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true; // Pseudo-elements\n\n      if (':' == this.lookahead(i).type && ':' == this.lookahead(i + 1).type) return true; // #a after an ident and newline\n\n      if ('color' == this.lookahead(i).type && 'newline' == this.lookahead(i - 1).type) return true;\n      if (this.looksLikeAttributeSelector(i)) return true;\n      if (('=' == this.lookahead(i).type || 'function' == this.lookahead(i).type) && '{' == this.lookahead(i + 1).type) return false; // Hash values inside properties\n\n      if (':' == this.lookahead(i).type && !this.isPseudoSelector(i + 1) && this.lineContains('.')) return false; // the ':' token within braces signifies\n      // a selector. ex: \"foo{bar:'baz'}\"\n\n      if ('{' == this.lookahead(i).type) brace = true;else if ('}' == this.lookahead(i).type) brace = false;\n      if (brace && ':' == this.lookahead(i).type) return true; // '{' preceded by a space is considered a selector.\n      // for example \"foo{bar}{baz}\" may be a property,\n      // however \"foo{bar} {baz}\" is a selector\n\n      if ('space' == this.lookahead(i).type && '{' == this.lookahead(i + 1).type) return true; // Assume pseudo selectors are NOT properties\n      // as 'td:th-child(1)' may look like a property\n      // and function call to the parser otherwise\n\n      if (':' == this.lookahead(i++).type && !this.lookahead(i - 1).space && this.isPseudoSelector(i)) return true; // Trailing space\n\n      if ('space' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type && '{' == this.lookahead(i + 2).type) return true;\n      if (',' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true;\n    } // Trailing comma\n\n\n    if (',' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true; // Trailing brace\n\n    if ('{' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type) return true; // css-style mode, false on ; }\n\n    if (this.css) {\n      if (';' == this.lookahead(i).type || '}' == this.lookahead(i - 1).type) return false;\n    } // Trailing separators\n\n\n    while (!~['indent', 'outdent', 'newline', 'for', 'if', ';', '}', 'eos'].indexOf(this.lookahead(i).type)) {\n      ++i;\n    }\n\n    if ('indent' == this.lookahead(i).type) return true;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms an attribute selector.\n   */\n  looksLikeAttributeSelector: function looksLikeAttributeSelector(n) {\n    var type = this.lookahead(n).type;\n    if ('=' == type && this.bracketed) return true;\n    return ('ident' == type || 'string' == type) && ']' == this.lookahead(n + 1).type && ('newline' == this.lookahead(n + 2).type || this.isSelectorToken(n + 2)) && !this.lineContains(':') && !this.lineContains('=');\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a keyframe block.\n   */\n  looksLikeKeyframe: function looksLikeKeyframe() {\n    var i = 2,\n        type;\n\n    switch (this.lookahead(i).type) {\n      case '{':\n      case 'indent':\n      case ',':\n        return true;\n\n      case 'newline':\n        while ('unit' == this.lookahead(++i).type || 'newline' == this.lookahead(i).type) {\n          ;\n        }\n\n        type = this.lookahead(i).type;\n        return 'indent' == type || '{' == type;\n    }\n  },\n\n  /**\n   * Check if the current state supports selectors.\n   */\n  stateAllowsSelector: function stateAllowsSelector() {\n    switch (this.currentState()) {\n      case 'root':\n      case 'atblock':\n      case 'selector':\n      case 'conditional':\n      case 'function':\n      case 'atrule':\n      case 'for':\n        return true;\n    }\n  },\n\n  /**\n   * Try to assign @block to the node.\n   *\n   * @param {Expression} expr\n   * @private\n   */\n  assignAtblock: function assignAtblock(expr) {\n    try {\n      expr.push(this.atblock(expr));\n    } catch (err) {\n      this.error('invalid right-hand side operand in assignment, got {peek}');\n    }\n  },\n\n  /**\n   *   statement\n   * | statement 'if' expression\n   * | statement 'unless' expression\n   */\n  statement: function statement() {\n    var stmt = this.stmt(),\n        state = this.prevState,\n        block,\n        op; // special-case statements since it\n    // is not an expression. We could\n    // implement postfix conditionals at\n    // the expression level, however they\n    // would then fail to enclose properties\n\n    if (this.allowPostfix) {\n      this.allowPostfix = false;\n      state = 'expression';\n    }\n\n    switch (state) {\n      case 'assignment':\n      case 'expression':\n      case 'function arguments':\n        while (op = this.accept('if') || this.accept('unless') || this.accept('for')) {\n          switch (op.type) {\n            case 'if':\n            case 'unless':\n              stmt = new nodes.If(this.expression(), stmt);\n              stmt.postfix = true;\n              stmt.negate = 'unless' == op.type;\n              this.accept(';');\n              break;\n\n            case 'for':\n              var key,\n                  val = this.id().name;\n              if (this.accept(',')) key = this.id().name;\n              this.expect('in');\n              var each = new nodes.Each(val, key, this.expression());\n              block = new nodes.Block(this.parent, each);\n              block.push(stmt);\n              each.block = block;\n              stmt = each;\n          }\n        }\n\n    }\n\n    return stmt;\n  },\n\n  /**\n   *    ident\n   *  | selector\n   *  | literal\n   *  | charset\n   *  | namespace\n   *  | import\n   *  | require\n   *  | media\n   *  | atrule\n   *  | scope\n   *  | keyframes\n   *  | mozdocument\n   *  | for\n   *  | if\n   *  | unless\n   *  | comment\n   *  | expression\n   *  | 'return' expression\n   */\n  stmt: function stmt() {\n    var tok = this.peek(),\n        selector;\n\n    switch (tok.type) {\n      case 'keyframes':\n        return this.keyframes();\n\n      case '-moz-document':\n        return this.mozdocument();\n\n      case 'comment':\n      case 'selector':\n      case 'literal':\n      case 'charset':\n      case 'namespace':\n      case 'import':\n      case 'require':\n      case 'extend':\n      case 'media':\n      case 'atrule':\n      case 'ident':\n      case 'scope':\n      case 'supports':\n      case 'unless':\n      case 'function':\n      case 'for':\n      case 'if':\n        return this[tok.type]();\n\n      case 'return':\n        return this.return();\n\n      case '{':\n        return this.property();\n\n      default:\n        // Contextual selectors\n        if (this.stateAllowsSelector()) {\n          switch (tok.type) {\n            case 'color':\n            case '~':\n            case '>':\n            case '<':\n            case ':':\n            case '&':\n            case '&&':\n            case '[':\n            case '.':\n            case '/':\n              selector = this.selector();\n              selector.column = tok.column;\n              selector.lineno = tok.lineno;\n              return selector;\n            // relative reference\n\n            case '..':\n              if ('/' == this.lookahead(2).type) return this.selector();\n\n            case '+':\n              return 'function' == this.lookahead(2).type ? this.functionCall() : this.selector();\n\n            case '*':\n              return this.property();\n            // keyframe blocks (10%, 20% { ... })\n\n            case 'unit':\n              if (this.looksLikeKeyframe()) {\n                selector = this.selector();\n                selector.column = tok.column;\n                selector.lineno = tok.lineno;\n                return selector;\n              }\n\n            case '-':\n              if ('{' == this.lookahead(2).type) return this.property();\n          }\n        } // Expression fallback\n\n\n        var expr = this.expression();\n        if (expr.isEmpty) this.error('unexpected {peek}');\n        return expr;\n    }\n  },\n\n  /**\n   * indent (!outdent)+ outdent\n   */\n  block: function block(node, scope) {\n    var delim,\n        stmt,\n        next,\n        block = this.parent = new nodes.Block(this.parent, node);\n    if (false === scope) block.scope = false;\n    this.accept('newline'); // css-style\n\n    if (this.accept('{')) {\n      this.css++;\n      delim = '}';\n      this.skipWhitespace();\n    } else {\n      delim = 'outdent';\n      this.expect('indent');\n    }\n\n    while (delim != this.peek().type) {\n      // css-style\n      if (this.css) {\n        if (this.accept('newline') || this.accept('indent')) continue;\n        stmt = this.statement();\n        this.accept(';');\n        this.skipWhitespace();\n      } else {\n        if (this.accept('newline')) continue; // skip useless indents and comments\n\n        next = this.lookahead(2).type;\n\n        if ('indent' == this.peek().type && ~['outdent', 'newline', 'comment'].indexOf(next)) {\n          this.skip(['indent', 'outdent']);\n          continue;\n        }\n\n        if ('eos' == this.peek().type) return block;\n        stmt = this.statement();\n        this.accept(';');\n      }\n\n      if (!stmt) this.error('unexpected token {peek} in block');\n      block.push(stmt);\n    } // css-style\n\n\n    if (this.css) {\n      this.skipWhitespace();\n      this.expect('}');\n      this.skipSpaces();\n      this.css--;\n    } else {\n      this.expect('outdent');\n    }\n\n    this.parent = block.parent;\n    return block;\n  },\n\n  /**\n   * comment space*\n   */\n  comment: function comment() {\n    var node = this.next().val;\n    this.skipSpaces();\n    return node;\n  },\n\n  /**\n   * for val (',' key) in expr\n   */\n  for: function _for() {\n    this.expect('for');\n    var key,\n        val = this.id().name;\n    if (this.accept(',')) key = this.id().name;\n    this.expect('in');\n    this.state.push('for');\n    this.cond = true;\n    var each = new nodes.Each(val, key, this.expression());\n    this.cond = false;\n    each.block = this.block(each, false);\n    this.state.pop();\n    return each;\n  },\n\n  /**\n   * return expression\n   */\n  return: function _return() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty ? new nodes.Return() : new nodes.Return(expr);\n  },\n\n  /**\n   * unless expression block\n   */\n  unless: function unless() {\n    this.expect('unless');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression(), true);\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * if expression block (else block)?\n   */\n  if: function _if() {\n    var token = this.expect('if');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression()),\n        cond,\n        block,\n        item;\n    node.column = token.column;\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.skip(['newline', 'comment']);\n\n    while (this.accept('else')) {\n      token = this.accept('if');\n\n      if (token) {\n        this.cond = true;\n        cond = this.expression();\n        this.cond = false;\n        block = this.block(node, false);\n        item = new nodes.If(cond, block);\n        item.column = token.column;\n        node.elses.push(item);\n      } else {\n        node.elses.push(this.block(node, false));\n        break;\n      }\n\n      this.skip(['newline', 'comment']);\n    }\n\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * @block\n   *\n   * @param {Expression} [node]\n   */\n  atblock: function atblock(node) {\n    if (!node) this.expect('atblock');\n    node = new nodes.Atblock();\n    this.state.push('atblock');\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * atrule selector? block?\n   */\n  atrule: function atrule() {\n    var type = this.expect('atrule').val,\n        node = new nodes.Atrule(type),\n        tok;\n    this.skipSpacesAndComments();\n    node.segments = this.selectorParts();\n    this.skipSpacesAndComments();\n    tok = this.peek().type;\n\n    if ('indent' == tok || '{' == tok || 'newline' == tok && '{' == this.lookahead(2).type) {\n      this.state.push('atrule');\n      node.block = this.block(node);\n      this.state.pop();\n    }\n\n    return node;\n  },\n\n  /**\n   * scope\n   */\n  scope: function scope() {\n    this.expect('scope');\n    var selector = this.selectorParts().map(function (selector) {\n      return selector.val;\n    }).join('');\n    this.selectorScope = selector.trim();\n    return nodes.null;\n  },\n\n  /**\n   * supports\n   */\n  supports: function supports() {\n    this.expect('supports');\n    var node = new nodes.Supports(this.supportsCondition());\n    this.state.push('atrule');\n    node.block = this.block(node);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   *   supports negation\n   * | supports op\n   * | expression\n   */\n  supportsCondition: function supportsCondition() {\n    var node = this.supportsNegation() || this.supportsOp();\n\n    if (!node) {\n      this.cond = true;\n      node = this.expression();\n      this.cond = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * 'not' supports feature\n   */\n  supportsNegation: function supportsNegation() {\n    if (this.accept('not')) {\n      var node = new nodes.Expression();\n      node.push(new nodes.Literal('not'));\n      node.push(this.supportsFeature());\n      return node;\n    }\n  },\n\n  /**\n   * supports feature (('and' | 'or') supports feature)+\n   */\n  supportsOp: function supportsOp() {\n    var feature = this.supportsFeature(),\n        op,\n        expr;\n\n    if (feature) {\n      expr = new nodes.Expression();\n      expr.push(feature);\n\n      while (op = this.accept('&&') || this.accept('||')) {\n        expr.push(new nodes.Literal('&&' == op.val ? 'and' : 'or'));\n        expr.push(this.supportsFeature());\n      }\n\n      return expr;\n    }\n  },\n\n  /**\n   *   ('(' supports condition ')')\n   * | feature\n   */\n  supportsFeature: function supportsFeature() {\n    this.skipSpacesAndComments();\n\n    if ('(' == this.peek().type) {\n      var la = this.lookahead(2).type;\n\n      if ('ident' == la || '{' == la) {\n        return this.feature();\n      } else {\n        this.expect('(');\n        var node = new nodes.Expression();\n        node.push(new nodes.Literal('('));\n        node.push(this.supportsCondition());\n        this.expect(')');\n        node.push(new nodes.Literal(')'));\n        this.skipSpacesAndComments();\n        return node;\n      }\n    }\n  },\n\n  /**\n   * extend\n   */\n  extend: function extend() {\n    var tok = this.expect('extend'),\n        selectors = [],\n        sel,\n        node,\n        arr;\n\n    do {\n      arr = this.selectorParts();\n      if (!arr.length) continue;\n      sel = new nodes.Selector(arr);\n      selectors.push(sel);\n      if ('!' !== this.peek().type) continue;\n      tok = this.lookahead(2);\n      if ('ident' !== tok.type || 'optional' !== tok.val.name) continue;\n      this.skip(['!', 'ident']);\n      sel.optional = true;\n    } while (this.accept(','));\n\n    node = new nodes.Extend(selectors);\n    node.lineno = tok.lineno;\n    node.column = tok.column;\n    return node;\n  },\n\n  /**\n   * media queries\n   */\n  media: function media() {\n    this.expect('media');\n    this.state.push('atrule');\n    var media = new nodes.Media(this.queries());\n    media.block = this.block(media);\n    this.state.pop();\n    return media;\n  },\n\n  /**\n   * query (',' query)*\n   */\n  queries: function queries() {\n    var queries = new nodes.QueryList(),\n        skip = ['comment', 'newline', 'space'];\n\n    do {\n      this.skip(skip);\n      queries.push(this.query());\n      this.skip(skip);\n    } while (this.accept(','));\n\n    return queries;\n  },\n\n  /**\n   *   expression\n   * | (ident | 'not')? ident ('and' feature)*\n   * | feature ('and' feature)*\n   */\n  query: function query() {\n    var query = new nodes.Query(),\n        expr,\n        pred,\n        id; // hash values support\n\n    if ('ident' == this.peek().type && ('.' == this.lookahead(2).type || '[' == this.lookahead(2).type)) {\n      this.cond = true;\n      expr = this.expression();\n      this.cond = false;\n      query.push(new nodes.Feature(expr.nodes));\n      return query;\n    }\n\n    if (pred = this.accept('ident') || this.accept('not')) {\n      pred = new nodes.Literal(pred.val.string || pred.val);\n      this.skipSpacesAndComments();\n\n      if (id = this.accept('ident')) {\n        query.type = id.val;\n        query.predicate = pred;\n      } else {\n        query.type = pred;\n      }\n\n      this.skipSpacesAndComments();\n      if (!this.accept('&&')) return query;\n    }\n\n    do {\n      query.push(this.feature());\n    } while (this.accept('&&'));\n\n    return query;\n  },\n\n  /**\n   * '(' ident ( ':'? expression )? ')'\n   */\n  feature: function feature() {\n    this.skipSpacesAndComments();\n    this.expect('(');\n    this.skipSpacesAndComments();\n    var node = new nodes.Feature(this.interpolate());\n    this.skipSpacesAndComments();\n    this.accept(':');\n    this.skipSpacesAndComments();\n    this.inProperty = true;\n    node.expr = this.list();\n    this.inProperty = false;\n    this.skipSpacesAndComments();\n    this.expect(')');\n    this.skipSpacesAndComments();\n    return node;\n  },\n\n  /**\n   * @-moz-document call (',' call)* block\n   */\n  mozdocument: function mozdocument() {\n    this.expect('-moz-document');\n    var mozdocument = new nodes.Atrule('-moz-document'),\n        calls = [];\n\n    do {\n      this.skipSpacesAndComments();\n      calls.push(this.functionCall());\n      this.skipSpacesAndComments();\n    } while (this.accept(','));\n\n    mozdocument.segments = [new nodes.Literal(calls.join(', '))];\n    this.state.push('atrule');\n    mozdocument.block = this.block(mozdocument, false);\n    this.state.pop();\n    return mozdocument;\n  },\n\n  /**\n   * import expression\n   */\n  import: function _import() {\n    this.expect('import');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), false);\n  },\n\n  /**\n   * require expression\n   */\n  require: function require() {\n    this.expect('require');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), true);\n  },\n\n  /**\n   * charset string\n   */\n  charset: function charset() {\n    this.expect('charset');\n    var str = this.expect('string').val;\n    this.allowPostfix = true;\n    return new nodes.Charset(str);\n  },\n\n  /**\n   * namespace ident? (string | url)\n   */\n  namespace: function namespace() {\n    var str, prefix;\n    this.expect('namespace');\n    this.skipSpacesAndComments();\n\n    if (prefix = this.accept('ident')) {\n      prefix = prefix.val;\n    }\n\n    this.skipSpacesAndComments();\n    str = this.accept('string') || this.url();\n    this.allowPostfix = true;\n    return new nodes.Namespace(str, prefix);\n  },\n\n  /**\n   * keyframes name block\n   */\n  keyframes: function keyframes() {\n    var tok = this.expect('keyframes'),\n        keyframes;\n    this.skipSpacesAndComments();\n    keyframes = new nodes.Keyframes(this.selectorParts(), tok.val);\n    keyframes.column = tok.column;\n    this.skipSpacesAndComments(); // block\n\n    this.state.push('atrule');\n    keyframes.block = this.block(keyframes);\n    this.state.pop();\n    return keyframes;\n  },\n\n  /**\n   * literal\n   */\n  literal: function literal() {\n    return this.expect('literal').val;\n  },\n\n  /**\n   * ident space?\n   */\n  id: function id() {\n    var tok = this.expect('ident');\n    this.accept('space');\n    return tok.val;\n  },\n\n  /**\n   *   ident\n   * | assignment\n   * | property\n   * | selector\n   */\n  ident: function ident() {\n    var i = 2,\n        la = this.lookahead(i).type;\n\n    while ('space' == la) {\n      la = this.lookahead(++i).type;\n    }\n\n    switch (la) {\n      // Assignment\n      case '=':\n      case '?=':\n      case '-=':\n      case '+=':\n      case '*=':\n      case '/=':\n      case '%=':\n        return this.assignment();\n      // Member\n\n      case '.':\n        if ('space' == this.lookahead(i - 1).type) return this.selector();\n        if (this._ident == this.peek()) return this.id();\n\n        while ('=' != this.lookahead(++i).type && !~['[', ',', 'newline', 'indent', 'eos'].indexOf(this.lookahead(i).type)) {\n          ;\n        }\n\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n\n      // Assignment []=\n\n      case '[':\n        if (this._ident == this.peek()) return this.id();\n\n        while (']' != this.lookahead(i++).type && 'selector' != this.lookahead(i).type && 'eos' != this.lookahead(i).type) {\n          ;\n        }\n\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n\n      // Operation\n\n      case '-':\n      case '+':\n      case '/':\n      case '*':\n      case '%':\n      case '**':\n      case '&&':\n      case '||':\n      case '>':\n      case '<':\n      case '>=':\n      case '<=':\n      case '!=':\n      case '==':\n      case '?':\n      case 'in':\n      case 'is a':\n      case 'is defined':\n        // Prevent cyclic .ident, return literal\n        if (this._ident == this.peek()) {\n          return this.id();\n        } else {\n          this._ident = this.peek();\n\n          switch (this.currentState()) {\n            // unary op or selector in property / for\n            case 'for':\n            case 'selector':\n              return this.property();\n            // Part of a selector\n\n            case 'root':\n            case 'atblock':\n            case 'atrule':\n              return '[' == la ? this.subscript() : this.selector();\n\n            case 'function':\n            case 'conditional':\n              return this.looksLikeSelector() ? this.selector() : this.expression();\n            // Do not disrupt the ident when an operand\n\n            default:\n              return this.operand ? this.id() : this.expression();\n          }\n        }\n\n      // Selector or property\n\n      default:\n        switch (this.currentState()) {\n          case 'root':\n            return this.selector();\n\n          case 'for':\n          case 'selector':\n          case 'function':\n          case 'conditional':\n          case 'atblock':\n          case 'atrule':\n            return this.property();\n\n          default:\n            var id = this.id();\n            if ('interpolation' == this.previousState()) id.mixin = true;\n            return id;\n        }\n\n    }\n  },\n\n  /**\n   * '*'? (ident | '{' expression '}')+\n   */\n  interpolate: function interpolate() {\n    var node,\n        segs = [],\n        star;\n    star = this.accept('*');\n    if (star) segs.push(new nodes.Literal('*'));\n\n    while (true) {\n      if (this.accept('{')) {\n        this.state.push('interpolation');\n        segs.push(this.expression());\n        this.expect('}');\n        this.state.pop();\n      } else if (node = this.accept('-')) {\n        segs.push(new nodes.Literal('-'));\n      } else if (node = this.accept('ident')) {\n        segs.push(node.val);\n      } else {\n        break;\n      }\n    }\n\n    if (!segs.length) this.expect('ident');\n    return segs;\n  },\n\n  /**\n   *   property ':'? expression\n   * | ident\n   */\n  property: function property() {\n    if (this.looksLikeSelector(true)) return this.selector(); // property\n\n    var ident = this.interpolate(),\n        prop = new nodes.Property(ident),\n        ret = prop; // optional ':'\n\n    this.accept('space');\n    if (this.accept(':')) this.accept('space');\n    this.state.push('property');\n    this.inProperty = true;\n    prop.expr = this.list();\n    if (prop.expr.isEmpty) ret = ident[0];\n    this.inProperty = false;\n    this.allowPostfix = true;\n    this.state.pop(); // optional ';'\n\n    this.accept(';');\n    return ret;\n  },\n\n  /**\n   *   selector ',' selector\n   * | selector newline selector\n   * | selector block\n   */\n  selector: function selector() {\n    var arr,\n        group = new nodes.Group(),\n        scope = this.selectorScope,\n        isRoot = 'root' == this.currentState(),\n        selector;\n\n    do {\n      // Clobber newline after ,\n      this.accept('newline');\n      arr = this.selectorParts(); // Push the selector\n\n      if (isRoot && scope) arr.unshift(new nodes.Literal(scope + ' '));\n\n      if (arr.length) {\n        selector = new nodes.Selector(arr);\n        selector.lineno = arr[0].lineno;\n        selector.column = arr[0].column;\n        group.push(selector);\n      }\n    } while (this.accept(',') || this.accept('newline'));\n\n    if ('selector-parts' == this.currentState()) return group.nodes;\n    this.state.push('selector');\n    group.block = this.block(group);\n    this.state.pop();\n    return group;\n  },\n  selectorParts: function selectorParts() {\n    var tok,\n        arr = []; // Selector candidates,\n    // stitched together to\n    // form a selector.\n\n    while (tok = this.selectorToken()) {\n      debug.selector('%s', tok); // Selector component\n\n      switch (tok.type) {\n        case '{':\n          this.skipSpaces();\n          var expr = this.expression();\n          this.skipSpaces();\n          this.expect('}');\n          arr.push(expr);\n          break;\n\n        case this.prefix && '.':\n          var literal = new nodes.Literal(tok.val + this.prefix);\n          literal.prefixed = true;\n          arr.push(literal);\n          break;\n\n        case 'comment':\n          // ignore comments\n          break;\n\n        case 'color':\n        case 'unit':\n          arr.push(new nodes.Literal(tok.val.raw));\n          break;\n\n        case 'space':\n          arr.push(new nodes.Literal(' '));\n          break;\n\n        case 'function':\n          arr.push(new nodes.Literal(tok.val.name + '('));\n          break;\n\n        case 'ident':\n          arr.push(new nodes.Literal(tok.val.name || tok.val.string));\n          break;\n\n        default:\n          arr.push(new nodes.Literal(tok.val));\n          if (tok.space) arr.push(new nodes.Literal(' '));\n      }\n    }\n\n    return arr;\n  },\n\n  /**\n   * ident ('=' | '?=') expression\n   */\n  assignment: function assignment() {\n    var op,\n        node,\n        ident = this.id(),\n        name = ident.name;\n\n    if (op = this.accept('=') || this.accept('?=') || this.accept('+=') || this.accept('-=') || this.accept('*=') || this.accept('/=') || this.accept('%=')) {\n      this.state.push('assignment');\n      var expr = this.list(); // @block support\n\n      if (expr.isEmpty) this.assignAtblock(expr);\n      node = new nodes.Ident(name, expr);\n      node.lineno = ident.lineno;\n      node.column = ident.column;\n      this.state.pop();\n\n      switch (op.type) {\n        case '?=':\n          var defined = new nodes.BinOp('is defined', node),\n              lookup = new nodes.Expression();\n          lookup.push(new nodes.Ident(name));\n          node = new nodes.Ternary(defined, lookup, node);\n          break;\n\n        case '+=':\n        case '-=':\n        case '*=':\n        case '/=':\n        case '%=':\n          node.val = new nodes.BinOp(op.type[0], new nodes.Ident(name), expr);\n          break;\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   *   definition\n   * | call\n   */\n  function: function _function() {\n    var parens = 1,\n        i = 2,\n        tok; // Lookahead and determine if we are dealing\n    // with a function call or definition. Here\n    // we pair parens to prevent false negatives\n\n    out: while (tok = this.lookahead(i++)) {\n      switch (tok.type) {\n        case 'function':\n        case '(':\n          ++parens;\n          break;\n\n        case ')':\n          if (! --parens) break out;\n          break;\n\n        case 'eos':\n          this.error('failed to find closing paren \")\"');\n      }\n    } // Definition or call\n\n\n    switch (this.currentState()) {\n      case 'expression':\n        return this.functionCall();\n\n      default:\n        return this.looksLikeFunctionDefinition(i) ? this.functionDefinition() : this.expression();\n    }\n  },\n\n  /**\n   * url '(' (expression | urlchars)+ ')'\n   */\n  url: function url() {\n    this.expect('function');\n    this.state.push('function arguments');\n    var args = this.args();\n    this.expect(')');\n    this.state.pop();\n    return new nodes.Call('url', args);\n  },\n\n  /**\n   * '+'? ident '(' expression ')' block?\n   */\n  functionCall: function functionCall() {\n    var withBlock = this.accept('+');\n    if ('url' == this.peek().val.name) return this.url();\n    var tok = this.expect('function').val;\n    var name = tok.name;\n    this.state.push('function arguments');\n    this.parens++;\n    var args = this.args();\n    this.expect(')');\n    this.parens--;\n    this.state.pop();\n    var call = new nodes.Call(name, args);\n    call.column = tok.column;\n    call.lineno = tok.lineno;\n\n    if (withBlock) {\n      this.state.push('function');\n      call.block = this.block(call);\n      this.state.pop();\n    }\n\n    return call;\n  },\n\n  /**\n   * ident '(' params ')' block\n   */\n  functionDefinition: function functionDefinition() {\n    var tok = this.expect('function'),\n        name = tok.val.name; // params\n\n    this.state.push('function params');\n    this.skipWhitespace();\n    var params = this.params();\n    this.skipWhitespace();\n    this.expect(')');\n    this.state.pop(); // Body\n\n    this.state.push('function');\n    var fn = new nodes.Function(name, params);\n    fn.column = tok.column;\n    fn.lineno = tok.lineno;\n    fn.block = this.block(fn);\n    this.state.pop();\n    return new nodes.Ident(name, fn);\n  },\n\n  /**\n   *   ident\n   * | ident '...'\n   * | ident '=' expression\n   * | ident ',' ident\n   */\n  params: function params() {\n    var tok,\n        node,\n        params = new nodes.Params();\n\n    while (tok = this.accept('ident')) {\n      this.accept('space');\n      params.push(node = tok.val);\n\n      if (this.accept('...')) {\n        node.rest = true;\n      } else if (this.accept('=')) {\n        node.val = this.expression();\n      }\n\n      this.skipWhitespace();\n      this.accept(',');\n      this.skipWhitespace();\n    }\n\n    return params;\n  },\n\n  /**\n   * (ident ':')? expression (',' (ident ':')? expression)*\n   */\n  args: function args() {\n    var args = new nodes.Arguments(),\n        keyword;\n\n    do {\n      // keyword\n      if ('ident' == this.peek().type && ':' == this.lookahead(2).type) {\n        keyword = this.next().val.string;\n        this.expect(':');\n        args.map[keyword] = this.expression(); // arg\n      } else {\n        args.push(this.expression());\n      }\n    } while (this.accept(','));\n\n    return args;\n  },\n\n  /**\n   * expression (',' expression)*\n   */\n  list: function list() {\n    var node = this.expression();\n\n    while (this.accept(',')) {\n      if (node.isList) {\n        list.push(this.expression());\n      } else {\n        var list = new nodes.Expression(true);\n        list.push(node);\n        list.push(this.expression());\n        node = list;\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   * negation+\n   */\n  expression: function expression() {\n    var node,\n        expr = new nodes.Expression();\n    this.state.push('expression');\n\n    while (node = this.negation()) {\n      if (!node) this.error('unexpected token {peek} in expression');\n      expr.push(node);\n    }\n\n    this.state.pop();\n\n    if (expr.nodes.length) {\n      expr.lineno = expr.nodes[0].lineno;\n      expr.column = expr.nodes[0].column;\n    }\n\n    return expr;\n  },\n\n  /**\n   *   'not' ternary\n   * | ternary\n   */\n  negation: function negation() {\n    if (this.accept('not')) {\n      return new nodes.UnaryOp('!', this.negation());\n    }\n\n    return this.ternary();\n  },\n\n  /**\n   * logical ('?' expression ':' expression)?\n   */\n  ternary: function ternary() {\n    var node = this.logical();\n\n    if (this.accept('?')) {\n      var trueExpr = this.expression();\n      this.expect(':');\n      var falseExpr = this.expression();\n      node = new nodes.Ternary(node, trueExpr, falseExpr);\n    }\n\n    return node;\n  },\n\n  /**\n   * typecheck (('&&' | '||') typecheck)*\n   */\n  logical: function logical() {\n    var op,\n        node = this.typecheck();\n\n    while (op = this.accept('&&') || this.accept('||')) {\n      node = new nodes.BinOp(op.type, node, this.typecheck());\n    }\n\n    return node;\n  },\n\n  /**\n   * equality ('is a' equality)*\n   */\n  typecheck: function typecheck() {\n    var op,\n        node = this.equality();\n\n    while (op = this.accept('is a')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.equality());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * in (('==' | '!=') in)*\n   */\n  equality: function equality() {\n    var op,\n        node = this.in();\n\n    while (op = this.accept('==') || this.accept('!=')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.in());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * relational ('in' relational)*\n   */\n  in: function _in() {\n    var node = this.relational();\n\n    while (this.accept('in')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"in\", missing left-hand operand');\n      node = new nodes.BinOp('in', node, this.relational());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * range (('>=' | '<=' | '>' | '<') range)*\n   */\n  relational: function relational() {\n    var op,\n        node = this.range();\n\n    while (op = this.accept('>=') || this.accept('<=') || this.accept('<') || this.accept('>')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.range());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * additive (('..' | '...') additive)*\n   */\n  range: function range() {\n    var op,\n        node = this.additive();\n\n    if (op = this.accept('...') || this.accept('..')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.val, node, this.additive());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * multiplicative (('+' | '-') multiplicative)*\n   */\n  additive: function additive() {\n    var op,\n        node = this.multiplicative();\n\n    while (op = this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = new nodes.BinOp(op.type, node, this.multiplicative());\n      this.operand = false;\n    }\n\n    return node;\n  },\n\n  /**\n   * defined (('**' | '*' | '/' | '%') defined)*\n   */\n  multiplicative: function multiplicative() {\n    var op,\n        node = this.defined();\n\n    while (op = this.accept('**') || this.accept('*') || this.accept('/') || this.accept('%')) {\n      this.operand = true;\n\n      if ('/' == op && this.inProperty && !this.parens) {\n        this.stash.push(new Token('literal', new nodes.Literal('/')));\n        this.operand = false;\n        return node;\n      } else {\n        if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n        node = new nodes.BinOp(op.type, node, this.defined());\n        this.operand = false;\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   *    unary 'is defined'\n   *  | unary\n   */\n  defined: function defined() {\n    var node = this.unary();\n\n    if (this.accept('is defined')) {\n      if (!node) this.error('illegal unary \"is defined\", missing left-hand operand');\n      node = new nodes.BinOp('is defined', node);\n    }\n\n    return node;\n  },\n\n  /**\n   *   ('!' | '~' | '+' | '-') unary\n   * | subscript\n   */\n  unary: function unary() {\n    var op, node;\n\n    if (op = this.accept('!') || this.accept('~') || this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = this.unary();\n      if (!node) this.error('illegal unary \"' + op + '\"');\n      node = new nodes.UnaryOp(op.type, node);\n      this.operand = false;\n      return node;\n    }\n\n    return this.subscript();\n  },\n\n  /**\n   *   member ('[' expression ']')+ '='?\n   * | member\n   */\n  subscript: function subscript() {\n    var node = this.member(),\n        id;\n\n    while (this.accept('[')) {\n      node = new nodes.BinOp('[]', node, this.expression());\n      this.expect(']');\n    } // TODO: TernaryOp :)\n\n\n    if (this.accept('=')) {\n      node.op += '=';\n      node.val = this.list(); // @block support\n\n      if (node.val.isEmpty) this.assignAtblock(node.val);\n    }\n\n    return node;\n  },\n\n  /**\n   *   primary ('.' id)+ '='?\n   * | primary\n   */\n  member: function member() {\n    var node = this.primary();\n\n    if (node) {\n      while (this.accept('.')) {\n        var id = new nodes.Ident(this.expect('ident').val.string);\n        node = new nodes.Member(node, id);\n      }\n\n      this.skipSpaces();\n\n      if (this.accept('=')) {\n        node.val = this.list(); // @block support\n\n        if (node.val.isEmpty) this.assignAtblock(node.val);\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   *   '{' '}'\n   * | '{' pair (ws pair)* '}'\n   */\n  object: function object() {\n    var obj = new nodes.Object(),\n        id,\n        val,\n        comma,\n        hash;\n    this.expect('{');\n    this.skipWhitespace();\n\n    while (!this.accept('}')) {\n      if (this.accept('comment') || this.accept('newline')) continue;\n      if (!comma) this.accept(',');\n      id = this.accept('ident') || this.accept('string');\n\n      if (!id) {\n        this.error('expected \"ident\" or \"string\", got {peek}');\n      }\n\n      hash = id.val.hash;\n      this.skipSpacesAndComments();\n      this.expect(':');\n      val = this.expression();\n      obj.setValue(hash, val);\n      obj.setKey(hash, id.val);\n      comma = this.accept(',');\n      this.skipWhitespace();\n    }\n\n    return obj;\n  },\n\n  /**\n   *   unit\n   * | null\n   * | color\n   * | string\n   * | ident\n   * | boolean\n   * | literal\n   * | object\n   * | atblock\n   * | atrule\n   * | '(' expression ')' '%'?\n   */\n  primary: function primary() {\n    var tok;\n    this.skipSpaces(); // Parenthesis\n\n    if (this.accept('(')) {\n      ++this.parens;\n      var expr = this.expression(),\n          paren = this.expect(')');\n      --this.parens;\n      if (this.accept('%')) expr.push(new nodes.Ident('%'));\n      tok = this.peek(); // (1 + 2)px, (1 + 2)em, etc.\n\n      if (!paren.space && 'ident' == tok.type && ~units.indexOf(tok.val.string)) {\n        expr.push(new nodes.Ident(tok.val.string));\n        this.next();\n      }\n\n      return expr;\n    }\n\n    tok = this.peek(); // Primitive\n\n    switch (tok.type) {\n      case 'null':\n      case 'unit':\n      case 'color':\n      case 'string':\n      case 'literal':\n      case 'boolean':\n      case 'comment':\n        return this.next().val;\n\n      case !this.cond && '{':\n        return this.object();\n\n      case 'atblock':\n        return this.atblock();\n      // property lookup\n\n      case 'atrule':\n        var id = new nodes.Ident(this.next().val);\n        id.property = true;\n        return id;\n\n      case 'ident':\n        return this.ident();\n\n      case 'function':\n        return tok.anonymous ? this.functionDefinition() : this.functionCall();\n    }\n  }\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/parser.js"],"names":["Lexer","require","nodes","Token","units","errors","cache","debug","lexer","selector","selectorTokens","pseudoSelectors","Parser","module","exports","str","options","self","getCache","hash","key","has","prefix","root","Root","state","stash","parens","css","pop","prevState","call","prototype","constructor","currentState","length","previousState","parse","block","parent","get","nodeName","peek","type","skipWhitespace","stmt","statement","accept","error","push","set","msg","val","undefined","toString","trim","ParseError","replace","next","expect","tok","line","lineno","column","lookahead","n","isSelectorToken","la","bracketed","indexOf","isPseudoSelector","name","lineContains","i","selectorToken","skip","tokens","skipNewlines","skipSpaces","skipSpacesAndComments","looksLikeFunctionDefinition","looksLikeSelector","fromProperty","node","brace","space","looksLikeAttributeSelector","looksLikeKeyframe","stateAllowsSelector","assignAtblock","expr","atblock","err","op","allowPostfix","If","expression","postfix","negate","id","each","Each","Block","keyframes","mozdocument","return","property","functionCall","isEmpty","scope","delim","comment","for","cond","Return","unless","if","token","item","elses","Atblock","atrule","Atrule","segments","selectorParts","map","join","selectorScope","null","supports","Supports","supportsCondition","supportsNegation","supportsOp","Expression","Literal","supportsFeature","feature","extend","selectors","sel","arr","Selector","optional","Extend","media","Media","queries","QueryList","query","Query","pred","Feature","string","predicate","interpolate","inProperty","list","calls","import","Import","charset","Charset","namespace","url","Namespace","Keyframes","literal","ident","assignment","_ident","subscript","operand","mixin","segs","star","prop","Property","ret","group","Group","isRoot","unshift","prefixed","raw","Ident","defined","BinOp","lookup","Ternary","function","out","functionDefinition","args","Call","withBlock","params","fn","Function","Params","rest","Arguments","keyword","isList","negation","UnaryOp","ternary","logical","trueExpr","falseExpr","typecheck","equality","in","relational","range","additive","multiplicative","unary","member","primary","Member","object","obj","Object","comma","setValue","setKey","paren","anonymous"],"mappings":"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","sourcesContent":["/*!\n * Stylus - Parser\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Lexer = require('./lexer')\n  , nodes = require('./nodes')\n  , Token = require('./token')\n  , units = require('./units')\n  , errors = require('./errors')\n  , cache = require('./cache');\n\n// debuggers\n\nvar debug = {\n    lexer: require('debug')('stylus:lexer')\n  , selector: require('debug')('stylus:parser:selector')\n};\n\n/**\n * Selector composite tokens.\n */\n\nvar selectorTokens = [\n    'ident'\n  , 'string'\n  , 'selector'\n  , 'function'\n  , 'comment'\n  , 'boolean'\n  , 'space'\n  , 'color'\n  , 'unit'\n  , 'for'\n  , 'in'\n  , '['\n  , ']'\n  , '('\n  , ')'\n  , '+'\n  , '-'\n  , '*'\n  , '*='\n  , '<'\n  , '>'\n  , '='\n  , ':'\n  , '&'\n  , '&&'\n  , '~'\n  , '{'\n  , '}'\n  , '.'\n  , '..'\n  , '/'\n];\n\n/**\n * CSS pseudo-classes and pseudo-elements.\n * See http://dev.w3.org/csswg/selectors4/\n */\n\nvar pseudoSelectors = [\n  // Logical Combinations\n    'matches'\n  , 'not'\n\n  // Linguistic Pseudo-classes\n  , 'dir'\n  , 'lang'\n\n  // Location Pseudo-classes\n  , 'any-link'\n  , 'link'\n  , 'visited'\n  , 'local-link'\n  , 'target'\n  , 'scope'\n\n  // User Action Pseudo-classes\n  , 'hover'\n  , 'active'\n  , 'focus'\n  , 'drop'\n\n  // Time-dimensional Pseudo-classes\n  , 'current'\n  , 'past'\n  , 'future'\n\n  // The Input Pseudo-classes\n  , 'enabled'\n  , 'disabled'\n  , 'read-only'\n  , 'read-write'\n  , 'placeholder-shown'\n  , 'checked'\n  , 'indeterminate'\n  , 'valid'\n  , 'invalid'\n  , 'in-range'\n  , 'out-of-range'\n  , 'required'\n  , 'optional'\n  , 'user-error'\n\n  // Tree-Structural pseudo-classes\n  , 'root'\n  , 'empty'\n  , 'blank'\n  , 'nth-child'\n  , 'nth-last-child'\n  , 'first-child'\n  , 'last-child'\n  , 'only-child'\n  , 'nth-of-type'\n  , 'nth-last-of-type'\n  , 'first-of-type'\n  , 'last-of-type'\n  , 'only-of-type'\n  , 'nth-match'\n  , 'nth-last-match'\n\n  // Grid-Structural Selectors\n  , 'nth-column'\n  , 'nth-last-column'\n\n  // Pseudo-elements\n  , 'first-line'\n  , 'first-letter'\n  , 'before'\n  , 'after'\n\n  // Non-standard\n  , 'selection'\n];\n\n/**\n * Initialize a new `Parser` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api private\n */\n\nvar Parser = module.exports = function Parser(str, options) {\n  var self = this;\n  options = options || {};\n  Parser.cache = Parser.cache || Parser.getCache(options);\n  this.hash = Parser.cache.key(str, options);\n  this.lexer = {};\n  if (!Parser.cache.has(this.hash)) {\n    this.lexer = new Lexer(str, options);\n  }\n  this.prefix = options.prefix || '';\n  this.root = options.root || new nodes.Root;\n  this.state = ['root'];\n  this.stash = [];\n  this.parens = 0;\n  this.css = 0;\n  this.state.pop = function(){\n    self.prevState = [].pop.call(this);\n  };\n};\n\n/**\n * Get cache instance.\n *\n * @param {Object} options\n * @return {Object}\n * @api private\n */\n\nParser.getCache = function(options) {\n  return false === options.cache\n    ? cache(false)\n    : cache(options.cache || 'memory', options);\n};\n\n/**\n * Parser prototype.\n */\n\nParser.prototype = {\n\n  /**\n   * Constructor.\n   */\n\n  constructor: Parser,\n\n  /**\n   * Return current state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  currentState: function() {\n    return this.state[this.state.length - 1];\n  },\n\n  /**\n   * Return previous state.\n   *\n   * @return {String}\n   * @api private\n   */\n\n  previousState: function() {\n    return this.state[this.state.length - 2];\n  },\n\n  /**\n   * Parse the input, then return the root node.\n   *\n   * @return {Node}\n   * @api private\n   */\n\n  parse: function(){\n    var block = this.parent = this.root;\n    if (Parser.cache.has(this.hash)) {\n      block = Parser.cache.get(this.hash);\n      // normalize cached imports\n      if ('block' == block.nodeName) block.constructor = nodes.Root;\n    } else {\n      while ('eos' != this.peek().type) {\n        this.skipWhitespace();\n        if ('eos' == this.peek().type) break;\n        var stmt = this.statement();\n        this.accept(';');\n        if (!stmt) this.error('unexpected token {peek}, not allowed at the root level');\n        block.push(stmt);\n      }\n      Parser.cache.set(this.hash, block);\n    }\n    return block;\n  },\n\n  /**\n   * Throw an `Error` with the given `msg`.\n   *\n   * @param {String} msg\n   * @api private\n   */\n\n  error: function(msg){\n    var type = this.peek().type\n      , val = undefined == this.peek().val\n        ? ''\n        : ' ' + this.peek().toString();\n    if (val.trim() == type.trim()) val = '';\n    throw new errors.ParseError(msg.replace('{peek}', '\"' + type + val + '\"'));\n  },\n\n  /**\n   * Accept the given token `type`, and return it,\n   * otherwise return `undefined`.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  accept: function(type){\n    if (type == this.peek().type) {\n      return this.next();\n    }\n  },\n\n  /**\n   * Expect token `type` and return it, throw otherwise.\n   *\n   * @param {String} type\n   * @return {Token}\n   * @api private\n   */\n\n  expect: function(type){\n    if (type != this.peek().type) {\n      this.error('expected \"' + type + '\", got {peek}');\n    }\n    return this.next();\n  },\n\n  /**\n   * Get the next token.\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  next: function() {\n    var tok = this.stash.length\n      ? this.stash.pop()\n      : this.lexer.next()\n      , line = tok.lineno\n      , column = tok.column || 1;\n\n    if (tok.val && tok.val.nodeName) {\n      tok.val.lineno = line;\n      tok.val.column = column;\n    }\n    nodes.lineno = line;\n    nodes.column = column;\n    debug.lexer('%s %s', tok.type, tok.val || '');\n    return tok;\n  },\n\n  /**\n   * Peek with lookahead(1).\n   *\n   * @return {Token}\n   * @api private\n   */\n\n  peek: function() {\n    return this.lexer.peek();\n  },\n\n  /**\n   * Lookahead `n` tokens.\n   *\n   * @param {Number} n\n   * @return {Token}\n   * @api private\n   */\n\n  lookahead: function(n){\n    return this.lexer.lookahead(n);\n  },\n\n  /**\n   * Check if the token at `n` is a valid selector token.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isSelectorToken: function(n) {\n    var la = this.lookahead(n).type;\n    switch (la) {\n      case 'for':\n        return this.bracketed;\n      case '[':\n        this.bracketed = true;\n        return true;\n      case ']':\n        this.bracketed = false;\n        return true;\n      default:\n        return ~selectorTokens.indexOf(la);\n    }\n  },\n\n  /**\n   * Check if the token at `n` is a pseudo selector.\n   *\n   * @param {Number} n\n   * @return {Boolean}\n   * @api private\n   */\n\n  isPseudoSelector: function(n){\n    var val = this.lookahead(n).val;\n    return val && ~pseudoSelectors.indexOf(val.name);\n  },\n\n  /**\n   * Check if the current line contains `type`.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   * @api private\n   */\n\n  lineContains: function(type){\n    var i = 1\n      , la;\n\n    while (la = this.lookahead(i++)) {\n      if (~['indent', 'outdent', 'newline', 'eos'].indexOf(la.type)) return;\n      if (type == la.type) return true;\n    }\n  },\n\n  /**\n   * Valid selector tokens.\n   */\n\n  selectorToken: function() {\n    if (this.isSelectorToken(1)) {\n      if ('{' == this.peek().type) {\n        // unclosed, must be a block\n        if (!this.lineContains('}')) return;\n        // check if ':' is within the braces.\n        // though not required by Stylus, chances\n        // are if someone is using {} they will\n        // use CSS-style props, helping us with\n        // the ambiguity in this case\n        var i = 0\n          , la;\n        while (la = this.lookahead(++i)) {\n          if ('}' == la.type) {\n            // Check empty block.\n            if (i == 2 || (i == 3 && this.lookahead(i - 1).type == 'space'))\n              return;\n            break;\n          }\n          if (':' == la.type) return;\n        }\n      }\n      return this.next();\n    }\n  },\n\n  /**\n   * Skip the given `tokens`.\n   *\n   * @param {Array} tokens\n   * @api private\n   */\n\n  skip: function(tokens) {\n    while (~tokens.indexOf(this.peek().type))\n      this.next();\n  },\n\n  /**\n   * Consume whitespace.\n   */\n\n  skipWhitespace: function() {\n    this.skip(['space', 'indent', 'outdent', 'newline']);\n  },\n\n  /**\n   * Consume newlines.\n   */\n\n  skipNewlines: function() {\n    while ('newline' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Consume spaces.\n   */\n\n  skipSpaces: function() {\n    while ('space' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Consume spaces and comments.\n   */\n\n  skipSpacesAndComments: function() {\n    while ('space' == this.peek().type\n      || 'comment' == this.peek().type)\n      this.next();\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a function definition, ie trailing\n   * `{` or indentation.\n   */\n\n  looksLikeFunctionDefinition: function(i) {\n    return 'indent' == this.lookahead(i).type\n      || '{' == this.lookahead(i).type;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a selector.\n   *\n   * @param {Boolean} [fromProperty]\n   * @return {Boolean}\n   * @api private\n   */\n\n  looksLikeSelector: function(fromProperty) {\n    var i = 1\n      , node\n      , brace;\n\n    // Real property\n    if (fromProperty && ':' == this.lookahead(i + 1).type\n      && (this.lookahead(i + 1).space || 'indent' == this.lookahead(i + 2).type))\n      return false;\n\n    // Assume selector when an ident is\n    // followed by a selector\n    while ('ident' == this.lookahead(i).type\n      && ('newline' == this.lookahead(i + 1).type\n         || ',' == this.lookahead(i + 1).type)) i += 2;\n\n    while (this.isSelectorToken(i)\n      || ',' == this.lookahead(i).type) {\n\n      if ('selector' == this.lookahead(i).type)\n        return true;\n\n      if ('&' == this.lookahead(i + 1).type)\n        return true;\n\n      // Hash values inside properties\n      if (\n        i > 1 &&\n        'ident' === this.lookahead(i - 1).type &&\n        '.' === this.lookahead(i).type &&\n        'ident' === this.lookahead(i + 1).type\n      ) {\n        while ((node = this.lookahead(i + 2))) {\n          if ([\n            'indent',\n            'outdent',\n            '{',\n            ';',\n            'eos',\n            'selector',\n            'media',\n            'if',\n            'atrule',\n            ')',\n            '}',\n            'unit',\n            '[',\n            'for',\n            'function'\n          ].indexOf(node.type) !== -1) {\n            if (node.type === '[') {\n              while ((node = this.lookahead(i + 3)) && node.type !== ']') {\n                if (~['.', 'unit'].indexOf(node.type)) {\n                  return false;\n                }\n                i += 1\n              }\n            } else {\n              if (this.isPseudoSelector(i + 2)) {\n                return true;\n              }\n\n              if (node.type === ')' && this.lookahead(i + 3) && this.lookahead(i + 3).type === '}') {\n                break;\n              }\n\n              return [\n                'outdent',\n                ';',\n                'eos',\n                'media',\n                'if',\n                'atrule',\n                ')',\n                '}',\n                'unit',\n                'for',\n                'function'\n              ].indexOf(node.type) === -1;\n            }\n          }\n\n          i += 1\n        }\n\n        return true;\n      }\n\n      if ('.' == this.lookahead(i).type && 'ident' == this.lookahead(i + 1).type) {\n        return true;\n      }\n\n      if ('*' == this.lookahead(i).type && 'newline' == this.lookahead(i + 1).type)\n        return true;\n\n      // Pseudo-elements\n      if (':' == this.lookahead(i).type\n        && ':' == this.lookahead(i + 1).type)\n        return true;\n\n      // #a after an ident and newline\n      if ('color' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i - 1).type)\n        return true;\n\n      if (this.looksLikeAttributeSelector(i))\n        return true;\n\n      if (('=' == this.lookahead(i).type || 'function' == this.lookahead(i).type)\n        && '{' == this.lookahead(i + 1).type)\n        return false;\n\n      // Hash values inside properties\n      if (':' == this.lookahead(i).type\n        && !this.isPseudoSelector(i + 1)\n        && this.lineContains('.'))\n        return false;\n\n      // the ':' token within braces signifies\n      // a selector. ex: \"foo{bar:'baz'}\"\n      if ('{' == this.lookahead(i).type) brace = true;\n      else if ('}' == this.lookahead(i).type) brace = false;\n      if (brace && ':' == this.lookahead(i).type) return true;\n\n      // '{' preceded by a space is considered a selector.\n      // for example \"foo{bar}{baz}\" may be a property,\n      // however \"foo{bar} {baz}\" is a selector\n      if ('space' == this.lookahead(i).type\n        && '{' == this.lookahead(i + 1).type)\n        return true;\n\n      // Assume pseudo selectors are NOT properties\n      // as 'td:th-child(1)' may look like a property\n      // and function call to the parser otherwise\n      if (':' == this.lookahead(i++).type\n        && !this.lookahead(i-1).space\n        && this.isPseudoSelector(i))\n        return true;\n\n      // Trailing space\n      if ('space' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i + 1).type\n        && '{' == this.lookahead(i + 2).type)\n        return true;\n\n      if (',' == this.lookahead(i).type\n        && 'newline' == this.lookahead(i + 1).type)\n        return true;\n    }\n\n    // Trailing comma\n    if (',' == this.lookahead(i).type\n      && 'newline' == this.lookahead(i + 1).type)\n      return true;\n\n    // Trailing brace\n    if ('{' == this.lookahead(i).type\n      && 'newline' == this.lookahead(i + 1).type)\n      return true;\n\n    // css-style mode, false on ; }\n    if (this.css) {\n      if (';' == this.lookahead(i).type ||\n          '}' == this.lookahead(i - 1).type)\n        return false;\n    }\n\n    // Trailing separators\n    while (!~[\n        'indent'\n      , 'outdent'\n      , 'newline'\n      , 'for'\n      , 'if'\n      , ';'\n      , '}'\n      , 'eos'].indexOf(this.lookahead(i).type))\n      ++i;\n\n    if ('indent' == this.lookahead(i).type)\n      return true;\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms an attribute selector.\n   */\n\n  looksLikeAttributeSelector: function(n) {\n    var type = this.lookahead(n).type;\n    if ('=' == type && this.bracketed) return true;\n    return ('ident' == type || 'string' == type)\n      && ']' == this.lookahead(n + 1).type\n      && ('newline' == this.lookahead(n + 2).type || this.isSelectorToken(n + 2))\n      && !this.lineContains(':')\n      && !this.lineContains('=');\n  },\n\n  /**\n   * Check if the following sequence of tokens\n   * forms a keyframe block.\n   */\n\n  looksLikeKeyframe: function() {\n    var i = 2\n      , type;\n    switch (this.lookahead(i).type) {\n      case '{':\n      case 'indent':\n      case ',':\n        return true;\n      case 'newline':\n        while ('unit' == this.lookahead(++i).type\n            || 'newline' == this.lookahead(i).type) ;\n        type = this.lookahead(i).type;\n        return 'indent' == type || '{' == type;\n    }\n  },\n\n  /**\n   * Check if the current state supports selectors.\n   */\n\n  stateAllowsSelector: function() {\n    switch (this.currentState()) {\n      case 'root':\n      case 'atblock':\n      case 'selector':\n      case 'conditional':\n      case 'function':\n      case 'atrule':\n      case 'for':\n        return true;\n    }\n  },\n\n  /**\n   * Try to assign @block to the node.\n   *\n   * @param {Expression} expr\n   * @private\n   */\n\n  assignAtblock: function(expr) {\n    try {\n      expr.push(this.atblock(expr));\n    } catch(err) {\n      this.error('invalid right-hand side operand in assignment, got {peek}');\n    }\n  },\n\n  /**\n   *   statement\n   * | statement 'if' expression\n   * | statement 'unless' expression\n   */\n\n  statement: function() {\n    var stmt = this.stmt()\n      , state = this.prevState\n      , block\n      , op;\n\n    // special-case statements since it\n    // is not an expression. We could\n    // implement postfix conditionals at\n    // the expression level, however they\n    // would then fail to enclose properties\n    if (this.allowPostfix) {\n      this.allowPostfix = false;\n      state = 'expression';\n    }\n\n    switch (state) {\n      case 'assignment':\n      case 'expression':\n      case 'function arguments':\n        while (op =\n             this.accept('if')\n          || this.accept('unless')\n          || this.accept('for')) {\n          switch (op.type) {\n            case 'if':\n            case 'unless':\n              stmt = new nodes.If(this.expression(), stmt);\n              stmt.postfix = true;\n              stmt.negate = 'unless' == op.type;\n              this.accept(';');\n              break;\n            case 'for':\n              var key\n                , val = this.id().name;\n              if (this.accept(',')) key = this.id().name;\n              this.expect('in');\n              var each = new nodes.Each(val, key, this.expression());\n              block = new nodes.Block(this.parent, each);\n              block.push(stmt);\n              each.block = block;\n              stmt = each;\n          }\n        }\n    }\n\n    return stmt;\n  },\n\n  /**\n   *    ident\n   *  | selector\n   *  | literal\n   *  | charset\n   *  | namespace\n   *  | import\n   *  | require\n   *  | media\n   *  | atrule\n   *  | scope\n   *  | keyframes\n   *  | mozdocument\n   *  | for\n   *  | if\n   *  | unless\n   *  | comment\n   *  | expression\n   *  | 'return' expression\n   */\n\n  stmt: function() {\n    var tok = this.peek(), selector;\n    switch (tok.type) {\n      case 'keyframes':\n        return this.keyframes();\n      case '-moz-document':\n        return this.mozdocument();\n      case 'comment':\n      case 'selector':\n      case 'literal':\n      case 'charset':\n      case 'namespace':\n      case 'import':\n      case 'require':\n      case 'extend':\n      case 'media':\n      case 'atrule':\n      case 'ident':\n      case 'scope':\n      case 'supports':\n      case 'unless':\n      case 'function':\n      case 'for':\n      case 'if':\n        return this[tok.type]();\n      case 'return':\n        return this.return();\n      case '{':\n        return this.property();\n      default:\n        // Contextual selectors\n        if (this.stateAllowsSelector()) {\n          switch (tok.type) {\n            case 'color':\n            case '~':\n            case '>':\n            case '<':\n            case ':':\n            case '&':\n            case '&&':\n            case '[':\n            case '.':\n            case '/':\n              selector = this.selector();\n              selector.column = tok.column;\n              selector.lineno = tok.lineno;\n              return selector;\n            // relative reference\n            case '..':\n              if ('/' == this.lookahead(2).type)\n                return this.selector();\n            case '+':\n              return 'function' == this.lookahead(2).type\n                ? this.functionCall()\n                : this.selector();\n            case '*':\n              return this.property();\n            // keyframe blocks (10%, 20% { ... })\n            case 'unit':\n              if (this.looksLikeKeyframe()) {\n                selector = this.selector();\n                selector.column = tok.column;\n                selector.lineno = tok.lineno;\n                return selector;\n              }\n            case '-':\n              if ('{' == this.lookahead(2).type)\n                return this.property();\n          }\n        }\n\n        // Expression fallback\n        var expr = this.expression();\n        if (expr.isEmpty) this.error('unexpected {peek}');\n        return expr;\n    }\n  },\n\n  /**\n   * indent (!outdent)+ outdent\n   */\n\n  block: function(node, scope) {\n    var delim\n      , stmt\n      , next\n      , block = this.parent = new nodes.Block(this.parent, node);\n\n    if (false === scope) block.scope = false;\n\n    this.accept('newline');\n\n    // css-style\n    if (this.accept('{')) {\n      this.css++;\n      delim = '}';\n      this.skipWhitespace();\n    } else {\n      delim = 'outdent';\n      this.expect('indent');\n    }\n\n    while (delim != this.peek().type) {\n      // css-style\n      if (this.css) {\n        if (this.accept('newline') || this.accept('indent')) continue;\n        stmt = this.statement();\n        this.accept(';');\n        this.skipWhitespace();\n      } else {\n        if (this.accept('newline')) continue;\n        // skip useless indents and comments\n        next = this.lookahead(2).type;\n        if ('indent' == this.peek().type\n          && ~['outdent', 'newline', 'comment'].indexOf(next)) {\n          this.skip(['indent', 'outdent']);\n          continue;\n        }\n        if ('eos' == this.peek().type) return block;\n        stmt = this.statement();\n        this.accept(';');\n      }\n      if (!stmt) this.error('unexpected token {peek} in block');\n      block.push(stmt);\n    }\n\n    // css-style\n    if (this.css) {\n      this.skipWhitespace();\n      this.expect('}');\n      this.skipSpaces();\n      this.css--;\n    } else {\n      this.expect('outdent');\n    }\n\n    this.parent = block.parent;\n    return block;\n  },\n\n  /**\n   * comment space*\n   */\n\n  comment: function(){\n    var node = this.next().val;\n    this.skipSpaces();\n    return node;\n  },\n\n  /**\n   * for val (',' key) in expr\n   */\n\n  for: function() {\n    this.expect('for');\n    var key\n      , val = this.id().name;\n    if (this.accept(',')) key = this.id().name;\n    this.expect('in');\n    this.state.push('for');\n    this.cond = true;\n    var each = new nodes.Each(val, key, this.expression());\n    this.cond = false;\n    each.block = this.block(each, false);\n    this.state.pop();\n    return each;\n  },\n\n  /**\n   * return expression\n   */\n\n  return: function() {\n    this.expect('return');\n    var expr = this.expression();\n    return expr.isEmpty\n      ? new nodes.Return\n      : new nodes.Return(expr);\n  },\n\n  /**\n   * unless expression block\n   */\n\n  unless: function() {\n    this.expect('unless');\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression(), true);\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * if expression block (else block)?\n   */\n\n  if: function() {\n    var token = this.expect('if');\n\n    this.state.push('conditional');\n    this.cond = true;\n    var node = new nodes.If(this.expression())\n      , cond\n      , block\n      , item;\n\n    node.column = token.column;\n\n    this.cond = false;\n    node.block = this.block(node, false);\n    this.skip(['newline', 'comment']);\n    while (this.accept('else')) {\n      token = this.accept('if');\n      if (token) {\n        this.cond = true;\n        cond = this.expression();\n        this.cond = false;\n        block = this.block(node, false);\n        item = new nodes.If(cond, block);\n\n        item.column = token.column;\n\n        node.elses.push(item);\n      } else {\n        node.elses.push(this.block(node, false));\n        break;\n      }\n      this.skip(['newline', 'comment']);\n    }\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * @block\n   *\n   * @param {Expression} [node]\n   */\n\n  atblock: function(node){\n    if (!node) this.expect('atblock');\n    node = new nodes.Atblock;\n    this.state.push('atblock');\n    node.block = this.block(node, false);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   * atrule selector? block?\n   */\n\n  atrule: function(){\n    var type = this.expect('atrule').val\n      , node = new nodes.Atrule(type)\n      , tok;\n    this.skipSpacesAndComments();\n    node.segments = this.selectorParts();\n    this.skipSpacesAndComments();\n    tok = this.peek().type;\n    if ('indent' == tok || '{' == tok || ('newline' == tok\n      && '{' == this.lookahead(2).type)) {\n      this.state.push('atrule');\n      node.block = this.block(node);\n      this.state.pop();\n    }\n    return node;\n  },\n\n  /**\n   * scope\n   */\n\n  scope: function(){\n    this.expect('scope');\n    var selector = this.selectorParts()\n      .map(function(selector) { return selector.val; })\n      .join('');\n    this.selectorScope = selector.trim();\n    return nodes.null;\n  },\n\n  /**\n   * supports\n   */\n\n  supports: function(){\n    this.expect('supports');\n    var node = new nodes.Supports(this.supportsCondition());\n    this.state.push('atrule');\n    node.block = this.block(node);\n    this.state.pop();\n    return node;\n  },\n\n  /**\n   *   supports negation\n   * | supports op\n   * | expression\n   */\n\n  supportsCondition: function(){\n    var node = this.supportsNegation()\n      || this.supportsOp();\n    if (!node) {\n      this.cond = true;\n      node = this.expression();\n      this.cond = false;\n    }\n    return node;\n  },\n\n  /**\n   * 'not' supports feature\n   */\n\n  supportsNegation: function(){\n    if (this.accept('not')) {\n      var node = new nodes.Expression;\n      node.push(new nodes.Literal('not'));\n      node.push(this.supportsFeature());\n      return node;\n    }\n  },\n\n  /**\n   * supports feature (('and' | 'or') supports feature)+\n   */\n\n  supportsOp: function(){\n    var feature = this.supportsFeature()\n      , op\n      , expr;\n    if (feature) {\n      expr = new nodes.Expression;\n      expr.push(feature);\n      while (op = this.accept('&&') || this.accept('||')) {\n        expr.push(new nodes.Literal('&&' == op.val ? 'and' : 'or'));\n        expr.push(this.supportsFeature());\n      }\n      return expr;\n    }\n  },\n\n  /**\n   *   ('(' supports condition ')')\n   * | feature\n   */\n\n  supportsFeature: function(){\n    this.skipSpacesAndComments();\n    if ('(' == this.peek().type) {\n      var la = this.lookahead(2).type;\n\n      if ('ident' == la || '{' == la) {\n        return this.feature();\n      } else {\n        this.expect('(');\n        var node = new nodes.Expression;\n        node.push(new nodes.Literal('('));\n        node.push(this.supportsCondition());\n        this.expect(')')\n        node.push(new nodes.Literal(')'));\n        this.skipSpacesAndComments();\n        return node;\n      }\n    }\n  },\n\n  /**\n   * extend\n   */\n\n  extend: function(){\n    var tok = this.expect('extend')\n      , selectors = []\n      , sel\n      , node\n      , arr;\n\n    do {\n      arr = this.selectorParts();\n\n      if (!arr.length) continue;\n\n      sel = new nodes.Selector(arr);\n      selectors.push(sel);\n\n      if ('!' !== this.peek().type) continue;\n\n      tok = this.lookahead(2);\n      if ('ident' !== tok.type || 'optional' !== tok.val.name) continue;\n\n      this.skip(['!', 'ident']);\n      sel.optional = true;\n    } while(this.accept(','));\n\n    node = new nodes.Extend(selectors);\n    node.lineno = tok.lineno;\n    node.column = tok.column;\n    return node;\n  },\n\n  /**\n   * media queries\n   */\n\n  media: function() {\n    this.expect('media');\n    this.state.push('atrule');\n    var media = new nodes.Media(this.queries());\n    media.block = this.block(media);\n    this.state.pop();\n    return media;\n  },\n\n  /**\n   * query (',' query)*\n   */\n\n  queries: function() {\n    var queries = new nodes.QueryList\n      , skip = ['comment', 'newline', 'space'];\n\n    do {\n      this.skip(skip);\n      queries.push(this.query());\n      this.skip(skip);\n    } while (this.accept(','));\n    return queries;\n  },\n\n  /**\n   *   expression\n   * | (ident | 'not')? ident ('and' feature)*\n   * | feature ('and' feature)*\n   */\n\n  query: function() {\n    var query = new nodes.Query\n      , expr\n      , pred\n      , id;\n\n    // hash values support\n    if ('ident' == this.peek().type\n      && ('.' == this.lookahead(2).type\n      || '[' == this.lookahead(2).type)) {\n      this.cond = true;\n      expr = this.expression();\n      this.cond = false;\n      query.push(new nodes.Feature(expr.nodes));\n      return query;\n    }\n\n    if (pred = this.accept('ident') || this.accept('not')) {\n      pred = new nodes.Literal(pred.val.string || pred.val);\n\n      this.skipSpacesAndComments();\n      if (id = this.accept('ident')) {\n        query.type = id.val;\n        query.predicate = pred;\n      } else {\n        query.type = pred;\n      }\n      this.skipSpacesAndComments();\n\n      if (!this.accept('&&')) return query;\n    }\n\n    do {\n      query.push(this.feature());\n    } while (this.accept('&&'));\n\n    return query;\n  },\n\n  /**\n   * '(' ident ( ':'? expression )? ')'\n   */\n\n  feature: function() {\n    this.skipSpacesAndComments();\n    this.expect('(');\n    this.skipSpacesAndComments();\n    var node = new nodes.Feature(this.interpolate());\n    this.skipSpacesAndComments();\n    this.accept(':')\n    this.skipSpacesAndComments();\n    this.inProperty = true;\n    node.expr = this.list();\n    this.inProperty = false;\n    this.skipSpacesAndComments();\n    this.expect(')');\n    this.skipSpacesAndComments();\n    return node;\n  },\n\n  /**\n   * @-moz-document call (',' call)* block\n   */\n\n  mozdocument: function(){\n    this.expect('-moz-document');\n    var mozdocument = new nodes.Atrule('-moz-document')\n      , calls = [];\n    do {\n      this.skipSpacesAndComments();\n      calls.push(this.functionCall());\n      this.skipSpacesAndComments();\n    } while (this.accept(','));\n    mozdocument.segments = [new nodes.Literal(calls.join(', '))];\n    this.state.push('atrule');\n    mozdocument.block = this.block(mozdocument, false);\n    this.state.pop();\n    return mozdocument;\n  },\n\n  /**\n   * import expression\n   */\n\n  import: function() {\n    this.expect('import');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), false);\n  },\n\n  /**\n   * require expression\n   */\n\n  require: function() {\n    this.expect('require');\n    this.allowPostfix = true;\n    return new nodes.Import(this.expression(), true);\n  },\n\n  /**\n   * charset string\n   */\n\n  charset: function() {\n    this.expect('charset');\n    var str = this.expect('string').val;\n    this.allowPostfix = true;\n    return new nodes.Charset(str);\n  },\n\n  /**\n   * namespace ident? (string | url)\n   */\n\n  namespace: function() {\n    var str\n      , prefix;\n    this.expect('namespace');\n\n    this.skipSpacesAndComments();\n    if (prefix = this.accept('ident')) {\n      prefix = prefix.val;\n    }\n    this.skipSpacesAndComments();\n\n    str = this.accept('string') || this.url();\n    this.allowPostfix = true;\n    return new nodes.Namespace(str, prefix);\n  },\n\n  /**\n   * keyframes name block\n   */\n\n  keyframes: function() {\n    var tok = this.expect('keyframes')\n      , keyframes;\n\n    this.skipSpacesAndComments();\n    keyframes = new nodes.Keyframes(this.selectorParts(), tok.val);\n    keyframes.column = tok.column;\n\n    this.skipSpacesAndComments();\n\n    // block\n    this.state.push('atrule');\n    keyframes.block = this.block(keyframes);\n    this.state.pop();\n\n    return keyframes;\n  },\n\n  /**\n   * literal\n   */\n\n  literal: function() {\n    return this.expect('literal').val;\n  },\n\n  /**\n   * ident space?\n   */\n\n  id: function() {\n    var tok = this.expect('ident');\n    this.accept('space');\n    return tok.val;\n  },\n\n  /**\n   *   ident\n   * | assignment\n   * | property\n   * | selector\n   */\n\n  ident: function() {\n    var i = 2\n      , la = this.lookahead(i).type;\n\n    while ('space' == la) la = this.lookahead(++i).type;\n\n    switch (la) {\n      // Assignment\n      case '=':\n      case '?=':\n      case '-=':\n      case '+=':\n      case '*=':\n      case '/=':\n      case '%=':\n        return this.assignment();\n      // Member\n      case '.':\n        if ('space' == this.lookahead(i - 1).type) return this.selector();\n        if (this._ident == this.peek()) return this.id();\n        while ('=' != this.lookahead(++i).type\n          && !~['[', ',', 'newline', 'indent', 'eos'].indexOf(this.lookahead(i).type)) ;\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Assignment []=\n      case '[':\n        if (this._ident == this.peek()) return this.id();\n        while (']' != this.lookahead(i++).type\n          && 'selector' != this.lookahead(i).type\n          && 'eos' != this.lookahead(i).type) ;\n        if ('=' == this.lookahead(i).type) {\n          this._ident = this.peek();\n          return this.expression();\n        } else if (this.looksLikeSelector() && this.stateAllowsSelector()) {\n          return this.selector();\n        }\n      // Operation\n      case '-':\n      case '+':\n      case '/':\n      case '*':\n      case '%':\n      case '**':\n      case '&&':\n      case '||':\n      case '>':\n      case '<':\n      case '>=':\n      case '<=':\n      case '!=':\n      case '==':\n      case '?':\n      case 'in':\n      case 'is a':\n      case 'is defined':\n        // Prevent cyclic .ident, return literal\n        if (this._ident == this.peek()) {\n          return this.id();\n        } else {\n          this._ident = this.peek();\n          switch (this.currentState()) {\n            // unary op or selector in property / for\n            case 'for':\n            case 'selector':\n              return this.property();\n            // Part of a selector\n            case 'root':\n            case 'atblock':\n            case 'atrule':\n              return '[' == la\n                ? this.subscript()\n                : this.selector();\n            case 'function':\n            case 'conditional':\n              return this.looksLikeSelector()\n                ? this.selector()\n                : this.expression();\n            // Do not disrupt the ident when an operand\n            default:\n              return this.operand\n                ? this.id()\n                : this.expression();\n          }\n        }\n      // Selector or property\n      default:\n        switch (this.currentState()) {\n          case 'root':\n            return this.selector();\n          case 'for':\n          case 'selector':\n          case 'function':\n          case 'conditional':\n          case 'atblock':\n          case 'atrule':\n            return this.property();\n          default:\n            var id = this.id();\n            if ('interpolation' == this.previousState()) id.mixin = true;\n            return id;\n        }\n    }\n  },\n\n  /**\n   * '*'? (ident | '{' expression '}')+\n   */\n\n  interpolate: function() {\n    var node\n      , segs = []\n      , star;\n\n    star = this.accept('*');\n    if (star) segs.push(new nodes.Literal('*'));\n\n    while (true) {\n      if (this.accept('{')) {\n        this.state.push('interpolation');\n        segs.push(this.expression());\n        this.expect('}');\n        this.state.pop();\n      } else if (node = this.accept('-')){\n        segs.push(new nodes.Literal('-'));\n      } else if (node = this.accept('ident')){\n        segs.push(node.val);\n      } else {\n        break;\n      }\n    }\n    if (!segs.length) this.expect('ident');\n    return segs;\n  },\n\n  /**\n   *   property ':'? expression\n   * | ident\n   */\n\n  property: function() {\n    if (this.looksLikeSelector(true)) return this.selector();\n\n    // property\n    var ident = this.interpolate()\n      , prop = new nodes.Property(ident)\n      , ret = prop;\n\n    // optional ':'\n    this.accept('space');\n    if (this.accept(':')) this.accept('space');\n\n    this.state.push('property');\n    this.inProperty = true;\n    prop.expr = this.list();\n    if (prop.expr.isEmpty) ret = ident[0];\n    this.inProperty = false;\n    this.allowPostfix = true;\n    this.state.pop();\n\n    // optional ';'\n    this.accept(';');\n\n    return ret;\n  },\n\n  /**\n   *   selector ',' selector\n   * | selector newline selector\n   * | selector block\n   */\n\n  selector: function() {\n    var arr\n      , group = new nodes.Group\n      , scope = this.selectorScope\n      , isRoot = 'root' == this.currentState()\n      , selector;\n\n    do {\n      // Clobber newline after ,\n      this.accept('newline');\n\n      arr = this.selectorParts();\n\n      // Push the selector\n      if (isRoot && scope) arr.unshift(new nodes.Literal(scope + ' '));\n      if (arr.length) {\n        selector = new nodes.Selector(arr);\n        selector.lineno = arr[0].lineno;\n        selector.column = arr[0].column;\n        group.push(selector);\n      }\n    } while (this.accept(',') || this.accept('newline'));\n\n    if ('selector-parts' == this.currentState()) return group.nodes;\n\n    this.state.push('selector');\n    group.block = this.block(group);\n    this.state.pop();\n\n    return group;\n  },\n\n  selectorParts: function(){\n    var tok\n      , arr = [];\n\n    // Selector candidates,\n    // stitched together to\n    // form a selector.\n    while (tok = this.selectorToken()) {\n      debug.selector('%s', tok);\n      // Selector component\n      switch (tok.type) {\n        case '{':\n          this.skipSpaces();\n          var expr = this.expression();\n          this.skipSpaces();\n          this.expect('}');\n          arr.push(expr);\n          break;\n        case this.prefix && '.':\n          var literal = new nodes.Literal(tok.val + this.prefix);\n          literal.prefixed = true;\n          arr.push(literal);\n          break;\n        case 'comment':\n          // ignore comments\n          break;\n        case 'color':\n        case 'unit':\n          arr.push(new nodes.Literal(tok.val.raw));\n          break;\n        case 'space':\n          arr.push(new nodes.Literal(' '));\n          break;\n        case 'function':\n          arr.push(new nodes.Literal(tok.val.name + '('));\n          break;\n        case 'ident':\n          arr.push(new nodes.Literal(tok.val.name || tok.val.string));\n          break;\n        default:\n          arr.push(new nodes.Literal(tok.val));\n          if (tok.space) arr.push(new nodes.Literal(' '));\n      }\n    }\n\n    return arr;\n  },\n\n  /**\n   * ident ('=' | '?=') expression\n   */\n\n  assignment: function() {\n    var\n      op,\n      node,\n      ident = this.id(),\n      name = ident.name;\n\n    if (op =\n         this.accept('=')\n      || this.accept('?=')\n      || this.accept('+=')\n      || this.accept('-=')\n      || this.accept('*=')\n      || this.accept('/=')\n      || this.accept('%=')) {\n      this.state.push('assignment');\n      var expr = this.list();\n      // @block support\n      if (expr.isEmpty) this.assignAtblock(expr);\n      node = new nodes.Ident(name, expr);\n\n      node.lineno = ident.lineno;\n      node.column = ident.column;\n\n      this.state.pop();\n\n      switch (op.type) {\n        case '?=':\n          var defined = new nodes.BinOp('is defined', node)\n            , lookup = new nodes.Expression;\n          lookup.push(new nodes.Ident(name));\n          node = new nodes.Ternary(defined, lookup, node);\n          break;\n        case '+=':\n        case '-=':\n        case '*=':\n        case '/=':\n        case '%=':\n          node.val = new nodes.BinOp(op.type[0], new nodes.Ident(name), expr);\n          break;\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   *   definition\n   * | call\n   */\n\n  function: function() {\n    var parens = 1\n      , i = 2\n      , tok;\n\n    // Lookahead and determine if we are dealing\n    // with a function call or definition. Here\n    // we pair parens to prevent false negatives\n    out:\n    while (tok = this.lookahead(i++)) {\n      switch (tok.type) {\n        case 'function':\n        case '(':\n          ++parens;\n          break;\n        case ')':\n          if (!--parens) break out;\n          break;\n        case 'eos':\n          this.error('failed to find closing paren \")\"');\n      }\n    }\n\n    // Definition or call\n    switch (this.currentState()) {\n      case 'expression':\n        return this.functionCall();\n      default:\n        return this.looksLikeFunctionDefinition(i)\n          ? this.functionDefinition()\n          : this.expression();\n    }\n  },\n\n  /**\n   * url '(' (expression | urlchars)+ ')'\n   */\n\n  url: function() {\n    this.expect('function');\n    this.state.push('function arguments');\n    var args = this.args();\n    this.expect(')');\n    this.state.pop();\n    return new nodes.Call('url', args);\n  },\n\n  /**\n   * '+'? ident '(' expression ')' block?\n   */\n\n  functionCall: function() {\n    var withBlock = this.accept('+');\n    if ('url' == this.peek().val.name) return this.url();\n\n    var tok = this.expect('function').val;\n    var name = tok.name;\n\n    this.state.push('function arguments');\n    this.parens++;\n    var args = this.args();\n    this.expect(')');\n    this.parens--;\n    this.state.pop();\n    var call = new nodes.Call(name, args);\n\n    call.column = tok.column;\n    call.lineno = tok.lineno;\n\n    if (withBlock) {\n      this.state.push('function');\n      call.block = this.block(call);\n      this.state.pop();\n    }\n    return call;\n  },\n\n  /**\n   * ident '(' params ')' block\n   */\n\n  functionDefinition: function() {\n    var\n      tok = this.expect('function'),\n      name = tok.val.name;\n\n    // params\n    this.state.push('function params');\n    this.skipWhitespace();\n    var params = this.params();\n    this.skipWhitespace();\n    this.expect(')');\n    this.state.pop();\n\n    // Body\n    this.state.push('function');\n    var fn = new nodes.Function(name, params);\n\n    fn.column = tok.column;\n    fn.lineno = tok.lineno;\n\n    fn.block = this.block(fn);\n    this.state.pop();\n    return new nodes.Ident(name, fn);\n  },\n\n  /**\n   *   ident\n   * | ident '...'\n   * | ident '=' expression\n   * | ident ',' ident\n   */\n\n  params: function() {\n    var tok\n      , node\n      , params = new nodes.Params;\n    while (tok = this.accept('ident')) {\n      this.accept('space');\n      params.push(node = tok.val);\n      if (this.accept('...')) {\n        node.rest = true;\n      } else if (this.accept('=')) {\n        node.val = this.expression();\n      }\n      this.skipWhitespace();\n      this.accept(',');\n      this.skipWhitespace();\n    }\n    return params;\n  },\n\n  /**\n   * (ident ':')? expression (',' (ident ':')? expression)*\n   */\n\n  args: function() {\n    var args = new nodes.Arguments\n      , keyword;\n\n    do {\n      // keyword\n      if ('ident' == this.peek().type && ':' == this.lookahead(2).type) {\n        keyword = this.next().val.string;\n        this.expect(':');\n        args.map[keyword] = this.expression();\n      // arg\n      } else {\n        args.push(this.expression());\n      }\n    } while (this.accept(','));\n\n    return args;\n  },\n\n  /**\n   * expression (',' expression)*\n   */\n\n  list: function() {\n    var node = this.expression();\n\n    while (this.accept(',')) {\n      if (node.isList) {\n        list.push(this.expression());\n      } else {\n        var list = new nodes.Expression(true);\n        list.push(node);\n        list.push(this.expression());\n        node = list;\n      }\n    }\n    return node;\n  },\n\n  /**\n   * negation+\n   */\n\n  expression: function() {\n    var node\n      , expr = new nodes.Expression;\n    this.state.push('expression');\n    while (node = this.negation()) {\n      if (!node) this.error('unexpected token {peek} in expression');\n      expr.push(node);\n    }\n    this.state.pop();\n    if (expr.nodes.length) {\n      expr.lineno = expr.nodes[0].lineno;\n      expr.column = expr.nodes[0].column;\n    }\n    return expr;\n  },\n\n  /**\n   *   'not' ternary\n   * | ternary\n   */\n\n  negation: function() {\n    if (this.accept('not')) {\n      return new nodes.UnaryOp('!', this.negation());\n    }\n    return this.ternary();\n  },\n\n  /**\n   * logical ('?' expression ':' expression)?\n   */\n\n  ternary: function() {\n    var node = this.logical();\n    if (this.accept('?')) {\n      var trueExpr = this.expression();\n      this.expect(':');\n      var falseExpr = this.expression();\n      node = new nodes.Ternary(node, trueExpr, falseExpr);\n    }\n    return node;\n  },\n\n  /**\n   * typecheck (('&&' | '||') typecheck)*\n   */\n\n  logical: function() {\n    var op\n      , node = this.typecheck();\n    while (op = this.accept('&&') || this.accept('||')) {\n      node = new nodes.BinOp(op.type, node, this.typecheck());\n    }\n    return node;\n  },\n\n  /**\n   * equality ('is a' equality)*\n   */\n\n  typecheck: function() {\n    var op\n      , node = this.equality();\n    while (op = this.accept('is a')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.equality());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * in (('==' | '!=') in)*\n   */\n\n  equality: function() {\n    var op\n      , node = this.in();\n    while (op = this.accept('==') || this.accept('!=')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.in());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * relational ('in' relational)*\n   */\n\n  in: function() {\n    var node = this.relational();\n    while (this.accept('in')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"in\", missing left-hand operand');\n      node = new nodes.BinOp('in', node, this.relational());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * range (('>=' | '<=' | '>' | '<') range)*\n   */\n\n  relational: function() {\n    var op\n      , node = this.range();\n    while (op =\n         this.accept('>=')\n      || this.accept('<=')\n      || this.accept('<')\n      || this.accept('>')\n      ) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.type, node, this.range());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * additive (('..' | '...') additive)*\n   */\n\n  range: function() {\n    var op\n      , node = this.additive();\n    if (op = this.accept('...') || this.accept('..')) {\n      this.operand = true;\n      if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n      node = new nodes.BinOp(op.val, node, this.additive());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * multiplicative (('+' | '-') multiplicative)*\n   */\n\n  additive: function() {\n    var op\n      , node = this.multiplicative();\n    while (op = this.accept('+') || this.accept('-')) {\n      this.operand = true;\n      node = new nodes.BinOp(op.type, node, this.multiplicative());\n      this.operand = false;\n    }\n    return node;\n  },\n\n  /**\n   * defined (('**' | '*' | '/' | '%') defined)*\n   */\n\n  multiplicative: function() {\n    var op\n      , node = this.defined();\n    while (op =\n         this.accept('**')\n      || this.accept('*')\n      || this.accept('/')\n      || this.accept('%')) {\n      this.operand = true;\n      if ('/' == op && this.inProperty && !this.parens) {\n        this.stash.push(new Token('literal', new nodes.Literal('/')));\n        this.operand = false;\n        return node;\n      } else {\n        if (!node) this.error('illegal unary \"' + op + '\", missing left-hand operand');\n        node = new nodes.BinOp(op.type, node, this.defined());\n        this.operand = false;\n      }\n    }\n    return node;\n  },\n\n  /**\n   *    unary 'is defined'\n   *  | unary\n   */\n\n  defined: function() {\n    var node = this.unary();\n    if (this.accept('is defined')) {\n      if (!node) this.error('illegal unary \"is defined\", missing left-hand operand');\n      node = new nodes.BinOp('is defined', node);\n    }\n    return node;\n  },\n\n  /**\n   *   ('!' | '~' | '+' | '-') unary\n   * | subscript\n   */\n\n  unary: function() {\n    var op\n      , node;\n    if (op =\n         this.accept('!')\n      || this.accept('~')\n      || this.accept('+')\n      || this.accept('-')) {\n      this.operand = true;\n      node = this.unary();\n      if (!node) this.error('illegal unary \"' + op + '\"');\n      node = new nodes.UnaryOp(op.type, node);\n      this.operand = false;\n      return node;\n    }\n    return this.subscript();\n  },\n\n  /**\n   *   member ('[' expression ']')+ '='?\n   * | member\n   */\n\n  subscript: function() {\n    var node = this.member()\n      , id;\n    while (this.accept('[')) {\n      node = new nodes.BinOp('[]', node, this.expression());\n      this.expect(']');\n    }\n    // TODO: TernaryOp :)\n    if (this.accept('=')) {\n      node.op += '=';\n      node.val = this.list();\n      // @block support\n      if (node.val.isEmpty) this.assignAtblock(node.val);\n    }\n    return node;\n  },\n\n  /**\n   *   primary ('.' id)+ '='?\n   * | primary\n   */\n\n  member: function() {\n    var node = this.primary();\n    if (node) {\n      while (this.accept('.')) {\n        var id = new nodes.Ident(this.expect('ident').val.string);\n        node = new nodes.Member(node, id);\n      }\n      this.skipSpaces();\n      if (this.accept('=')) {\n        node.val = this.list();\n        // @block support\n        if (node.val.isEmpty) this.assignAtblock(node.val);\n      }\n    }\n    return node;\n  },\n\n  /**\n   *   '{' '}'\n   * | '{' pair (ws pair)* '}'\n   */\n\n  object: function(){\n    var obj = new nodes.Object\n      , id, val, comma, hash;\n    this.expect('{');\n    this.skipWhitespace();\n\n    while (!this.accept('}')) {\n      if (this.accept('comment')\n        || this.accept('newline')) continue;\n\n      if (!comma) this.accept(',');\n      id = this.accept('ident') || this.accept('string');\n\n      if (!id) {\n        this.error('expected \"ident\" or \"string\", got {peek}');\n      }\n\n      hash = id.val.hash;\n\n      this.skipSpacesAndComments();\n      this.expect(':');\n\n      val = this.expression();\n\n      obj.setValue(hash, val);\n      obj.setKey(hash, id.val);\n\n      comma = this.accept(',');\n      this.skipWhitespace();\n    }\n\n    return obj;\n  },\n\n  /**\n   *   unit\n   * | null\n   * | color\n   * | string\n   * | ident\n   * | boolean\n   * | literal\n   * | object\n   * | atblock\n   * | atrule\n   * | '(' expression ')' '%'?\n   */\n\n  primary: function() {\n    var tok;\n    this.skipSpaces();\n\n    // Parenthesis\n    if (this.accept('(')) {\n      ++this.parens;\n      var expr = this.expression()\n        , paren = this.expect(')');\n      --this.parens;\n      if (this.accept('%')) expr.push(new nodes.Ident('%'));\n      tok = this.peek();\n      // (1 + 2)px, (1 + 2)em, etc.\n      if (!paren.space\n        && 'ident' == tok.type\n        && ~units.indexOf(tok.val.string)) {\n        expr.push(new nodes.Ident(tok.val.string));\n        this.next();\n      }\n      return expr;\n    }\n\n    tok = this.peek();\n\n    // Primitive\n    switch (tok.type) {\n      case 'null':\n      case 'unit':\n      case 'color':\n      case 'string':\n      case 'literal':\n      case 'boolean':\n      case 'comment':\n        return this.next().val;\n      case !this.cond && '{':\n        return this.object();\n      case 'atblock':\n        return this.atblock();\n      // property lookup\n      case 'atrule':\n        var id = new nodes.Ident(this.next().val);\n        id.property = true;\n        return id;\n      case 'ident':\n        return this.ident();\n      case 'function':\n        return tok.anonymous\n          ? this.functionDefinition()\n          : this.functionCall();\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}