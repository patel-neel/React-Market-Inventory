{"ast":null,"code":"/*!\n * Stylus - Stack\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Initialize a new `Stack`.\n *\n * @api private\n */\nvar Stack = module.exports = function Stack() {\n  Array.apply(this, arguments);\n};\n/**\n * Inherit from `Array.prototype`.\n */\n\n\nStack.prototype.__proto__ = Array.prototype;\n/**\n * Push the given `frame`.\n *\n * @param {Frame} frame\n * @api public\n */\n\nStack.prototype.push = function (frame) {\n  frame.stack = this;\n  frame.parent = this.currentFrame;\n  return [].push.apply(this, arguments);\n};\n/**\n * Return the current stack `Frame`.\n *\n * @return {Frame}\n * @api private\n */\n\n\nStack.prototype.__defineGetter__('currentFrame', function () {\n  return this[this.length - 1];\n});\n/**\n * Lookup stack frame for the given `block`.\n *\n * @param {Block} block\n * @return {Frame}\n * @api private\n */\n\n\nStack.prototype.getBlockFrame = function (block) {\n  for (var i = 0; i < this.length; ++i) {\n    if (block == this[i].block) {\n      return this[i];\n    }\n  }\n};\n/**\n * Lookup the given local variable `name`, relative\n * to the lexical scope of the current frame's `Block`.\n *\n * When the result of a lookup is an identifier\n * a recursive lookup is performed, defaulting to\n * returning the identifier itself.\n *\n * @param {String} name\n * @return {Node}\n * @api private\n */\n\n\nStack.prototype.lookup = function (name) {\n  var block = this.currentFrame.block,\n      val,\n      ret;\n\n  do {\n    var frame = this.getBlockFrame(block);\n\n    if (frame && (val = frame.lookup(name))) {\n      return val;\n    }\n  } while (block = block.parent);\n};\n/**\n * Custom inspect.\n *\n * @return {String}\n * @api private\n */\n\n\nStack.prototype.inspect = function () {\n  return this.reverse().map(function (frame) {\n    return frame.inspect();\n  }).join('\\n');\n};\n/**\n * Return stack string formatted as:\n *\n *   at <context> (<filename>:<lineno>:<column>)\n *\n * @return {String}\n * @api private\n */\n\n\nStack.prototype.toString = function () {\n  var block,\n      node,\n      buf = [],\n      location,\n      len = this.length;\n\n  while (len--) {\n    block = this[len].block;\n\n    if (node = block.node) {\n      location = '(' + node.filename + ':' + (node.lineno + 1) + ':' + node.column + ')';\n\n      switch (node.nodeName) {\n        case 'function':\n          buf.push('    at ' + node.name + '() ' + location);\n          break;\n\n        case 'group':\n          buf.push('    at \"' + node.nodes[0].val + '\" ' + location);\n          break;\n      }\n    }\n  }\n\n  return buf.join('\\n');\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/stack/index.js"],"names":["Stack","module","exports","Array","apply","arguments","prototype","__proto__","push","frame","stack","parent","currentFrame","__defineGetter__","length","getBlockFrame","block","i","lookup","name","val","ret","inspect","reverse","map","join","toString","node","buf","location","len","filename","lineno","column","nodeName","nodes"],"mappings":"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","sourcesContent":["\n/*!\n * Stylus - Stack\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Initialize a new `Stack`.\n *\n * @api private\n */\n\nvar Stack = module.exports = function Stack() {\n  Array.apply(this, arguments);\n};\n\n/**\n * Inherit from `Array.prototype`.\n */\n\nStack.prototype.__proto__ = Array.prototype;\n\n/**\n * Push the given `frame`.\n *\n * @param {Frame} frame\n * @api public\n */\n\nStack.prototype.push = function(frame){\n  frame.stack = this;\n  frame.parent = this.currentFrame;\n  return [].push.apply(this, arguments);\n};\n\n/**\n * Return the current stack `Frame`.\n *\n * @return {Frame}\n * @api private\n */\n\nStack.prototype.__defineGetter__('currentFrame', function(){\n  return this[this.length - 1];\n});\n\n/**\n * Lookup stack frame for the given `block`.\n *\n * @param {Block} block\n * @return {Frame}\n * @api private\n */\n\nStack.prototype.getBlockFrame = function(block){\n  for (var i = 0; i < this.length; ++i) {\n    if (block == this[i].block) {\n      return this[i];\n    }\n  }\n};\n\n/**\n * Lookup the given local variable `name`, relative\n * to the lexical scope of the current frame's `Block`.\n *\n * When the result of a lookup is an identifier\n * a recursive lookup is performed, defaulting to\n * returning the identifier itself.\n *\n * @param {String} name\n * @return {Node}\n * @api private\n */\n\nStack.prototype.lookup = function(name){\n  var block = this.currentFrame.block\n    , val\n    , ret;\n\n  do {\n    var frame = this.getBlockFrame(block);\n    if (frame && (val = frame.lookup(name))) {\n      return val;\n    }\n  } while (block = block.parent);\n};\n\n/**\n * Custom inspect.\n *\n * @return {String}\n * @api private\n */\n\nStack.prototype.inspect = function(){\n  return this.reverse().map(function(frame){\n    return frame.inspect();\n  }).join('\\n');\n};\n\n/**\n * Return stack string formatted as:\n *\n *   at <context> (<filename>:<lineno>:<column>)\n *\n * @return {String}\n * @api private\n */\n\nStack.prototype.toString = function(){\n  var block\n    , node\n    , buf = []\n    , location\n    , len = this.length;\n\n  while (len--) {\n    block = this[len].block;\n    if (node = block.node) {\n      location = '(' + node.filename + ':' + (node.lineno + 1) + ':' + node.column + ')';\n      switch (node.nodeName) {\n        case 'function':\n          buf.push('    at ' + node.name + '() ' + location);\n          break;\n        case 'group':\n          buf.push('    at \"' + node.nodes[0].val + '\" ' + location);\n          break;\n      }\n    }\n  }\n\n  return buf.join('\\n');\n};\n"]},"metadata":{},"sourceType":"script"}