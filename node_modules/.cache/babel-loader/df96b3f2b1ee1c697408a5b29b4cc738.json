{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes'),\n    convert = require('./convert-angle');\n/**\n * Return the arctangent of the given `value`.\n *\n * @param {Double} trigValue\n * @param {Unit} output \n * @return {Unit}\n * @api public\n */\n\n\nmodule.exports = function atan(trigValue, output) {\n  var output = typeof output !== 'undefined' ? output : 'deg';\n  var value = Math.atan(trigValue);\n  var m = Math.pow(10, 9);\n  var convertedValue = convert(value, output);\n  convertedValue = Math.round(convertedValue * m) / m;\n  return new nodes.Unit(convertedValue, output);\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/atan.js"],"names":["utils","require","nodes","convert","module","exports","atan","trigValue","output","value","Math","m","pow","convertedValue","round","Unit"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEGE,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAFpB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcC,SAAd,EAAyBC,MAAzB,EAAiC;AACjD,MAAIA,MAAM,GAAG,OAAOA,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,KAAtD;AACA,MAAIC,KAAK,GAAGC,IAAI,CAACJ,IAAL,CAAUC,SAAV,CAAZ;AACA,MAAII,CAAC,GAAGD,IAAI,CAACE,GAAL,CAAS,EAAT,EAAa,CAAb,CAAR;AACA,MAAIC,cAAc,GAAGV,OAAO,CAACM,KAAD,EAAQD,MAAR,CAA5B;AACAK,EAAAA,cAAc,GAAGH,IAAI,CAACI,KAAL,CAAWD,cAAc,GAAGF,CAA5B,IAAiCA,CAAlD;AACC,SAAO,IAAIT,KAAK,CAACa,IAAV,CAAeF,cAAf,EAA+BL,MAA/B,CAAP;AACD,CAPD","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n\t, convert = require('./convert-angle');\n\n/**\n * Return the arctangent of the given `value`.\n *\n * @param {Double} trigValue\n * @param {Unit} output \n * @return {Unit}\n * @api public\n */\n\nmodule.exports = function atan(trigValue, output) {\n\tvar output = typeof output !== 'undefined' ? output : 'deg';\n\tvar value = Math.atan(trigValue) ;\n\tvar m = Math.pow(10, 9);\n\tvar convertedValue = convert(value, output);\n\tconvertedValue = Math.round(convertedValue * m) / m;\n  return new nodes.Unit(convertedValue, output);\n};\n"]},"metadata":{},"sourceType":"script"}