{"ast":null,"code":"/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar utils = require('../utils'),\n    nodes = require('../nodes'),\n    Buffer = require('safer-buffer').Buffer,\n    fs = require('fs'),\n    path = require('path'),\n    sax = require('sax');\n/**\n * Initialize a new `Image` with the given `ctx` and `path.\n *\n * @param {Evaluator} ctx\n * @param {String} path\n * @api private\n */\n\n\nvar Image = module.exports = function Image(ctx, path) {\n  this.ctx = ctx;\n  this.path = utils.lookup(path, ctx.paths);\n  if (!this.path) throw new Error('failed to locate file ' + path);\n};\n/**\n * Open the image for reading.\n *\n * @api private\n */\n\n\nImage.prototype.open = function () {\n  this.fd = fs.openSync(this.path, 'r');\n  this.length = fs.fstatSync(this.fd).size;\n  this.extname = path.extname(this.path).slice(1);\n};\n/**\n * Close the file.\n *\n * @api private\n */\n\n\nImage.prototype.close = function () {\n  if (this.fd) fs.closeSync(this.fd);\n};\n/**\n * Return the type of image, supports:\n *\n *  - gif\n *  - png\n *  - jpeg\n *  - svg\n *\n * @return {String}\n * @api private\n */\n\n\nImage.prototype.type = function () {\n  var type,\n      buf = Buffer.alloc(4);\n  fs.readSync(this.fd, buf, 0, 4, 0); // GIF\n\n  if (0x47 == buf[0] && 0x49 == buf[1] && 0x46 == buf[2]) type = 'gif'; // PNG\n  else if (0x50 == buf[1] && 0x4E == buf[2] && 0x47 == buf[3]) type = 'png'; // JPEG\n  else if (0xff == buf[0] && 0xd8 == buf[1]) type = 'jpeg'; // SVG\n  else if ('svg' == this.extname) type = this.extname;\n  return type;\n};\n/**\n * Return image dimensions `[width, height]`.\n *\n * @return {Array}\n * @api private\n */\n\n\nImage.prototype.size = function () {\n  var type = this.type(),\n      width,\n      height,\n      buf,\n      offset,\n      blockSize,\n      parser;\n\n  function uint16(b) {\n    return b[1] << 8 | b[0];\n  }\n\n  function uint32(b) {\n    return b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3];\n  } // Determine dimensions\n\n\n  switch (type) {\n    case 'jpeg':\n      buf = Buffer.alloc(this.length);\n      fs.readSync(this.fd, buf, 0, this.length, 0);\n      offset = 4;\n      blockSize = buf[offset] << 8 | buf[offset + 1];\n\n      while (offset < this.length) {\n        offset += blockSize;\n        if (offset >= this.length || 0xff != buf[offset]) break; // SOF0 or SOF2 (progressive)\n\n        if (0xc0 == buf[offset + 1] || 0xc2 == buf[offset + 1]) {\n          height = buf[offset + 5] << 8 | buf[offset + 6];\n          width = buf[offset + 7] << 8 | buf[offset + 8];\n        } else {\n          offset += 2;\n          blockSize = buf[offset] << 8 | buf[offset + 1];\n        }\n      }\n\n      break;\n\n    case 'png':\n      buf = Buffer.alloc(8); // IHDR chunk width / height uint32_t big-endian\n\n      fs.readSync(this.fd, buf, 0, 8, 16);\n      width = uint32(buf);\n      height = uint32(buf.slice(4, 8));\n      break;\n\n    case 'gif':\n      buf = Buffer.alloc(4); // width / height uint16_t little-endian\n\n      fs.readSync(this.fd, buf, 0, 4, 6);\n      width = uint16(buf);\n      height = uint16(buf.slice(2, 4));\n      break;\n\n    case 'svg':\n      offset = Math.min(this.length, 1024);\n      buf = Buffer.alloc(offset);\n      fs.readSync(this.fd, buf, 0, offset, 0);\n      buf = buf.toString('utf8');\n      parser = sax.parser(true);\n\n      parser.onopentag = function (node) {\n        if ('svg' == node.name && node.attributes.width && node.attributes.height) {\n          width = parseInt(node.attributes.width, 10);\n          height = parseInt(node.attributes.height, 10);\n        }\n      };\n\n      parser.write(buf).close();\n      break;\n  }\n\n  if ('number' != typeof width) throw new Error('failed to find width of \"' + this.path + '\"');\n  if ('number' != typeof height) throw new Error('failed to find height of \"' + this.path + '\"');\n  return [width, height];\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/image.js"],"names":["utils","require","nodes","Buffer","fs","path","sax","Image","module","exports","ctx","lookup","paths","Error","prototype","open","fd","openSync","length","fstatSync","size","extname","slice","close","closeSync","type","buf","alloc","readSync","width","height","offset","blockSize","parser","uint16","b","uint32","Math","min","toString","onopentag","node","name","attributes","parseInt","write"],"mappings":"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","sourcesContent":["\n\n/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils')\n  , nodes = require('../nodes')\n  , Buffer = require('safer-buffer').Buffer\n  , fs = require('fs')\n  , path = require('path')\n  , sax = require('sax');\n\n/**\n * Initialize a new `Image` with the given `ctx` and `path.\n *\n * @param {Evaluator} ctx\n * @param {String} path\n * @api private\n */\n\nvar Image = module.exports = function Image(ctx, path) {\n  this.ctx = ctx;\n  this.path = utils.lookup(path, ctx.paths);\n  if (!this.path) throw new Error('failed to locate file ' + path);\n};\n\n/**\n * Open the image for reading.\n *\n * @api private\n */\n\nImage.prototype.open = function(){\n  this.fd = fs.openSync(this.path, 'r');\n  this.length = fs.fstatSync(this.fd).size;\n  this.extname = path.extname(this.path).slice(1);\n};\n\n/**\n * Close the file.\n *\n * @api private\n */\n\nImage.prototype.close = function(){\n  if (this.fd) fs.closeSync(this.fd);\n};\n\n/**\n * Return the type of image, supports:\n *\n *  - gif\n *  - png\n *  - jpeg\n *  - svg\n *\n * @return {String}\n * @api private\n */\n\nImage.prototype.type = function(){\n  var type\n    , buf = Buffer.alloc(4);\n  \n  fs.readSync(this.fd, buf, 0, 4, 0);\n\n  // GIF\n  if (0x47 == buf[0] && 0x49 == buf[1] && 0x46 == buf[2]) type = 'gif';\n\n  // PNG\n  else if (0x50 == buf[1] && 0x4E == buf[2] && 0x47 == buf[3]) type = 'png';\n\n  // JPEG\n  else if (0xff == buf[0] && 0xd8 == buf[1]) type = 'jpeg';\n\n  // SVG\n  else if ('svg' == this.extname) type = this.extname;\n\n  return type;\n};\n\n/**\n * Return image dimensions `[width, height]`.\n *\n * @return {Array}\n * @api private\n */\n\nImage.prototype.size = function(){\n  var type = this.type()\n    , width\n    , height\n    , buf\n    , offset\n    , blockSize\n    , parser;\n\n  function uint16(b) { return b[1] << 8 | b[0]; }\n  function uint32(b) { return b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]; } \n\n  // Determine dimensions\n  switch (type) {\n    case 'jpeg':\n      buf = Buffer.alloc(this.length);\n      fs.readSync(this.fd, buf, 0, this.length, 0);\n      offset = 4;\n      blockSize = buf[offset] << 8 | buf[offset + 1];\n\n      while (offset < this.length) {\n        offset += blockSize;\n        if (offset >= this.length || 0xff != buf[offset]) break;\n        // SOF0 or SOF2 (progressive)\n        if (0xc0 == buf[offset + 1] || 0xc2 == buf[offset + 1]) {\n          height = buf[offset + 5] << 8 | buf[offset + 6];\n          width = buf[offset + 7] << 8 | buf[offset + 8];\n        } else {\n          offset += 2;\n          blockSize = buf[offset] << 8 | buf[offset + 1];\n        }\n      }\n      break;\n    case 'png':\n      buf = Buffer.alloc(8);\n      // IHDR chunk width / height uint32_t big-endian\n      fs.readSync(this.fd, buf, 0, 8, 16);\n      width = uint32(buf);\n      height = uint32(buf.slice(4, 8));\n      break;\n    case 'gif':\n      buf = Buffer.alloc(4);\n      // width / height uint16_t little-endian\n      fs.readSync(this.fd, buf, 0, 4, 6);\n      width = uint16(buf);\n      height = uint16(buf.slice(2, 4));\n      break;\n    case 'svg':\n      offset = Math.min(this.length, 1024);\n      buf = Buffer.alloc(offset);\n      fs.readSync(this.fd, buf, 0, offset, 0);\n      buf = buf.toString('utf8');\n      parser = sax.parser(true);\n      parser.onopentag = function(node) {\n        if ('svg' == node.name && node.attributes.width && node.attributes.height) {\n          width = parseInt(node.attributes.width, 10);\n          height = parseInt(node.attributes.height, 10);\n        }\n      };\n      parser.write(buf).close();\n      break;\n  }\n\n  if ('number' != typeof width) throw new Error('failed to find width of \"' + this.path + '\"');\n  if ('number' != typeof height) throw new Error('failed to find height of \"' + this.path + '\"');\n\n  return [width, height];\n};\n"]},"metadata":{},"sourceType":"script"}