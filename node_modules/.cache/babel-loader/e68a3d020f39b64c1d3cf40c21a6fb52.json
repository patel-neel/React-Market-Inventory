{"ast":null,"code":"var _classCallCheck = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar util = require(\"./util\");\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\n\n\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a negligible overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\n\n\nvar MappingList = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function MappingList() {\n    _classCallCheck(this, MappingList);\n\n    this._array = [];\n    this._sorted = true; // Serves as infimum\n\n    this._last = {\n      generatedLine: -1,\n      generatedColumn: 0\n    };\n  }\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n\n\n  _createClass(MappingList, [{\n    key: \"unsortedForEach\",\n    value: function unsortedForEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    }\n    /**\n     * Add the given source mapping.\n     *\n     * @param Object aMapping\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(aMapping) {\n      if (generatedPositionAfter(this._last, aMapping)) {\n        this._last = aMapping;\n\n        this._array.push(aMapping);\n      } else {\n        this._sorted = false;\n\n        this._array.push(aMapping);\n      }\n    }\n    /**\n     * Returns the flat, sorted array of mappings. The mappings are sorted by\n     * generated position.\n     *\n     * WARNING: This method returns internal data without copying, for\n     * performance. The return value must NOT be mutated, and should be treated as\n     * an immutable borrow. If you want to take ownership, you must make your own\n     * copy.\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      if (!this._sorted) {\n        this._array.sort(util.compareByGeneratedPositionsInflated);\n\n        this._sorted = true;\n      }\n\n      return this._array;\n    }\n  }]);\n\n  return MappingList;\n}();\n\nexports.MappingList = MappingList;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/node_modules/source-map/lib/mapping-list.js"],"names":["util","require","generatedPositionAfter","mappingA","mappingB","lineA","generatedLine","lineB","columnA","generatedColumn","columnB","compareByGeneratedPositionsInflated","MappingList","_array","_sorted","_last","aCallback","aThisArg","forEach","aMapping","push","sort","exports"],"mappings":";;;;AAAA;;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AAClD;AACA,MAAMC,KAAK,GAAGF,QAAQ,CAACG,aAAvB;AACA,MAAMC,KAAK,GAAGH,QAAQ,CAACE,aAAvB;AACA,MAAME,OAAO,GAAGL,QAAQ,CAACM,eAAzB;AACA,MAAMC,OAAO,GAAGN,QAAQ,CAACK,eAAzB;AACA,SAAOF,KAAK,GAAGF,KAAR,IAAiBE,KAAK,IAAIF,KAAT,IAAkBK,OAAO,IAAIF,OAA9C,IACAR,IAAI,CAACW,mCAAL,CAAyCR,QAAzC,EAAmDC,QAAnD,KAAgE,CADvE;AAED;AAED;AACA;AACA;AACA;AACA;;;IACMQ,W;;;AACJ,yBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,OAAL,GAAe,IAAf,CAFY,CAGZ;;AACA,SAAKC,KAAL,GAAa;AAACT,MAAAA,aAAa,EAAE,CAAC,CAAjB;AAAoBG,MAAAA,eAAe,EAAE;AAArC,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;;WACE,yBAAgBO,SAAhB,EAA2BC,QAA3B,EAAqC;AACnC,WAAKJ,MAAL,CAAYK,OAAZ,CAAoBF,SAApB,EAA+BC,QAA/B;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,aAAIE,QAAJ,EAAc;AACZ,UAAIjB,sBAAsB,CAAC,KAAKa,KAAN,EAAaI,QAAb,CAA1B,EAAkD;AAChD,aAAKJ,KAAL,GAAaI,QAAb;;AACA,aAAKN,MAAL,CAAYO,IAAZ,CAAiBD,QAAjB;AACD,OAHD,MAGO;AACL,aAAKL,OAAL,GAAe,KAAf;;AACA,aAAKD,MAAL,CAAYO,IAAZ,CAAiBD,QAAjB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAU;AACR,UAAI,CAAC,KAAKL,OAAV,EAAmB;AACjB,aAAKD,MAAL,CAAYQ,IAAZ,CAAiBrB,IAAI,CAACW,mCAAtB;;AACA,aAAKG,OAAL,GAAe,IAAf;AACD;;AACD,aAAO,KAAKD,MAAZ;AACD;;;;;;AAGHS,OAAO,CAACV,WAAR,GAAsBA,WAAtB","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  const lineA = mappingA.generatedLine;\n  const lineB = mappingB.generatedLine;\n  const columnA = mappingA.generatedColumn;\n  const columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a negligible overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nclass MappingList {\n  constructor() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {generatedLine: -1, generatedColumn: 0};\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  unsortedForEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  }\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  }\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  }\n}\n\nexports.MappingList = MappingList;\n"]},"metadata":{},"sourceType":"script"}