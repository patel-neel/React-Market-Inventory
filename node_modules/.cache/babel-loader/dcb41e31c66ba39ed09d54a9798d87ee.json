{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes'),\n    hsla = require('./hsla');\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l component values.\n *\n * Examples:\n *\n *    hsl(10, 50, 30)\n *    // => HSLA\n *\n *    hsl(#ffcc00)\n *    // => HSLA\n *\n * @param {Unit|HSLA|RGBA} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @return {HSLA}\n * @api public\n */\n\n\nfunction hsl(hue, saturation, lightness) {\n  if (1 == arguments.length) {\n    utils.assertColor(hue, 'color');\n    return hue.hsla;\n  } else {\n    return hsla(hue, saturation, lightness, new nodes.Unit(1));\n  }\n}\n\n;\nhsl.params = ['hue', 'saturation', 'lightness'];\nmodule.exports = hsl;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/hsl.js"],"names":["utils","require","nodes","hsla","hsl","hue","saturation","lightness","arguments","length","assertColor","Unit","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAAA,IAEIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAFlB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,GAAT,CAAaC,GAAb,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAwC;AACtC,MAAI,KAAKC,SAAS,CAACC,MAAnB,EAA2B;AACzBT,IAAAA,KAAK,CAACU,WAAN,CAAkBL,GAAlB,EAAuB,OAAvB;AACA,WAAOA,GAAG,CAACF,IAAX;AACD,GAHD,MAGO;AACL,WAAOA,IAAI,CACPE,GADO,EAEPC,UAFO,EAGPC,SAHO,EAIP,IAAIL,KAAK,CAACS,IAAV,CAAe,CAAf,CAJO,CAAX;AAKD;AACF;;AAAA;AACDP,GAAG,CAACQ,MAAJ,GAAa,CAAC,KAAD,EAAQ,YAAR,EAAsB,WAAtB,CAAb;AACAC,MAAM,CAACC,OAAP,GAAiBV,GAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n  , hsla = require('./hsla');\n\n/**\n * Convert the given `color` to an `HSLA` node,\n * or h,s,l component values.\n *\n * Examples:\n *\n *    hsl(10, 50, 30)\n *    // => HSLA\n *\n *    hsl(#ffcc00)\n *    // => HSLA\n *\n * @param {Unit|HSLA|RGBA} hue\n * @param {Unit} saturation\n * @param {Unit} lightness\n * @return {HSLA}\n * @api public\n */\n\nfunction hsl(hue, saturation, lightness){\n  if (1 == arguments.length) {\n    utils.assertColor(hue, 'color');\n    return hue.hsla;\n  } else {\n    return hsla(\n        hue\n      , saturation\n      , lightness\n      , new nodes.Unit(1));\n  }\n};\nhsl.params = ['hue', 'saturation', 'lightness'];\nmodule.exports = hsl;\n"]},"metadata":{},"sourceType":"script"}