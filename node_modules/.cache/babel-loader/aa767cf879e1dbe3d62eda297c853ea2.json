{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Returns string with all matches of `pattern` replaced by `replacement` in given `val`\n *\n * @param {String} pattern\n * @param {String} replacement\n * @param {String|Ident} val\n * @return {String|Ident}\n * @api public\n */\n\n\nfunction replace(pattern, replacement, val) {\n  utils.assertString(pattern, 'pattern');\n  utils.assertString(replacement, 'replacement');\n  utils.assertString(val, 'val');\n  pattern = new RegExp(pattern.string, 'g');\n  var res = val.string.replace(pattern, replacement.string);\n  return val instanceof nodes.Ident ? new nodes.Ident(res) : new nodes.String(res);\n}\n\nreplace.params = ['pattern', 'replacement', 'val'];\nmodule.exports = replace;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/replace.js"],"names":["utils","require","nodes","replace","pattern","replacement","val","assertString","RegExp","string","res","Ident","String","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,OAAT,CAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,GAAvC,EAA2C;AACzCN,EAAAA,KAAK,CAACO,YAAN,CAAmBH,OAAnB,EAA4B,SAA5B;AACAJ,EAAAA,KAAK,CAACO,YAAN,CAAmBF,WAAnB,EAAgC,aAAhC;AACAL,EAAAA,KAAK,CAACO,YAAN,CAAmBD,GAAnB,EAAwB,KAAxB;AACAF,EAAAA,OAAO,GAAG,IAAII,MAAJ,CAAWJ,OAAO,CAACK,MAAnB,EAA2B,GAA3B,CAAV;AACA,MAAIC,GAAG,GAAGJ,GAAG,CAACG,MAAJ,CAAWN,OAAX,CAAmBC,OAAnB,EAA4BC,WAAW,CAACI,MAAxC,CAAV;AACA,SAAOH,GAAG,YAAYJ,KAAK,CAACS,KAArB,GACH,IAAIT,KAAK,CAACS,KAAV,CAAgBD,GAAhB,CADG,GAEH,IAAIR,KAAK,CAACU,MAAV,CAAiBF,GAAjB,CAFJ;AAGD;;AACDP,OAAO,CAACU,MAAR,GAAiB,CAAC,SAAD,EAAY,aAAZ,EAA2B,KAA3B,CAAjB;AACAC,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns string with all matches of `pattern` replaced by `replacement` in given `val`\n *\n * @param {String} pattern\n * @param {String} replacement\n * @param {String|Ident} val\n * @return {String|Ident}\n * @api public\n */\n\nfunction replace(pattern, replacement, val){\n  utils.assertString(pattern, 'pattern');\n  utils.assertString(replacement, 'replacement');\n  utils.assertString(val, 'val');\n  pattern = new RegExp(pattern.string, 'g');\n  var res = val.string.replace(pattern, replacement.string);\n  return val instanceof nodes.Ident\n    ? new nodes.Ident(res)\n    : new nodes.String(res);\n}\nreplace.params = ['pattern', 'replacement', 'val'];\nmodule.exports = replace;\n"]},"metadata":{},"sourceType":"script"}