{"ast":null,"code":"var nodes = require('../nodes'),\n    rgba = require('./rgba');\n/**\n * Return the alpha component of the given `color`,\n * or set the alpha component to the optional second `value` argument.\n *\n * Examples:\n *\n *    alpha(#fff)\n *    // => 1\n *\n *    alpha(rgba(0,0,0,0.3))\n *    // => 0.3\n *\n *    alpha(#fff, 0.5)\n *    // => rgba(255,255,255,0.5)\n *\n * @param {RGBA|HSLA} color\n * @param {Unit} [value]\n * @return {Unit|RGBA}\n * @api public\n */\n\n\nfunction alpha(color, value) {\n  color = color.rgba;\n\n  if (value) {\n    return rgba(new nodes.Unit(color.r), new nodes.Unit(color.g), new nodes.Unit(color.b), value);\n  }\n\n  return new nodes.Unit(color.a, '');\n}\n\n;\nalpha.params = ['color', 'value'];\nmodule.exports = alpha;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/alpha.js"],"names":["nodes","require","rgba","alpha","color","value","Unit","r","g","b","a","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CADlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA4B;AAC1BD,EAAAA,KAAK,GAAGA,KAAK,CAACF,IAAd;;AACA,MAAIG,KAAJ,EAAW;AACT,WAAOH,IAAI,CACT,IAAIF,KAAK,CAACM,IAAV,CAAeF,KAAK,CAACG,CAArB,CADS,EAET,IAAIP,KAAK,CAACM,IAAV,CAAeF,KAAK,CAACI,CAArB,CAFS,EAGT,IAAIR,KAAK,CAACM,IAAV,CAAeF,KAAK,CAACK,CAArB,CAHS,EAITJ,KAJS,CAAX;AAMD;;AACD,SAAO,IAAIL,KAAK,CAACM,IAAV,CAAeF,KAAK,CAACM,CAArB,EAAwB,EAAxB,CAAP;AACD;;AAAA;AACDP,KAAK,CAACQ,MAAN,GAAe,CAAC,OAAD,EAAU,OAAV,CAAf;AACAC,MAAM,CAACC,OAAP,GAAiBV,KAAjB","sourcesContent":["var nodes = require('../nodes')\n  , rgba = require('./rgba');\n\n/**\n * Return the alpha component of the given `color`,\n * or set the alpha component to the optional second `value` argument.\n *\n * Examples:\n *\n *    alpha(#fff)\n *    // => 1\n *\n *    alpha(rgba(0,0,0,0.3))\n *    // => 0.3\n *\n *    alpha(#fff, 0.5)\n *    // => rgba(255,255,255,0.5)\n *\n * @param {RGBA|HSLA} color\n * @param {Unit} [value]\n * @return {Unit|RGBA}\n * @api public\n */\n\nfunction alpha(color, value){\n  color = color.rgba;\n  if (value) {\n    return rgba(\n      new nodes.Unit(color.r),\n      new nodes.Unit(color.g),\n      new nodes.Unit(color.b),\n      value\n    );\n  }\n  return new nodes.Unit(color.a, '');\n};\nalpha.params = ['color', 'value'];\nmodule.exports = alpha;\n"]},"metadata":{},"sourceType":"script"}