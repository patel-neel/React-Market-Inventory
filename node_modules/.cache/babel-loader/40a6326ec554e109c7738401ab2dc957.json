{"ast":null,"code":"/*!\n * Stylus - Renderer\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Parser = require('./parser'),\n    EventEmitter = require('events').EventEmitter,\n    Evaluator = require('./visitor/evaluator'),\n    Normalizer = require('./visitor/normalizer'),\n    events = new EventEmitter(),\n    utils = require('./utils'),\n    nodes = require('./nodes'),\n    join = require('path').join;\n/**\n * Expose `Renderer`.\n */\n\n\nmodule.exports = Renderer;\n/**\n * Initialize a new `Renderer` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api public\n */\n\nfunction Renderer(str, options) {\n  options = options || {};\n  options.globals = options.globals || {};\n  options.functions = options.functions || {};\n  options.use = options.use || [];\n  options.use = Array.isArray(options.use) ? options.use : [options.use];\n  options.imports = [join(__dirname, 'functions/index.styl')].concat(options.imports || []);\n  options.paths = options.paths || [];\n  options.filename = options.filename || 'stylus';\n  options.Evaluator = options.Evaluator || Evaluator;\n  this.options = options;\n  this.str = str;\n  this.events = events;\n}\n\n;\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nRenderer.prototype.__proto__ = EventEmitter.prototype;\n/**\n * Expose events explicitly.\n */\n\nmodule.exports.events = events;\n/**\n * Parse and evaluate AST, then callback `fn(err, css, js)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nRenderer.prototype.render = function (fn) {\n  var parser = this.parser = new Parser(this.str, this.options); // use plugin(s)\n\n  for (var i = 0, len = this.options.use.length; i < len; i++) {\n    this.use(this.options.use[i]);\n  }\n\n  try {\n    nodes.filename = this.options.filename; // parse\n\n    var ast = parser.parse(); // evaluate\n\n    this.evaluator = new this.options.Evaluator(ast, this.options);\n    this.nodes = nodes;\n    this.evaluator.renderer = this;\n    ast = this.evaluator.evaluate(); // normalize\n\n    var normalizer = new Normalizer(ast, this.options);\n    ast = normalizer.normalize(); // compile\n\n    var compiler = this.options.sourcemap ? new (require('./visitor/sourcemapper'))(ast, this.options) : new (require('./visitor/compiler'))(ast, this.options),\n        css = compiler.compile(); // expose sourcemap\n\n    if (this.options.sourcemap) this.sourcemap = compiler.map.toJSON();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || this.options.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    if (!fn) throw utils.formatException(err, options);\n    return fn(utils.formatException(err, options));\n  } // fire `end` event\n\n\n  var listeners = this.listeners('end');\n  if (fn) listeners.push(fn);\n\n  for (var i = 0, len = listeners.length; i < len; i++) {\n    var ret = listeners[i](null, css);\n    if (ret) css = ret;\n  }\n\n  if (!fn) return css;\n};\n/**\n * Get dependencies of the compiled file.\n *\n * @param {String} [filename]\n * @return {Array}\n * @api public\n */\n\n\nRenderer.prototype.deps = function (filename) {\n  var opts = utils.merge({\n    cache: false\n  }, this.options);\n  if (filename) opts.filename = filename;\n\n  var DepsResolver = require('./visitor/deps-resolver'),\n      parser = new Parser(this.str, opts);\n\n  try {\n    nodes.filename = opts.filename; // parse\n\n    var ast = parser.parse(),\n        resolver = new DepsResolver(ast, opts); // resolve dependencies\n\n    return resolver.resolve();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || opts.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    throw utils.formatException(err, options);\n  }\n};\n/**\n * Set option `key` to `val`.\n *\n * @param {String} key\n * @param {Mixed} val\n * @return {Renderer} for chaining\n * @api public\n */\n\n\nRenderer.prototype.set = function (key, val) {\n  this.options[key] = val;\n  return this;\n};\n/**\n * Get option `key`.\n *\n * @param {String} key\n * @return {Mixed} val\n * @api public\n */\n\n\nRenderer.prototype.get = function (key) {\n  return this.options[key];\n};\n/**\n * Include the given `path` to the lookup paths array.\n *\n * @param {String} path\n * @return {Renderer} for chaining\n * @api public\n */\n\n\nRenderer.prototype.include = function (path) {\n  this.options.paths.push(path);\n  return this;\n};\n/**\n * Use the given `fn`.\n *\n * This allows for plugins to alter the renderer in\n * any way they wish, exposing paths etc.\n *\n * @param {Function}\n * @return {Renderer} for chaining\n * @api public\n */\n\n\nRenderer.prototype.use = function (fn) {\n  fn.call(this, this);\n  return this;\n};\n/**\n * Define function or global var with the given `name`. Optionally\n * the function may accept full expressions, by setting `raw`\n * to `true`.\n *\n * @param {String} name\n * @param {Function|Node} fn\n * @return {Renderer} for chaining\n * @api public\n */\n\n\nRenderer.prototype.define = function (name, fn, raw) {\n  fn = utils.coerce(fn, raw);\n\n  if (fn.nodeName) {\n    this.options.globals[name] = fn;\n    return this;\n  } // function\n\n\n  this.options.functions[name] = fn;\n  if (undefined != raw) fn.raw = raw;\n  return this;\n};\n/**\n * Import the given `file`.\n *\n * @param {String} file\n * @return {Renderer} for chaining\n * @api public\n */\n\n\nRenderer.prototype.import = function (file) {\n  this.options.imports.push(file);\n  return this;\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/renderer.js"],"names":["Parser","require","EventEmitter","Evaluator","Normalizer","events","utils","nodes","join","module","exports","Renderer","str","options","globals","functions","use","Array","isArray","imports","__dirname","concat","paths","filename","prototype","__proto__","render","fn","parser","i","len","length","ast","parse","evaluator","renderer","evaluate","normalizer","normalize","compiler","sourcemap","css","compile","map","toJSON","err","input","lineno","lexer","column","formatException","listeners","push","ret","deps","opts","merge","cache","DepsResolver","resolver","resolve","set","key","val","get","include","path","call","define","name","raw","coerce","nodeName","undefined","import","file"],"mappings":"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","sourcesContent":["\n/*!\n * Stylus - Renderer\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Parser = require('./parser')\n  , EventEmitter = require('events').EventEmitter\n  , Evaluator = require('./visitor/evaluator')\n  , Normalizer = require('./visitor/normalizer')\n  , events = new EventEmitter\n  , utils = require('./utils')\n  , nodes = require('./nodes')\n  , join = require('path').join;\n\n/**\n * Expose `Renderer`.\n */\n\nmodule.exports = Renderer;\n\n/**\n * Initialize a new `Renderer` with the given `str` and `options`.\n *\n * @param {String} str\n * @param {Object} options\n * @api public\n */\n\nfunction Renderer(str, options) {\n  options = options || {};\n  options.globals = options.globals || {};\n  options.functions = options.functions || {};\n  options.use = options.use || [];\n  options.use = Array.isArray(options.use) ? options.use : [options.use];\n  options.imports = [join(__dirname, 'functions/index.styl')].concat(options.imports || []);\n  options.paths = options.paths || [];\n  options.filename = options.filename || 'stylus';\n  options.Evaluator = options.Evaluator || Evaluator;\n  this.options = options;\n  this.str = str;\n  this.events = events;\n};\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nRenderer.prototype.__proto__ = EventEmitter.prototype;\n\n/**\n * Expose events explicitly.\n */\n\nmodule.exports.events = events;\n\n/**\n * Parse and evaluate AST, then callback `fn(err, css, js)`.\n *\n * @param {Function} fn\n * @api public\n */\n\nRenderer.prototype.render = function(fn){\n  var parser = this.parser = new Parser(this.str, this.options);\n\n  // use plugin(s)\n  for (var i = 0, len = this.options.use.length; i < len; i++) {\n    this.use(this.options.use[i]);\n  }\n\n  try {\n    nodes.filename = this.options.filename;\n    // parse\n    var ast = parser.parse();\n\n    // evaluate\n    this.evaluator = new this.options.Evaluator(ast, this.options);\n    this.nodes = nodes;\n    this.evaluator.renderer = this;\n    ast = this.evaluator.evaluate();\n\n    // normalize\n    var normalizer = new Normalizer(ast, this.options);\n    ast = normalizer.normalize();\n\n    // compile\n    var compiler = this.options.sourcemap\n      ? new (require('./visitor/sourcemapper'))(ast, this.options)\n      : new (require('./visitor/compiler'))(ast, this.options)\n      , css = compiler.compile();\n\n    // expose sourcemap\n    if (this.options.sourcemap) this.sourcemap = compiler.map.toJSON();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || this.options.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    if (!fn) throw utils.formatException(err, options);\n    return fn(utils.formatException(err, options));\n  }\n\n  // fire `end` event\n  var listeners = this.listeners('end');\n  if (fn) listeners.push(fn);\n  for (var i = 0, len = listeners.length; i < len; i++) {\n    var ret = listeners[i](null, css);\n    if (ret) css = ret;\n  }\n  if (!fn) return css;\n};\n\n/**\n * Get dependencies of the compiled file.\n *\n * @param {String} [filename]\n * @return {Array}\n * @api public\n */\n\nRenderer.prototype.deps = function(filename){\n  var opts = utils.merge({ cache: false }, this.options);\n  if (filename) opts.filename = filename;\n\n  var DepsResolver = require('./visitor/deps-resolver')\n    , parser = new Parser(this.str, opts);\n\n  try {\n    nodes.filename = opts.filename;\n    // parse\n    var ast = parser.parse()\n      , resolver = new DepsResolver(ast, opts);\n\n    // resolve dependencies\n    return resolver.resolve();\n  } catch (err) {\n    var options = {};\n    options.input = err.input || this.str;\n    options.filename = err.filename || opts.filename;\n    options.lineno = err.lineno || parser.lexer.lineno;\n    options.column = err.column || parser.lexer.column;\n    throw utils.formatException(err, options);\n  }\n};\n\n/**\n * Set option `key` to `val`.\n *\n * @param {String} key\n * @param {Mixed} val\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.set = function(key, val){\n  this.options[key] = val;\n  return this;\n};\n\n/**\n * Get option `key`.\n *\n * @param {String} key\n * @return {Mixed} val\n * @api public\n */\n\nRenderer.prototype.get = function(key){\n  return this.options[key];\n};\n\n/**\n * Include the given `path` to the lookup paths array.\n *\n * @param {String} path\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.include = function(path){\n  this.options.paths.push(path);\n  return this;\n};\n\n/**\n * Use the given `fn`.\n *\n * This allows for plugins to alter the renderer in\n * any way they wish, exposing paths etc.\n *\n * @param {Function}\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.use = function(fn){\n  fn.call(this, this);\n  return this;\n};\n\n/**\n * Define function or global var with the given `name`. Optionally\n * the function may accept full expressions, by setting `raw`\n * to `true`.\n *\n * @param {String} name\n * @param {Function|Node} fn\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.define = function(name, fn, raw){\n  fn = utils.coerce(fn, raw);\n\n  if (fn.nodeName) {\n    this.options.globals[name] = fn;\n    return this;\n  }\n\n  // function\n  this.options.functions[name] = fn;\n  if (undefined != raw) fn.raw = raw;\n  return this;\n};\n\n/**\n * Import the given `file`.\n *\n * @param {String} file\n * @return {Renderer} for chaining\n * @api public\n */\n\nRenderer.prototype.import = function(file){\n  this.options.imports.push(file);\n  return this;\n};\n\n\n"]},"metadata":{},"sourceType":"script"}