{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Visitor = require('./'),\n    Parser = require('../parser'),\n    nodes = require('../nodes'),\n    utils = require('../utils'),\n    dirname = require('path').dirname,\n    fs = require('fs');\n/**\n * Initialize a new `DepsResolver` with the given `root` Node\n * and the `options`.\n *\n * @param {Node} root\n * @param {Object} options\n * @api private\n */\n\n\nvar DepsResolver = module.exports = function DepsResolver(root, options) {\n  this.root = root;\n  this.filename = options.filename;\n  this.paths = options.paths || [];\n  this.paths.push(dirname(options.filename || '.'));\n  this.options = options;\n  this.functions = {};\n  this.deps = [];\n};\n/**\n * Inherit from `Visitor.prototype`.\n */\n\n\nDepsResolver.prototype.__proto__ = Visitor.prototype;\nvar visit = DepsResolver.prototype.visit;\n\nDepsResolver.prototype.visit = function (node) {\n  switch (node.nodeName) {\n    case 'root':\n    case 'block':\n    case 'expression':\n      this.visitRoot(node);\n      break;\n\n    case 'group':\n    case 'media':\n    case 'atblock':\n    case 'atrule':\n    case 'keyframes':\n    case 'each':\n    case 'supports':\n      this.visit(node.block);\n      break;\n\n    default:\n      visit.call(this, node);\n  }\n};\n/**\n * Visit Root.\n */\n\n\nDepsResolver.prototype.visitRoot = function (block) {\n  for (var i = 0, len = block.nodes.length; i < len; ++i) {\n    this.visit(block.nodes[i]);\n  }\n};\n/**\n * Visit Ident.\n */\n\n\nDepsResolver.prototype.visitIdent = function (ident) {\n  this.visit(ident.val);\n};\n/**\n * Visit If.\n */\n\n\nDepsResolver.prototype.visitIf = function (node) {\n  this.visit(node.block);\n  this.visit(node.cond);\n\n  for (var i = 0, len = node.elses.length; i < len; ++i) {\n    this.visit(node.elses[i]);\n  }\n};\n/**\n * Visit Function.\n */\n\n\nDepsResolver.prototype.visitFunction = function (fn) {\n  this.functions[fn.name] = fn.block;\n};\n/**\n * Visit Call.\n */\n\n\nDepsResolver.prototype.visitCall = function (call) {\n  if (call.name in this.functions) this.visit(this.functions[call.name]);\n  if (call.block) this.visit(call.block);\n};\n/**\n * Visit Import.\n */\n\n\nDepsResolver.prototype.visitImport = function (node) {\n  var path = !node.path.first.val.isNull && node.path.first.val || node.path.first.name,\n      literal,\n      found,\n      oldPath;\n  if (!path) return;\n  literal = /\\.css(?:\"|$)/.test(path); // support optional .styl\n\n  if (!literal && !/\\.styl$/i.test(path)) {\n    oldPath = path;\n    path += '.styl';\n  } // Lookup\n\n\n  found = utils.find(path, this.paths, this.filename); // support optional index\n\n  if (!found && oldPath) found = utils.lookupIndex(oldPath, this.paths, this.filename);\n  if (!found) return;\n  this.deps = this.deps.concat(found);\n  if (literal) return; // nested imports\n\n  for (var i = 0, len = found.length; i < len; ++i) {\n    var file = found[i],\n        dir = dirname(file),\n        str = fs.readFileSync(file, 'utf-8'),\n        block = new nodes.Block(),\n        parser = new Parser(str, utils.merge({\n      root: block\n    }, this.options));\n    if (!~this.paths.indexOf(dir)) this.paths.push(dir);\n\n    try {\n      block = parser.parse();\n    } catch (err) {\n      err.filename = file;\n      err.lineno = parser.lexer.lineno;\n      err.column = parser.lexer.column;\n      err.input = str;\n      throw err;\n    }\n\n    this.visit(block);\n  }\n};\n/**\n * Get dependencies.\n */\n\n\nDepsResolver.prototype.resolve = function () {\n  this.visit(this.root);\n  return utils.uniq(this.deps);\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/visitor/deps-resolver.js"],"names":["Visitor","require","Parser","nodes","utils","dirname","fs","DepsResolver","module","exports","root","options","filename","paths","push","functions","deps","prototype","__proto__","visit","node","nodeName","visitRoot","block","call","i","len","length","visitIdent","ident","val","visitIf","cond","elses","visitFunction","fn","name","visitCall","visitImport","path","first","isNull","literal","found","oldPath","test","find","lookupIndex","concat","file","dir","str","readFileSync","Block","parser","merge","indexOf","parse","err","lineno","lexer","column","input","resolve","uniq"],"mappings":"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","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar Visitor = require('./')\n  , Parser = require('../parser')\n  , nodes = require('../nodes')\n  , utils = require('../utils')\n  , dirname = require('path').dirname\n  , fs = require('fs');\n\n/**\n * Initialize a new `DepsResolver` with the given `root` Node\n * and the `options`.\n *\n * @param {Node} root\n * @param {Object} options\n * @api private\n */\n\nvar DepsResolver = module.exports = function DepsResolver(root, options) {\n  this.root = root;\n  this.filename = options.filename;\n  this.paths = options.paths || [];\n  this.paths.push(dirname(options.filename || '.'));\n  this.options = options;\n  this.functions = {};\n  this.deps = [];\n};\n\n/**\n * Inherit from `Visitor.prototype`.\n */\n\nDepsResolver.prototype.__proto__ = Visitor.prototype;\n\nvar visit = DepsResolver.prototype.visit;\n\nDepsResolver.prototype.visit = function(node) {\n  switch (node.nodeName) {\n    case 'root':\n    case 'block':\n    case 'expression':\n      this.visitRoot(node);\n      break;\n    case 'group':\n    case 'media':\n    case 'atblock':\n    case 'atrule':\n    case 'keyframes':\n    case 'each':\n    case 'supports':\n      this.visit(node.block);\n      break;\n    default:\n      visit.call(this, node);\n  }\n};\n\n/**\n * Visit Root.\n */\n\nDepsResolver.prototype.visitRoot = function(block) {\n  for (var i = 0, len = block.nodes.length; i < len; ++i) {\n    this.visit(block.nodes[i]);\n  }\n};\n\n/**\n * Visit Ident.\n */\n\nDepsResolver.prototype.visitIdent = function(ident) {\n  this.visit(ident.val);\n};\n\n/**\n * Visit If.\n */\n\nDepsResolver.prototype.visitIf = function(node) {\n  this.visit(node.block);\n  this.visit(node.cond);\n  for (var i = 0, len = node.elses.length; i < len; ++i) {\n    this.visit(node.elses[i]);\n  }\n};\n\n/**\n * Visit Function.\n */\n\nDepsResolver.prototype.visitFunction = function(fn) {\n  this.functions[fn.name] = fn.block;\n};\n\n/**\n * Visit Call.\n */\n\nDepsResolver.prototype.visitCall = function(call) {\n  if (call.name in this.functions) this.visit(this.functions[call.name]);\n  if (call.block) this.visit(call.block);\n};\n\n/**\n * Visit Import.\n */\n\nDepsResolver.prototype.visitImport = function(node) {\n  var path = !node.path.first.val.isNull && node.path.first.val || node.path.first.name\n    , literal, found, oldPath;\n\n  if (!path) return;\n\n  literal = /\\.css(?:\"|$)/.test(path);\n\n  // support optional .styl\n  if (!literal && !/\\.styl$/i.test(path)) {\n    oldPath = path;\n    path += '.styl';\n  }\n\n  // Lookup\n  found = utils.find(path, this.paths, this.filename);\n\n  // support optional index\n  if (!found && oldPath) found = utils.lookupIndex(oldPath, this.paths, this.filename);\n\n  if (!found) return;\n\n  this.deps = this.deps.concat(found);\n\n  if (literal) return;\n\n  // nested imports\n  for (var i = 0, len = found.length; i < len; ++i) {\n    var file = found[i]\n      , dir = dirname(file)\n      , str = fs.readFileSync(file, 'utf-8')\n      , block = new nodes.Block\n      , parser = new Parser(str, utils.merge({ root: block }, this.options));\n\n    if (!~this.paths.indexOf(dir)) this.paths.push(dir);\n\n    try {\n      block = parser.parse();\n    } catch (err) {\n      err.filename = file;\n      err.lineno = parser.lexer.lineno;\n      err.column = parser.lexer.column;\n      err.input = str;\n      throw err;\n    }\n\n    this.visit(block);\n  }\n};\n\n/**\n * Get dependencies.\n */\n\nDepsResolver.prototype.resolve = function() {\n  this.visit(this.root);\n  return utils.uniq(this.deps);\n};\n"]},"metadata":{},"sourceType":"script"}