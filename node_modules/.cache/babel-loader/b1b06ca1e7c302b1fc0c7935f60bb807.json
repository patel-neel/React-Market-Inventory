{"ast":null,"code":"var utils = require('../utils');\n/**\n * Return the current selector or compile\n * selector from a string or a list.\n *\n * @param {String|Expression}\n * @return {String}\n * @api public\n */\n\n\n(module.exports = function selector() {\n  var stack = this.selectorStack,\n      args = [].slice.call(arguments);\n\n  if (1 == args.length) {\n    var expr = utils.unwrap(args[0]),\n        len = expr.nodes.length; // selector('.a')\n\n    if (1 == len) {\n      utils.assertString(expr.first, 'selector');\n\n      var SelectorParser = require('../selector-parser'),\n          val = expr.first.string,\n          parsed = new SelectorParser(val).parse().val;\n\n      if (parsed == val) return val;\n      stack.push(parse(val));\n    } else if (len > 1) {\n      // selector-list = '.a', '.b', '.c'\n      // selector(selector-list)\n      if (expr.isList) {\n        pushToStack(expr.nodes, stack); // selector('.a' '.b' '.c')\n      } else {\n        stack.push(parse(expr.nodes.map(function (node) {\n          utils.assertString(node, 'selector');\n          return node.string;\n        }).join(' ')));\n      }\n    } // selector('.a', '.b', '.c')\n\n  } else if (args.length > 1) {\n    pushToStack(args, stack);\n  }\n\n  return stack.length ? utils.compileSelectors(stack).join(',') : '&';\n}).raw = true;\n\nfunction pushToStack(selectors, stack) {\n  selectors.forEach(function (sel) {\n    sel = sel.first;\n    utils.assertString(sel, 'selector');\n    stack.push(parse(sel.string));\n  });\n}\n\nfunction parse(selector) {\n  var Parser = new require('../parser'),\n      parser = new Parser(selector),\n      nodes;\n  parser.state.push('selector-parts');\n  nodes = parser.selector();\n  nodes.forEach(function (node) {\n    node.val = node.segments.map(function (seg) {\n      return seg.toString();\n    }).join('');\n  });\n  return nodes;\n}","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/selector.js"],"names":["utils","require","module","exports","selector","stack","selectorStack","args","slice","call","arguments","length","expr","unwrap","len","nodes","assertString","first","SelectorParser","val","string","parsed","parse","push","isList","pushToStack","map","node","join","compileSelectors","raw","selectors","forEach","sel","Parser","parser","state","segments","seg","toString"],"mappings":"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","sourcesContent":["var utils = require('../utils');\n\n/**\n * Return the current selector or compile\n * selector from a string or a list.\n *\n * @param {String|Expression}\n * @return {String}\n * @api public\n */\n\n(module.exports = function selector(){\n  var stack = this.selectorStack\n    , args = [].slice.call(arguments);\n\n  if (1 == args.length) {\n    var expr = utils.unwrap(args[0])\n      , len = expr.nodes.length;\n\n    // selector('.a')\n    if (1 == len) {\n      utils.assertString(expr.first, 'selector');\n      var SelectorParser = require('../selector-parser')\n        , val = expr.first.string\n        , parsed = new SelectorParser(val).parse().val;\n\n      if (parsed == val) return val;\n\n      stack.push(parse(val));\n    } else if (len > 1) {\n      // selector-list = '.a', '.b', '.c'\n      // selector(selector-list)\n      if (expr.isList) {\n        pushToStack(expr.nodes, stack);\n      // selector('.a' '.b' '.c')\n      } else {\n        stack.push(parse(expr.nodes.map(function(node){\n          utils.assertString(node, 'selector');\n          return node.string;\n        }).join(' ')));\n      }\n    }\n  // selector('.a', '.b', '.c')\n  } else if (args.length > 1) {\n    pushToStack(args, stack);\n  }\n\n  return stack.length ? utils.compileSelectors(stack).join(',') : '&';\n}).raw = true;\n\nfunction pushToStack(selectors, stack) {\n  selectors.forEach(function(sel) {\n    sel = sel.first;\n    utils.assertString(sel, 'selector');\n    stack.push(parse(sel.string));\n  });\n}\n\nfunction parse(selector) {\n  var Parser = new require('../parser')\n    , parser = new Parser(selector)\n    , nodes;\n  parser.state.push('selector-parts');\n  nodes = parser.selector();\n  nodes.forEach(function(node) {\n    node.val = node.segments.map(function(seg){\n      return seg.toString();\n    }).join('');\n  });\n  return nodes;\n}\n"]},"metadata":{},"sourceType":"script"}