{"ast":null,"code":"/*!\n * Stylus - Query\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Node = require('./node');\n/**\n * Initialize a new `Query`.\n *\n * @api public\n */\n\n\nvar Query = module.exports = function Query() {\n  Node.call(this);\n  this.nodes = [];\n  this.type = '';\n  this.predicate = '';\n};\n/**\n * Inherit from `Node.prototype`.\n */\n\n\nQuery.prototype.__proto__ = Node.prototype;\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\nQuery.prototype.clone = function (parent) {\n  var clone = new Query();\n  clone.predicate = this.predicate;\n  clone.type = this.type;\n\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    clone.push(this.nodes[i].clone(parent, clone));\n  }\n\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n/**\n * Push the given `feature`.\n *\n * @param {Feature} feature\n * @api public\n */\n\n\nQuery.prototype.push = function (feature) {\n  this.nodes.push(feature);\n};\n/**\n * Return resolved type of this query.\n *\n * @return {String}\n * @api private\n */\n\n\nQuery.prototype.__defineGetter__('resolvedType', function () {\n  if (this.type) {\n    return this.type.nodeName ? this.type.string : this.type;\n  }\n});\n/**\n * Return resolved predicate of this query.\n *\n * @return {String}\n * @api private\n */\n\n\nQuery.prototype.__defineGetter__('resolvedPredicate', function () {\n  if (this.predicate) {\n    return this.predicate.nodeName ? this.predicate.string : this.predicate;\n  }\n});\n/**\n * Merges this query with the `other`.\n *\n * @param {Query} other\n * @return {Query}\n * @api private\n */\n\n\nQuery.prototype.merge = function (other) {\n  var query = new Query(),\n      p1 = this.resolvedPredicate,\n      p2 = other.resolvedPredicate,\n      t1 = this.resolvedType,\n      t2 = other.resolvedType,\n      type,\n      pred; // Stolen from Sass :D\n\n  t1 = t1 || t2;\n  t2 = t2 || t1;\n\n  if ('not' == p1 ^ 'not' == p2) {\n    if (t1 == t2) return;\n    type = 'not' == p1 ? t2 : t1;\n    pred = 'not' == p1 ? p2 : p1;\n  } else if ('not' == p1 && 'not' == p2) {\n    if (t1 != t2) return;\n    type = t1;\n    pred = 'not';\n  } else if (t1 != t2) {\n    return;\n  } else {\n    type = t1;\n    pred = p1 || p2;\n  }\n\n  query.predicate = pred;\n  query.type = type;\n  query.nodes = this.nodes.concat(other.nodes);\n  return query;\n};\n/**\n * Return \"<a> and <b> and <c>\"\n *\n * @return {String}\n * @api public\n */\n\n\nQuery.prototype.toString = function () {\n  var pred = this.predicate ? this.predicate + ' ' : '',\n      type = this.type || '',\n      len = this.nodes.length,\n      str = pred + type;\n\n  if (len) {\n    str += (type && ' and ') + this.nodes.map(function (expr) {\n      return expr.toString();\n    }).join(' and ');\n  }\n\n  return str;\n};\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\n\nQuery.prototype.toJSON = function () {\n  return {\n    __type: 'Query',\n    predicate: this.predicate,\n    type: this.type,\n    nodes: this.nodes,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/nodes/query.js"],"names":["Node","require","Query","module","exports","call","nodes","type","predicate","prototype","__proto__","clone","parent","i","len","length","push","lineno","column","filename","feature","__defineGetter__","nodeName","string","merge","other","query","p1","resolvedPredicate","p2","t1","resolvedType","t2","pred","concat","toString","str","map","expr","join","toJSON","__type"],"mappings":"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","sourcesContent":["\n/*!\n * Stylus - Query\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node');\n\n/**\n * Initialize a new `Query`.\n *\n * @api public\n */\n\nvar Query = module.exports = function Query(){\n  Node.call(this);\n  this.nodes = [];\n  this.type = '';\n  this.predicate = '';\n};\n\n/**\n * Inherit from `Node.prototype`.\n */\n\nQuery.prototype.__proto__ = Node.prototype;\n\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\nQuery.prototype.clone = function(parent){\n  var clone = new Query;\n  clone.predicate = this.predicate;\n  clone.type = this.type;\n  for (var i = 0, len = this.nodes.length; i < len; ++i) {\n    clone.push(this.nodes[i].clone(parent, clone));\n  }\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n\n/**\n * Push the given `feature`.\n *\n * @param {Feature} feature\n * @api public\n */\n\nQuery.prototype.push = function(feature){\n  this.nodes.push(feature);\n};\n\n/**\n * Return resolved type of this query.\n *\n * @return {String}\n * @api private\n */\n\nQuery.prototype.__defineGetter__('resolvedType', function(){\n  if (this.type) {\n    return this.type.nodeName\n      ? this.type.string\n      : this.type;\n  }\n});\n\n/**\n * Return resolved predicate of this query.\n *\n * @return {String}\n * @api private\n */\n\nQuery.prototype.__defineGetter__('resolvedPredicate', function(){\n  if (this.predicate) {\n    return this.predicate.nodeName\n      ? this.predicate.string\n      : this.predicate;\n  }\n});\n\n/**\n * Merges this query with the `other`.\n *\n * @param {Query} other\n * @return {Query}\n * @api private\n */\n\nQuery.prototype.merge = function(other){\n  var query = new Query\n    , p1 = this.resolvedPredicate\n    , p2 = other.resolvedPredicate\n    , t1 = this.resolvedType\n    , t2 = other.resolvedType\n    , type, pred;\n\n  // Stolen from Sass :D\n  t1 = t1 || t2;\n  t2 = t2 || t1;\n  if (('not' == p1) ^ ('not' == p2)) {\n    if (t1 == t2) return;\n    type = ('not' == p1) ? t2 : t1;\n    pred = ('not' == p1) ? p2 : p1;\n  } else if (('not' == p1) && ('not' == p2)) {\n    if (t1 != t2) return;\n    type = t1;\n    pred = 'not';\n  } else if (t1 != t2) {\n    return;\n  } else {\n    type = t1;\n    pred = p1 || p2;\n  }\n  query.predicate = pred;\n  query.type = type;\n  query.nodes = this.nodes.concat(other.nodes);\n  return query;\n};\n\n/**\n * Return \"<a> and <b> and <c>\"\n *\n * @return {String}\n * @api public\n */\n\nQuery.prototype.toString = function(){\n  var pred = this.predicate ? this.predicate + ' ' : ''\n    , type = this.type || ''\n    , len = this.nodes.length\n    , str = pred + type;\n  if (len) {\n    str += (type && ' and ') + this.nodes.map(function(expr){\n      return expr.toString();\n    }).join(' and ');\n  }\n  return str;\n};\n\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\nQuery.prototype.toJSON = function(){\n  return {\n    __type: 'Query',\n    predicate: this.predicate,\n    type: this.type,\n    nodes: this.nodes,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};\n"]},"metadata":{},"sourceType":"script"}