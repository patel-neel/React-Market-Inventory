{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Returns a list of units from `start` to `stop`\n * by `step`. If `step` argument is omitted,\n * it defaults to 1.\n *\n * @param {Unit} start\n * @param {Unit} stop\n * @param {Unit} [step]\n * @return {Expression}\n * @api public\n */\n\n\nfunction range(start, stop, step) {\n  utils.assertType(start, 'unit', 'start');\n  utils.assertType(stop, 'unit', 'stop');\n\n  if (step) {\n    utils.assertType(step, 'unit', 'step');\n\n    if (0 == step.val) {\n      throw new Error('ArgumentError: \"step\" argument must not be zero');\n    }\n  } else {\n    step = new nodes.Unit(1);\n  }\n\n  var list = new nodes.Expression();\n\n  for (var i = start.val; i <= stop.val; i += step.val) {\n    list.push(new nodes.Unit(i, start.type));\n  }\n\n  return list;\n}\n\nrange.params = ['start', 'stop', 'step'];\nmodule.exports = range;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/range.js"],"names":["utils","require","nodes","range","start","stop","step","assertType","val","Error","Unit","list","Expression","i","push","type","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAiC;AAC/BN,EAAAA,KAAK,CAACO,UAAN,CAAiBH,KAAjB,EAAwB,MAAxB,EAAgC,OAAhC;AACAJ,EAAAA,KAAK,CAACO,UAAN,CAAiBF,IAAjB,EAAuB,MAAvB,EAA+B,MAA/B;;AACA,MAAIC,IAAJ,EAAU;AACRN,IAAAA,KAAK,CAACO,UAAN,CAAiBD,IAAjB,EAAuB,MAAvB,EAA+B,MAA/B;;AACA,QAAI,KAAKA,IAAI,CAACE,GAAd,EAAmB;AACjB,YAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF,GALD,MAKO;AACLH,IAAAA,IAAI,GAAG,IAAIJ,KAAK,CAACQ,IAAV,CAAe,CAAf,CAAP;AACD;;AACD,MAAIC,IAAI,GAAG,IAAIT,KAAK,CAACU,UAAV,EAAX;;AACA,OAAK,IAAIC,CAAC,GAAGT,KAAK,CAACI,GAAnB,EAAwBK,CAAC,IAAIR,IAAI,CAACG,GAAlC,EAAuCK,CAAC,IAAIP,IAAI,CAACE,GAAjD,EAAsD;AACpDG,IAAAA,IAAI,CAACG,IAAL,CAAU,IAAIZ,KAAK,CAACQ,IAAV,CAAeG,CAAf,EAAkBT,KAAK,CAACW,IAAxB,CAAV;AACD;;AACD,SAAOJ,IAAP;AACD;;AACDR,KAAK,CAACa,MAAN,GAAe,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,CAAf;AACAC,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns a list of units from `start` to `stop`\n * by `step`. If `step` argument is omitted,\n * it defaults to 1.\n *\n * @param {Unit} start\n * @param {Unit} stop\n * @param {Unit} [step]\n * @return {Expression}\n * @api public\n */\n\nfunction range(start, stop, step){\n  utils.assertType(start, 'unit', 'start');\n  utils.assertType(stop, 'unit', 'stop');\n  if (step) {\n    utils.assertType(step, 'unit', 'step');\n    if (0 == step.val) {\n      throw new Error('ArgumentError: \"step\" argument must not be zero');\n    }\n  } else {\n    step = new nodes.Unit(1);\n  }\n  var list = new nodes.Expression;\n  for (var i = start.val; i <= stop.val; i += step.val) {\n    list.push(new nodes.Unit(i, start.type));\n  }\n  return list;\n}\nrange.params = ['start', 'stop', 'step'];\nmodule.exports = range;\n"]},"metadata":{},"sourceType":"script"}