{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Return a `RGBA` from the r,g,b,a channels.\n *\n * Examples:\n *\n *    rgba(255,0,0,0.5)\n *    // => rgba(255,0,0,0.5)\n *\n *    rgba(255,0,0,1)\n *    // => #ff0000\n *\n *    rgba(#ffcc00, 50%)\n *    // rgba(255,204,0,0.5)\n *\n * @param {Unit|RGBA|HSLA} red\n * @param {Unit} green\n * @param {Unit} blue\n * @param {Unit} alpha\n * @return {RGBA}\n * @api public\n */\n\n\nfunction rgba(red, green, blue, alpha) {\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(red);\n      return red.rgba;\n\n    case 2:\n      utils.assertColor(red);\n      var color = red.rgba;\n      utils.assertType(green, 'unit', 'alpha');\n      alpha = green.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(color.r, color.g, color.b, alpha.val);\n\n    default:\n      utils.assertType(red, 'unit', 'red');\n      utils.assertType(green, 'unit', 'green');\n      utils.assertType(blue, 'unit', 'blue');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var r = '%' == red.type ? Math.round(red.val * 2.55) : red.val,\n          g = '%' == green.type ? Math.round(green.val * 2.55) : green.val,\n          b = '%' == blue.type ? Math.round(blue.val * 2.55) : blue.val;\n      alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(r, g, b, alpha.val);\n  }\n}\n\nrgba.params = ['red', 'green', 'blue', 'alpha'];\nmodule.exports = rgba;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/rgba.js"],"names":["utils","require","nodes","rgba","red","green","blue","alpha","arguments","length","assertColor","color","assertType","clone","type","val","RGBA","r","g","b","Math","round","params","module","exports"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;AAAA,IACIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CADnB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,IAAT,CAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,KAAhC,EAAsC;AACpC,UAAQC,SAAS,CAACC,MAAlB;AACE,SAAK,CAAL;AACET,MAAAA,KAAK,CAACU,WAAN,CAAkBN,GAAlB;AACA,aAAOA,GAAG,CAACD,IAAX;;AACF,SAAK,CAAL;AACEH,MAAAA,KAAK,CAACU,WAAN,CAAkBN,GAAlB;AACA,UAAIO,KAAK,GAAGP,GAAG,CAACD,IAAhB;AACAH,MAAAA,KAAK,CAACY,UAAN,CAAiBP,KAAjB,EAAwB,MAAxB,EAAgC,OAAhC;AACAE,MAAAA,KAAK,GAAGF,KAAK,CAACQ,KAAN,EAAR;AACA,UAAI,OAAON,KAAK,CAACO,IAAjB,EAAuBP,KAAK,CAACQ,GAAN,IAAa,GAAb;AACvB,aAAO,IAAIb,KAAK,CAACc,IAAV,CACHL,KAAK,CAACM,CADH,EAEHN,KAAK,CAACO,CAFH,EAGHP,KAAK,CAACQ,CAHH,EAIHZ,KAAK,CAACQ,GAJH,CAAP;;AAKF;AACEf,MAAAA,KAAK,CAACY,UAAN,CAAiBR,GAAjB,EAAsB,MAAtB,EAA8B,KAA9B;AACAJ,MAAAA,KAAK,CAACY,UAAN,CAAiBP,KAAjB,EAAwB,MAAxB,EAAgC,OAAhC;AACAL,MAAAA,KAAK,CAACY,UAAN,CAAiBN,IAAjB,EAAuB,MAAvB,EAA+B,MAA/B;AACAN,MAAAA,KAAK,CAACY,UAAN,CAAiBL,KAAjB,EAAwB,MAAxB,EAAgC,OAAhC;AACA,UAAIU,CAAC,GAAG,OAAOb,GAAG,CAACU,IAAX,GAAkBM,IAAI,CAACC,KAAL,CAAWjB,GAAG,CAACW,GAAJ,GAAU,IAArB,CAAlB,GAA+CX,GAAG,CAACW,GAA3D;AAAA,UACIG,CAAC,GAAG,OAAOb,KAAK,CAACS,IAAb,GAAoBM,IAAI,CAACC,KAAL,CAAWhB,KAAK,CAACU,GAAN,GAAY,IAAvB,CAApB,GAAmDV,KAAK,CAACU,GADjE;AAAA,UAEII,CAAC,GAAG,OAAOb,IAAI,CAACQ,IAAZ,GAAmBM,IAAI,CAACC,KAAL,CAAWf,IAAI,CAACS,GAAL,GAAW,IAAtB,CAAnB,GAAiDT,IAAI,CAACS,GAF9D;AAIAR,MAAAA,KAAK,GAAGA,KAAK,CAACM,KAAN,EAAR;AACA,UAAIN,KAAK,IAAI,OAAOA,KAAK,CAACO,IAA1B,EAAgCP,KAAK,CAACQ,GAAN,IAAa,GAAb;AAChC,aAAO,IAAIb,KAAK,CAACc,IAAV,CACHC,CADG,EAEHC,CAFG,EAGHC,CAHG,EAIHZ,KAAK,CAACQ,GAJH,CAAP;AA1BJ;AAgCD;;AACDZ,IAAI,CAACmB,MAAL,GAAc,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,OAAzB,CAAd;AACAC,MAAM,CAACC,OAAP,GAAiBrB,IAAjB","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Return a `RGBA` from the r,g,b,a channels.\n *\n * Examples:\n *\n *    rgba(255,0,0,0.5)\n *    // => rgba(255,0,0,0.5)\n *\n *    rgba(255,0,0,1)\n *    // => #ff0000\n *\n *    rgba(#ffcc00, 50%)\n *    // rgba(255,204,0,0.5)\n *\n * @param {Unit|RGBA|HSLA} red\n * @param {Unit} green\n * @param {Unit} blue\n * @param {Unit} alpha\n * @return {RGBA}\n * @api public\n */\n\nfunction rgba(red, green, blue, alpha){\n  switch (arguments.length) {\n    case 1:\n      utils.assertColor(red);\n      return red.rgba;\n    case 2:\n      utils.assertColor(red);\n      var color = red.rgba;\n      utils.assertType(green, 'unit', 'alpha');\n      alpha = green.clone();\n      if ('%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(\n          color.r\n        , color.g\n        , color.b\n        , alpha.val);\n    default:\n      utils.assertType(red, 'unit', 'red');\n      utils.assertType(green, 'unit', 'green');\n      utils.assertType(blue, 'unit', 'blue');\n      utils.assertType(alpha, 'unit', 'alpha');\n      var r = '%' == red.type ? Math.round(red.val * 2.55) : red.val\n        , g = '%' == green.type ? Math.round(green.val * 2.55) : green.val\n        , b = '%' == blue.type ? Math.round(blue.val * 2.55) : blue.val;\n\n      alpha = alpha.clone();\n      if (alpha && '%' == alpha.type) alpha.val /= 100;\n      return new nodes.RGBA(\n          r\n        , g\n        , b\n        , alpha.val);\n  }\n}\nrgba.params = ['red', 'green', 'blue', 'alpha'];\nmodule.exports = rgba;\n"]},"metadata":{},"sourceType":"script"}