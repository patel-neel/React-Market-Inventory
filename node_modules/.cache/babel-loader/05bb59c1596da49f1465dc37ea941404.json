{"ast":null,"code":"/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Compiler = require('../visitor/compiler'),\n    events = require('../renderer').events,\n    nodes = require('../nodes'),\n    parse = require('url').parse,\n    extname = require('path').extname,\n    utils = require('../utils'),\n    fs = require('fs');\n/**\n * Mime table.\n */\n\n\nvar defaultMimes = {\n  '.gif': 'image/gif',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.jpeg': 'image/jpeg',\n  '.svg': 'image/svg+xml',\n  '.webp': 'image/webp',\n  '.ttf': 'application/x-font-ttf',\n  '.eot': 'application/vnd.ms-fontobject',\n  '.woff': 'application/font-woff',\n  '.woff2': 'application/font-woff2'\n};\n/**\n * Supported encoding types\n */\n\nvar encodingTypes = {\n  BASE_64: 'base64',\n  UTF8: 'charset=utf-8'\n};\n/**\n * Return a url() function with the given `options`.\n *\n * Options:\n *\n *    - `limit` bytesize limit defaulting to 30Kb\n *    - `paths` image resolution path(s), merged with general lookup paths\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.url({ paths: [__dirname + '/public'] }))\n *      .render(function(err, css) { ... })\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function (options) {\n  options = options || {};\n\n  var _paths = options.paths || [];\n\n  var sizeLimit = null != options.limit ? options.limit : 30000;\n  var mimes = options.mimes || defaultMimes;\n  /**\n   * @param {object} url - The path to the image you want to encode.\n   * @param {object} enc - The encoding for the image. Defaults to base64, the \n   * other valid option is `utf8`.\n   */\n\n  function fn(url, enc) {\n    // Compile the url\n    var compiler = new Compiler(url),\n        encoding = encodingTypes.BASE_64;\n    compiler.isURL = true;\n    url = url.nodes.map(function (node) {\n      return compiler.visit(node);\n    }).join(''); // Parse literal\n\n    url = parse(url);\n\n    var ext = extname(url.pathname),\n        mime = mimes[ext],\n        hash = url.hash || '',\n        literal = new nodes.Literal('url(\"' + url.href + '\")'),\n        paths = _paths.concat(this.paths),\n        buf,\n        result; // Not supported\n\n\n    if (!mime) return literal; // Absolute\n\n    if (url.protocol) return literal; // Lookup\n\n    var found = utils.lookup(url.pathname, paths); // Failed to lookup\n\n    if (!found) {\n      events.emit('file not found', 'File ' + literal + ' could not be found, literal url retained!');\n      return literal;\n    } // Read data\n\n\n    buf = fs.readFileSync(found); // Too large\n\n    if (false !== sizeLimit && buf.length > sizeLimit) return literal;\n\n    if (enc && 'utf8' == enc.first.val.toLowerCase()) {\n      encoding = encodingTypes.UTF8;\n      result = buf.toString().replace(/\\s+/g, ' ').replace(/[{}\\|\\\\\\^~\\[\\]`\"<>#%]/g, function (match) {\n        return '%' + match[0].charCodeAt(0).toString(16).toUpperCase();\n      }).trim();\n    } else {\n      result = buf.toString(encoding) + hash;\n    } // Encode\n\n\n    return new nodes.Literal('url(\"data:' + mime + ';' + encoding + ',' + result + '\")');\n  }\n\n  ;\n  fn.raw = true;\n  return fn;\n}; // Exporting default mimes so we could easily access them\n\n\nmodule.exports.mimes = defaultMimes;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/url.js"],"names":["Compiler","require","events","nodes","parse","extname","utils","fs","defaultMimes","encodingTypes","BASE_64","UTF8","module","exports","options","_paths","paths","sizeLimit","limit","mimes","fn","url","enc","compiler","encoding","isURL","map","node","visit","join","ext","pathname","mime","hash","literal","Literal","href","concat","buf","result","protocol","found","lookup","emit","readFileSync","length","first","val","toLowerCase","toString","replace","match","charCodeAt","toUpperCase","trim","raw"],"mappings":"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","sourcesContent":["\n/*!\n * Stylus - plugin - url\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('../visitor/compiler')\n  , events = require('../renderer').events\n  , nodes = require('../nodes')\n  , parse = require('url').parse\n  , extname = require('path').extname\n  , utils = require('../utils')\n  , fs = require('fs');\n\n/**\n * Mime table.\n */\n\nvar defaultMimes = {\n    '.gif': 'image/gif'\n  , '.png': 'image/png'\n  , '.jpg': 'image/jpeg'\n  , '.jpeg': 'image/jpeg'\n  , '.svg': 'image/svg+xml'\n  , '.webp': 'image/webp'\n  , '.ttf': 'application/x-font-ttf'\n  , '.eot': 'application/vnd.ms-fontobject'\n  , '.woff': 'application/font-woff'\n  , '.woff2': 'application/font-woff2'\n};\n\n/**\n * Supported encoding types\n */\nvar encodingTypes = {\n  BASE_64: 'base64',\n  UTF8: 'charset=utf-8'\n}\n\n/**\n * Return a url() function with the given `options`.\n *\n * Options:\n *\n *    - `limit` bytesize limit defaulting to 30Kb\n *    - `paths` image resolution path(s), merged with general lookup paths\n *\n * Examples:\n *\n *    stylus(str)\n *      .set('filename', __dirname + '/css/test.styl')\n *      .define('url', stylus.url({ paths: [__dirname + '/public'] }))\n *      .render(function(err, css) { ... })\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  var _paths = options.paths || [];\n  var sizeLimit = null != options.limit ? options.limit : 30000;\n  var mimes = options.mimes || defaultMimes;\n\n  /**\n   * @param {object} url - The path to the image you want to encode.\n   * @param {object} enc - The encoding for the image. Defaults to base64, the \n   * other valid option is `utf8`.\n   */\n  function fn(url, enc) {\n    // Compile the url\n    var compiler = new Compiler(url)\n      , encoding = encodingTypes.BASE_64;\n\n    compiler.isURL = true;\n    url = url.nodes.map(function(node) {\n      return compiler.visit(node);\n    }).join('');\n\n    // Parse literal\n    url = parse(url);\n    var ext = extname(url.pathname)\n      , mime = mimes[ext]\n      , hash = url.hash || ''\n      , literal = new nodes.Literal('url(\"' + url.href + '\")')\n      , paths = _paths.concat(this.paths)\n      , buf\n      , result;\n\n    // Not supported\n    if(!mime) return literal;\n\n    // Absolute\n    if(url.protocol) return literal;\n\n    // Lookup\n    var found = utils.lookup(url.pathname, paths);\n\n    // Failed to lookup\n    if(!found) {\n      events.emit(\n          'file not found'\n        , 'File ' + literal + ' could not be found, literal url retained!'\n      );\n\n      return literal;\n    }\n\n    // Read data\n    buf = fs.readFileSync(found);\n\n    // Too large\n    if(false !== sizeLimit && buf.length > sizeLimit) return literal;\n\n    if(enc && 'utf8' == enc.first.val.toLowerCase()) {\n      encoding = encodingTypes.UTF8;\n      result = buf.toString().replace(/\\s+/g, ' ')\n        .replace(/[{}\\|\\\\\\^~\\[\\]`\"<>#%]/g, function(match) {\n          return '%' + match[0].charCodeAt(0).toString(16).toUpperCase();\n        }).trim();\n    } else {\n      result = buf.toString(encoding) + hash;\n    }\n\n    // Encode\n    return new nodes.Literal('url(\"data:' + mime + ';' +  encoding + ',' + result + '\")');\n  };\n\n  fn.raw = true;\n  return fn;\n};\n\n// Exporting default mimes so we could easily access them\nmodule.exports.mimes = defaultMimes;\n\n"]},"metadata":{},"sourceType":"script"}