{"ast":null,"code":"/*!\n * Stylus - SourceMapper\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Compiler = require('./compiler'),\n    Buffer = require('safer-buffer').Buffer,\n    SourceMapGenerator = require('source-map').SourceMapGenerator,\n    basename = require('path').basename,\n    extname = require('path').extname,\n    dirname = require('path').dirname,\n    join = require('path').join,\n    relative = require('path').relative,\n    sep = require('path').sep,\n    fs = require('fs');\n/**\n * Initialize a new `SourceMapper` generator with the given `root` Node\n * and the following `options`.\n *\n * @param {Node} root\n * @api public\n */\n\n\nvar SourceMapper = module.exports = function SourceMapper(root, options) {\n  options = options || {};\n  this.column = 1;\n  this.lineno = 1;\n  this.contents = {};\n  this.filename = options.filename;\n  this.dest = options.dest;\n  var sourcemap = options.sourcemap;\n  this.basePath = sourcemap.basePath || '.';\n  this.inline = sourcemap.inline;\n  this.comment = sourcemap.comment;\n\n  if (this.dest && extname(this.dest) === '.css') {\n    this.basename = basename(this.dest);\n    this.dest = dirname(this.dest);\n  } else {\n    this.basename = basename(this.filename, extname(this.filename)) + '.css';\n  }\n\n  this.utf8 = false;\n  this.map = new SourceMapGenerator({\n    file: this.basename,\n    sourceRoot: sourcemap.sourceRoot || null\n  });\n  Compiler.call(this, root, options);\n};\n/**\n * Inherit from `Compiler.prototype`.\n */\n\n\nSourceMapper.prototype.__proto__ = Compiler.prototype;\n/**\n * Generate and write source map.\n *\n * @return {String}\n * @api private\n */\n\nvar compile = Compiler.prototype.compile;\n\nSourceMapper.prototype.compile = function () {\n  var css = compile.call(this),\n      out = this.basename + '.map',\n      url = this.normalizePath(this.dest ? join(this.dest, out) : join(dirname(this.filename), out)),\n      map;\n\n  if (this.inline) {\n    map = this.map.toString();\n    url = 'data:application/json;' + (this.utf8 ? 'charset=utf-8;' : '') + 'base64,' + Buffer.from(map).toString('base64');\n  }\n\n  if (this.inline || false !== this.comment) css += '/*# sourceMappingURL=' + url + ' */';\n  return css;\n};\n/**\n * Add mapping information.\n *\n * @param {String} str\n * @param {Node} node\n * @return {String}\n * @api private\n */\n\n\nSourceMapper.prototype.out = function (str, node) {\n  if (node && node.lineno) {\n    var filename = this.normalizePath(node.filename);\n    this.map.addMapping({\n      original: {\n        line: node.lineno,\n        column: node.column - 1\n      },\n      generated: {\n        line: this.lineno,\n        column: this.column - 1\n      },\n      source: filename\n    });\n\n    if (this.inline && !this.contents[filename]) {\n      this.map.setSourceContent(filename, fs.readFileSync(node.filename, 'utf-8'));\n      this.contents[filename] = true;\n    }\n  }\n\n  this.move(str);\n  return str;\n};\n/**\n * Move current line and column position.\n *\n * @param {String} str\n * @api private\n */\n\n\nSourceMapper.prototype.move = function (str) {\n  var lines = str.match(/\\n/g),\n      idx = str.lastIndexOf('\\n');\n  if (lines) this.lineno += lines.length;\n  this.column = ~idx ? str.length - idx : this.column + str.length;\n};\n/**\n * Normalize the given `path`.\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\n\nSourceMapper.prototype.normalizePath = function (path) {\n  path = relative(this.dest || this.basePath, path);\n\n  if ('\\\\' == sep) {\n    path = path.replace(/^[a-z]:\\\\/i, '/').replace(/\\\\/g, '/');\n  }\n\n  return path;\n};\n/**\n * Visit Literal.\n */\n\n\nvar literal = Compiler.prototype.visitLiteral;\n\nSourceMapper.prototype.visitLiteral = function (lit) {\n  var val = literal.call(this, lit),\n      filename = this.normalizePath(lit.filename),\n      indentsRe = /^\\s+/,\n      lines = val.split('\\n'); // add mappings for multiline literals\n\n  if (lines.length > 1) {\n    lines.forEach(function (line, i) {\n      var indents = line.match(indentsRe),\n          column = indents && indents[0] ? indents[0].length : 0;\n      if (lit.css) column += 2;\n      this.map.addMapping({\n        original: {\n          line: lit.lineno + i,\n          column: column\n        },\n        generated: {\n          line: this.lineno + i,\n          column: 0\n        },\n        source: filename\n      });\n    }, this);\n  }\n\n  return val;\n};\n/**\n * Visit Charset.\n */\n\n\nvar charset = Compiler.prototype.visitCharset;\n\nSourceMapper.prototype.visitCharset = function (node) {\n  this.utf8 = 'utf-8' == node.val.string.toLowerCase();\n  return charset.call(this, node);\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/visitor/sourcemapper.js"],"names":["Compiler","require","Buffer","SourceMapGenerator","basename","extname","dirname","join","relative","sep","fs","SourceMapper","module","exports","root","options","column","lineno","contents","filename","dest","sourcemap","basePath","inline","comment","utf8","map","file","sourceRoot","call","prototype","__proto__","compile","css","out","url","normalizePath","toString","from","str","node","addMapping","original","line","generated","source","setSourceContent","readFileSync","move","lines","match","idx","lastIndexOf","length","path","replace","literal","visitLiteral","lit","val","indentsRe","split","forEach","i","indents","charset","visitCharset","string","toLowerCase"],"mappings":"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","sourcesContent":["/*!\n * Stylus - SourceMapper\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Compiler = require('./compiler')\n  , Buffer = require('safer-buffer').Buffer\n  , SourceMapGenerator = require('source-map').SourceMapGenerator\n  , basename = require('path').basename\n  , extname = require('path').extname\n  , dirname = require('path').dirname\n  , join = require('path').join\n  , relative = require('path').relative\n  , sep = require('path').sep\n  , fs = require('fs');\n\n/**\n * Initialize a new `SourceMapper` generator with the given `root` Node\n * and the following `options`.\n *\n * @param {Node} root\n * @api public\n */\n\nvar SourceMapper = module.exports = function SourceMapper(root, options){\n  options = options || {};\n  this.column = 1;\n  this.lineno = 1;\n  this.contents = {};\n  this.filename = options.filename;\n  this.dest = options.dest;\n\n  var sourcemap = options.sourcemap;\n  this.basePath = sourcemap.basePath || '.';\n  this.inline = sourcemap.inline;\n  this.comment = sourcemap.comment;\n  if (this.dest && extname(this.dest) === '.css') {\n    this.basename = basename(this.dest);\n    this.dest = dirname(this.dest);\n  } else {\n    this.basename = basename(this.filename, extname(this.filename)) + '.css';\n  }\n  this.utf8 = false;\n\n  this.map = new SourceMapGenerator({\n    file: this.basename,\n    sourceRoot: sourcemap.sourceRoot || null\n  });\n  Compiler.call(this, root, options);\n};\n\n/**\n * Inherit from `Compiler.prototype`.\n */\n\nSourceMapper.prototype.__proto__ = Compiler.prototype;\n\n/**\n * Generate and write source map.\n *\n * @return {String}\n * @api private\n */\n\nvar compile = Compiler.prototype.compile;\nSourceMapper.prototype.compile = function(){\n  var css = compile.call(this)\n    , out = this.basename + '.map'\n    , url = this.normalizePath(this.dest\n      ? join(this.dest, out)\n      : join(dirname(this.filename), out))\n    , map;\n\n  if (this.inline) {\n    map = this.map.toString();\n    url = 'data:application/json;'\n      + (this.utf8 ?  'charset=utf-8;' : '') + 'base64,'\n      + Buffer.from(map).toString('base64');\n  }\n  if (this.inline || false !== this.comment)\n    css += '/*# sourceMappingURL=' + url + ' */';\n  return css;\n};\n\n/**\n * Add mapping information.\n *\n * @param {String} str\n * @param {Node} node\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.out = function(str, node){\n  if (node && node.lineno) {\n    var filename = this.normalizePath(node.filename);\n\n    this.map.addMapping({\n      original: {\n        line: node.lineno,\n        column: node.column - 1\n      },\n      generated: {\n        line: this.lineno,\n        column: this.column - 1\n      },\n      source: filename\n    });\n\n    if (this.inline && !this.contents[filename]) {\n      this.map.setSourceContent(filename, fs.readFileSync(node.filename, 'utf-8'));\n      this.contents[filename] = true;\n    }\n  }\n\n  this.move(str);\n  return str;\n};\n\n/**\n * Move current line and column position.\n *\n * @param {String} str\n * @api private\n */\n\nSourceMapper.prototype.move = function(str){\n  var lines = str.match(/\\n/g)\n    , idx = str.lastIndexOf('\\n');\n\n  if (lines) this.lineno += lines.length;\n  this.column = ~idx\n    ? str.length - idx\n    : this.column + str.length;\n};\n\n/**\n * Normalize the given `path`.\n *\n * @param {String} path\n * @return {String}\n * @api private\n */\n\nSourceMapper.prototype.normalizePath = function(path){\n  path = relative(this.dest || this.basePath, path);\n  if ('\\\\' == sep) {\n    path = path.replace(/^[a-z]:\\\\/i, '/')\n      .replace(/\\\\/g, '/');\n  }\n  return path;\n};\n\n/**\n * Visit Literal.\n */\n\nvar literal = Compiler.prototype.visitLiteral;\nSourceMapper.prototype.visitLiteral = function(lit){\n  var val = literal.call(this, lit)\n    , filename = this.normalizePath(lit.filename)\n    , indentsRe = /^\\s+/\n    , lines = val.split('\\n');\n\n  // add mappings for multiline literals\n  if (lines.length > 1) {\n    lines.forEach(function(line, i) {\n      var indents = line.match(indentsRe)\n        , column = indents && indents[0]\n            ? indents[0].length\n            : 0;\n\n      if (lit.css) column += 2;\n\n      this.map.addMapping({\n        original: {\n          line: lit.lineno + i,\n          column: column\n        },\n        generated: {\n          line: this.lineno + i,\n          column: 0\n        },\n        source: filename\n      });\n    }, this);\n  }\n  return val;\n};\n\n/**\n * Visit Charset.\n */\n\nvar charset = Compiler.prototype.visitCharset;\nSourceMapper.prototype.visitCharset = function(node){\n  this.utf8 = ('utf-8' == node.val.string.toLowerCase());\n  return charset.call(this, node);\n};\n"]},"metadata":{},"sourceType":"script"}