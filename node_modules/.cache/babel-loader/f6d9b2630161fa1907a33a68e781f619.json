{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes');\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\n\nfunction transparentify(top, bottom, alpha) {\n  utils.assertColor(top);\n  top = top.rgba; // Handle default arguments\n\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function (channel) {\n    return (top[channel] - bottom[channel]) / ((0 < top[channel] - bottom[channel] ? 255 : 0) - bottom[channel]);\n  }).sort(function (a, b) {\n    return b - a;\n  })[0];\n\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0); // Calculate the resulting color\n\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel];\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha;\n    }\n  }\n\n  return new nodes.RGBA(processChannel('r'), processChannel('g'), processChannel('b'), Math.round(bestAlpha * 100) / 100);\n}\n\ntransparentify.params = ['top', 'bottom', 'alpha'];\nmodule.exports = transparentify;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/transparentify.js"],"names":["utils","require","nodes","transparentify","top","bottom","alpha","assertColor","rgba","RGBA","bestAlpha","map","channel","sort","a","b","assertType","type","val","Math","max","min","processChannel","round","params","module","exports"],"mappings":"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","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes');\n\n/**\n * Returns the transparent version of the given `top` color,\n * as if it was blend over the given `bottom` color.\n *\n * Examples:\n *\n *     transparentify(#808080)\n *     => rgba(0,0,0,0.5)\n *\n *     transparentify(#414141, #000)\n *     => rgba(255,255,255,0.25)\n *\n *     transparentify(#91974C, #F34949, 0.5)\n *     => rgba(47,229,79,0.5)\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @param {Unit} [alpha]\n * @return {RGBA}\n * @api public\n */\n\nfunction transparentify(top, bottom, alpha){\n  utils.assertColor(top);\n  top = top.rgba;\n  // Handle default arguments\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  if (!alpha && bottom && !bottom.rgba) {\n    alpha = bottom;\n    bottom = new nodes.RGBA(255, 255, 255, 1);\n  }\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  var bestAlpha = ['r', 'g', 'b'].map(function(channel){\n    return (top[channel] - bottom[channel]) / ((0 < (top[channel] - bottom[channel]) ? 255 : 0) - bottom[channel]);\n  }).sort(function(a, b){return b - a;})[0];\n  if (alpha) {\n    utils.assertType(alpha, 'unit', 'alpha');\n    if ('%' == alpha.type) {\n      bestAlpha = alpha.val / 100;\n    } else if (!alpha.type) {\n      bestAlpha = alpha = alpha.val;\n    }\n  }\n  bestAlpha = Math.max(Math.min(bestAlpha, 1), 0);\n  // Calculate the resulting color\n  function processChannel(channel) {\n    if (0 == bestAlpha) {\n      return bottom[channel]\n    } else {\n      return bottom[channel] + (top[channel] - bottom[channel]) / bestAlpha\n    }\n  }\n  return new nodes.RGBA(\n    processChannel('r'),\n    processChannel('g'),\n    processChannel('b'),\n    Math.round(bestAlpha * 100) / 100\n  );\n}\ntransparentify.params = ['top', 'bottom', 'alpha'];\nmodule.exports = transparentify;\n"]},"metadata":{},"sourceType":"script"}