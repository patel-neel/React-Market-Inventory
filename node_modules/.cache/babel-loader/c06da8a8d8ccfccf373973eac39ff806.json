{"ast":null,"code":"var utils = require('../utils'),\n    nodes = require('../nodes'),\n    blend = require('./blend'),\n    luminosity = require('./luminosity');\n/**\n * Returns the contrast ratio object between `top` and `bottom` colors,\n * based on http://leaverou.github.io/contrast-ratio/\n * and https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L108\n *\n * Examples:\n *\n *     contrast(#000, #fff).ratio\n *     => 21\n *\n *     contrast(#000, rgba(#FFF, 0.5))\n *     => { \"ratio\": \"13.15;\", \"error\": \"7.85\", \"min\": \"5.3\", \"max\": \"21\" }\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @return {Object}\n * @api public\n */\n\n\nfunction contrast(top, bottom) {\n  if ('rgba' != top.nodeName && 'hsla' != top.nodeName) {\n    return new nodes.Literal('contrast(' + (top.isNull ? '' : top.toString()) + ')');\n  }\n\n  var result = new nodes.Object();\n  top = top.rgba;\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n\n  function contrast(top, bottom) {\n    if (1 > top.a) {\n      top = blend(top, bottom);\n    }\n\n    var l1 = luminosity(bottom).val + 0.05,\n        l2 = luminosity(top).val + 0.05,\n        ratio = l1 / l2;\n\n    if (l2 > l1) {\n      ratio = 1 / ratio;\n    }\n\n    return Math.round(ratio * 10) / 10;\n  }\n\n  if (1 <= bottom.a) {\n    var resultRatio = new nodes.Unit(contrast(top, bottom));\n    result.set('ratio', resultRatio);\n    result.set('error', new nodes.Unit(0));\n    result.set('min', resultRatio);\n    result.set('max', resultRatio);\n  } else {\n    var onBlack = contrast(top, blend(bottom, new nodes.RGBA(0, 0, 0, 1))),\n        onWhite = contrast(top, blend(bottom, new nodes.RGBA(255, 255, 255, 1))),\n        max = Math.max(onBlack, onWhite);\n\n    function processChannel(topChannel, bottomChannel) {\n      return Math.min(Math.max(0, (topChannel - bottomChannel * bottom.a) / (1 - bottom.a)), 255);\n    }\n\n    var closest = new nodes.RGBA(processChannel(top.r, bottom.r), processChannel(top.g, bottom.g), processChannel(top.b, bottom.b), 1);\n    var min = contrast(top, blend(bottom, closest));\n    result.set('ratio', new nodes.Unit(Math.round((min + max) * 50) / 100));\n    result.set('error', new nodes.Unit(Math.round((max - min) * 50) / 100));\n    result.set('min', new nodes.Unit(min));\n    result.set('max', new nodes.Unit(max));\n  }\n\n  return result;\n}\n\ncontrast.params = ['top', 'bottom'];\nmodule.exports = contrast;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/functions/contrast.js"],"names":["utils","require","nodes","blend","luminosity","contrast","top","bottom","nodeName","Literal","isNull","toString","result","Object","rgba","RGBA","assertColor","a","l1","val","l2","ratio","Math","round","resultRatio","Unit","set","onBlack","onWhite","max","processChannel","topChannel","bottomChannel","min","closest","r","g","b","params","module","exports"],"mappings":"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","sourcesContent":["var utils = require('../utils')\n  , nodes = require('../nodes')\n  , blend = require('./blend')\n  , luminosity = require('./luminosity');\n\n/**\n * Returns the contrast ratio object between `top` and `bottom` colors,\n * based on http://leaverou.github.io/contrast-ratio/\n * and https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js#L108\n *\n * Examples:\n *\n *     contrast(#000, #fff).ratio\n *     => 21\n *\n *     contrast(#000, rgba(#FFF, 0.5))\n *     => { \"ratio\": \"13.15;\", \"error\": \"7.85\", \"min\": \"5.3\", \"max\": \"21\" }\n *\n * @param {RGBA|HSLA} top\n * @param {RGBA|HSLA} [bottom=#fff]\n * @return {Object}\n * @api public\n */\n\nfunction contrast(top, bottom){\n  if ('rgba' != top.nodeName && 'hsla' != top.nodeName) {\n    return new nodes.Literal('contrast(' + (top.isNull ? '' : top.toString()) + ')');\n  }\n  var result = new nodes.Object();\n  top = top.rgba;\n  bottom = bottom || new nodes.RGBA(255, 255, 255, 1);\n  utils.assertColor(bottom);\n  bottom = bottom.rgba;\n  function contrast(top, bottom) {\n    if (1 > top.a) {\n      top = blend(top, bottom);\n    }\n    var l1 = luminosity(bottom).val + 0.05\n      , l2 = luminosity(top).val + 0.05\n      , ratio = l1 / l2;\n\n    if (l2 > l1) {\n      ratio = 1 / ratio;\n    }\n    return Math.round(ratio * 10) / 10;\n  }\n\n  if (1 <= bottom.a) {\n    var resultRatio = new nodes.Unit(contrast(top, bottom));\n    result.set('ratio', resultRatio);\n    result.set('error', new nodes.Unit(0));\n    result.set('min', resultRatio);\n    result.set('max', resultRatio);\n  } else {\n    var onBlack = contrast(top, blend(bottom, new nodes.RGBA(0, 0, 0, 1)))\n      , onWhite = contrast(top, blend(bottom, new nodes.RGBA(255, 255, 255, 1)))\n      , max = Math.max(onBlack, onWhite);\n    function processChannel(topChannel, bottomChannel) {\n      return Math.min(Math.max(0, (topChannel - bottomChannel * bottom.a) / (1 - bottom.a)), 255);\n    }\n    var closest = new nodes.RGBA(\n      processChannel(top.r, bottom.r),\n      processChannel(top.g, bottom.g),\n      processChannel(top.b, bottom.b),\n      1\n    );\n    var min = contrast(top, blend(bottom, closest));\n\n    result.set('ratio', new nodes.Unit(Math.round((min + max) * 50) / 100));\n    result.set('error', new nodes.Unit(Math.round((max - min) * 50) / 100));\n    result.set('min', new nodes.Unit(min));\n    result.set('max', new nodes.Unit(max));\n  }\n  return result;\n}\ncontrast.params = ['top', 'bottom'];\nmodule.exports = contrast;\n"]},"metadata":{},"sourceType":"script"}