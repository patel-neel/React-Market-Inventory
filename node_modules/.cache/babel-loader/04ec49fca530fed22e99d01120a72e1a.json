{"ast":null,"code":"var _classCallCheck = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nvar ArraySet = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ArraySet() {\n    _classCallCheck(this, ArraySet);\n\n    this._array = [];\n    this._set = new Map();\n  }\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n\n\n  _createClass(ArraySet, [{\n    key: \"size\",\n    value:\n    /**\n     * Return how many unique items are in this ArraySet. If duplicates have been\n     * added, than those do not count towards the size.\n     *\n     * @returns Number\n     */\n    function size() {\n      return this._set.size;\n    }\n    /**\n     * Add the given string to this set.\n     *\n     * @param String aStr\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(aStr, aAllowDuplicates) {\n      var isDuplicate = this.has(aStr);\n      var idx = this._array.length;\n\n      if (!isDuplicate || aAllowDuplicates) {\n        this._array.push(aStr);\n      }\n\n      if (!isDuplicate) {\n        this._set.set(aStr, idx);\n      }\n    }\n    /**\n     * Is the given string a member of this set?\n     *\n     * @param String aStr\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(aStr) {\n      return this._set.has(aStr);\n    }\n    /**\n     * What is the index of the given string in the array?\n     *\n     * @param String aStr\n     */\n\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(aStr) {\n      var idx = this._set.get(aStr);\n\n      if (idx >= 0) {\n        return idx;\n      }\n\n      throw new Error('\"' + aStr + '\" is not in the set.');\n    }\n    /**\n     * What is the element at the given index?\n     *\n     * @param Number aIdx\n     */\n\n  }, {\n    key: \"at\",\n    value: function at(aIdx) {\n      if (aIdx >= 0 && aIdx < this._array.length) {\n        return this._array[aIdx];\n      }\n\n      throw new Error(\"No element indexed by \" + aIdx);\n    }\n    /**\n     * Returns the array representation of this set (which has the proper indices\n     * indicated by indexOf). Note that this is a copy of the internal array used\n     * for storing the members so that no one can mess with internal state.\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this._array.slice();\n    }\n  }], [{\n    key: \"fromArray\",\n    value: function fromArray(aArray, aAllowDuplicates) {\n      var set = new ArraySet();\n\n      for (var i = 0, len = aArray.length; i < len; i++) {\n        set.add(aArray[i], aAllowDuplicates);\n      }\n\n      return set;\n    }\n  }]);\n\n  return ArraySet;\n}();\n\nexports.ArraySet = ArraySet;","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/node_modules/source-map/lib/array-set.js"],"names":["ArraySet","_array","_set","Map","size","aStr","aAllowDuplicates","isDuplicate","has","idx","length","push","set","get","Error","aIdx","slice","aArray","i","len","add","exports"],"mappings":";;;;AAAA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;IACMA,Q;;;AACJ,sBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;AAED;AACF;AACA;;;;;;AASE;AACF;AACA;AACA;AACA;AACA;AACE,oBAAO;AACL,aAAO,KAAKD,IAAL,CAAUE,IAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,aAAIC,IAAJ,EAAUC,gBAAV,EAA4B;AAC1B,UAAMC,WAAW,GAAG,KAAKC,GAAL,CAASH,IAAT,CAApB;AACA,UAAMI,GAAG,GAAG,KAAKR,MAAL,CAAYS,MAAxB;;AACA,UAAI,CAACH,WAAD,IAAgBD,gBAApB,EAAsC;AACpC,aAAKL,MAAL,CAAYU,IAAZ,CAAiBN,IAAjB;AACD;;AACD,UAAI,CAACE,WAAL,EAAkB;AAChB,aAAKL,IAAL,CAAUU,GAAV,CAAcP,IAAd,EAAoBI,GAApB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;WACE,aAAIJ,IAAJ,EAAU;AACN,aAAO,KAAKH,IAAL,CAAUM,GAAV,CAAcH,IAAd,CAAP;AACH;AAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAQA,IAAR,EAAc;AACZ,UAAMI,GAAG,GAAG,KAAKP,IAAL,CAAUW,GAAV,CAAcR,IAAd,CAAZ;;AACA,UAAII,GAAG,IAAI,CAAX,EAAc;AACV,eAAOA,GAAP;AACH;;AACD,YAAM,IAAIK,KAAJ,CAAU,MAAMT,IAAN,GAAa,sBAAvB,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,YAAGU,IAAH,EAAS;AACP,UAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAG,KAAKd,MAAL,CAAYS,MAApC,EAA4C;AAC1C,eAAO,KAAKT,MAAL,CAAYc,IAAZ,CAAP;AACD;;AACD,YAAM,IAAID,KAAJ,CAAU,2BAA2BC,IAArC,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,mBAAU;AACR,aAAO,KAAKd,MAAL,CAAYe,KAAZ,EAAP;AACD;;;WA3ED,mBAAiBC,MAAjB,EAAyBX,gBAAzB,EAA2C;AACzC,UAAMM,GAAG,GAAG,IAAIZ,QAAJ,EAAZ;;AACA,WAAK,IAAIkB,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGF,MAAM,CAACP,MAA7B,EAAqCQ,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,EAA/C,EAAmD;AACjDN,QAAAA,GAAG,CAACQ,GAAJ,CAAQH,MAAM,CAACC,CAAD,CAAd,EAAmBZ,gBAAnB;AACD;;AACD,aAAOM,GAAP;AACD;;;;;;AAuEHS,OAAO,CAACrB,QAAR,GAAmBA,QAAnB","sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n"]},"metadata":{},"sourceType":"script"}