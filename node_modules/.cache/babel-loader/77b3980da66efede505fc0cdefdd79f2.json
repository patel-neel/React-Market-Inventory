{"ast":null,"code":"/*!\n * Stylus - String\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nvar Node = require('./node'),\n    sprintf = require('../functions').s,\n    utils = require('../utils'),\n    nodes = require('./');\n/**\n * Initialize a new `String` with the given `val`.\n *\n * @param {String} val\n * @param {String} quote\n * @api public\n */\n\n\nvar String = module.exports = function String(val, quote) {\n  Node.call(this);\n  this.val = val;\n  this.string = val;\n  this.prefixed = false;\n\n  if (typeof quote !== 'string') {\n    this.quote = \"'\";\n  } else {\n    this.quote = quote;\n  }\n};\n/**\n * Inherit from `Node.prototype`.\n */\n\n\nString.prototype.__proto__ = Node.prototype;\n/**\n * Return quoted string.\n *\n * @return {String}\n * @api public\n */\n\nString.prototype.toString = function () {\n  return this.quote + this.val + this.quote;\n};\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\n\nString.prototype.clone = function () {\n  var clone = new String(this.val, this.quote);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\n\nString.prototype.toJSON = function () {\n  return {\n    __type: 'String',\n    val: this.val,\n    quote: this.quote,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};\n/**\n * Return Boolean based on the length of this string.\n *\n * @return {Boolean}\n * @api public\n */\n\n\nString.prototype.toBoolean = function () {\n  return nodes.Boolean(this.val.length);\n};\n/**\n * Coerce `other` to a string.\n *\n * @param {Node} other\n * @return {String}\n * @api public\n */\n\n\nString.prototype.coerce = function (other) {\n  switch (other.nodeName) {\n    case 'string':\n      return other;\n\n    case 'expression':\n      return new String(other.nodes.map(function (node) {\n        return this.coerce(node).val;\n      }, this).join(' '));\n\n    default:\n      return new String(other.toString());\n  }\n};\n/**\n * Operate on `right` with the given `op`.\n *\n * @param {String} op\n * @param {Node} right\n * @return {Node}\n * @api public\n */\n\n\nString.prototype.operate = function (op, right) {\n  switch (op) {\n    case '%':\n      var expr = new nodes.Expression();\n      expr.push(this); // constructargs\n\n      var args = 'expression' == right.nodeName ? utils.unwrap(right).nodes : [right]; // apply\n\n      return sprintf.apply(null, [expr].concat(args));\n\n    case '+':\n      var expr = new nodes.Expression();\n      expr.push(new String(this.val + this.coerce(right).val));\n      return expr;\n\n    default:\n      return Node.prototype.operate.call(this, op, right);\n  }\n};","map":{"version":3,"sources":["/Users/neelpatel/Desktop/ReactForBeginnersStarterFilesmaster/catchOfTheDay/node_modules/stylus/lib/nodes/string.js"],"names":["Node","require","sprintf","s","utils","nodes","String","module","exports","val","quote","call","string","prefixed","prototype","__proto__","toString","clone","lineno","column","filename","toJSON","__type","toBoolean","Boolean","length","coerce","other","nodeName","map","node","join","operate","op","right","expr","Expression","push","args","unwrap","apply","concat"],"mappings":"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","sourcesContent":["/*!\n * Stylus - String\n * Copyright (c) Automattic <developer.wordpress.com>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar Node = require('./node')\n  , sprintf = require('../functions').s\n  , utils = require('../utils')\n  , nodes = require('./');\n\n/**\n * Initialize a new `String` with the given `val`.\n *\n * @param {String} val\n * @param {String} quote\n * @api public\n */\n\nvar String = module.exports = function String(val, quote){\n  Node.call(this);\n  this.val = val;\n  this.string = val;\n  this.prefixed = false;\n  if (typeof quote !== 'string') {\n    this.quote = \"'\";\n  } else {\n    this.quote = quote;\n  }\n};\n\n/**\n * Inherit from `Node.prototype`.\n */\n\nString.prototype.__proto__ = Node.prototype;\n\n/**\n * Return quoted string.\n *\n * @return {String}\n * @api public\n */\n\nString.prototype.toString = function(){\n  return this.quote + this.val + this.quote;\n};\n\n/**\n * Return a clone of this node.\n * \n * @return {Node}\n * @api public\n */\n\nString.prototype.clone = function(){\n  var clone = new String(this.val, this.quote);\n  clone.lineno = this.lineno;\n  clone.column = this.column;\n  clone.filename = this.filename;\n  return clone;\n};\n\n/**\n * Return a JSON representation of this node.\n *\n * @return {Object}\n * @api public\n */\n\nString.prototype.toJSON = function(){\n  return {\n    __type: 'String',\n    val: this.val,\n    quote: this.quote,\n    lineno: this.lineno,\n    column: this.column,\n    filename: this.filename\n  };\n};\n\n/**\n * Return Boolean based on the length of this string.\n *\n * @return {Boolean}\n * @api public\n */\n\nString.prototype.toBoolean = function(){\n  return nodes.Boolean(this.val.length);\n};\n\n/**\n * Coerce `other` to a string.\n *\n * @param {Node} other\n * @return {String}\n * @api public\n */\n\nString.prototype.coerce = function(other){\n  switch (other.nodeName) {\n    case 'string':\n      return other;\n    case 'expression':\n      return new String(other.nodes.map(function(node){\n        return this.coerce(node).val;\n      }, this).join(' '));\n    default:\n      return new String(other.toString());\n  }\n};\n\n/**\n * Operate on `right` with the given `op`.\n *\n * @param {String} op\n * @param {Node} right\n * @return {Node}\n * @api public\n */\n\nString.prototype.operate = function(op, right){\n  switch (op) {\n    case '%':\n      var expr = new nodes.Expression;\n      expr.push(this);\n\n      // constructargs\n      var args = 'expression' == right.nodeName\n        ? utils.unwrap(right).nodes\n        : [right];\n\n      // apply\n      return sprintf.apply(null, [expr].concat(args));\n    case '+':\n      var expr = new nodes.Expression;\n      expr.push(new String(this.val + this.coerce(right).val));\n      return expr;\n    default:\n      return Node.prototype.operate.call(this, op, right);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}